[{"D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\index.js":"1","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\App.js":"2","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\api\\api.js":"3","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\reportWebVitals.js":"4","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\Sidebar.js":"5","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\views\\questions.js":"6"},{"size":525,"mtime":1612585501223,"results":"7","hashOfConfig":"8"},{"size":23491,"mtime":1614060224823,"results":"9","hashOfConfig":"8"},{"size":5633,"mtime":1613841486599,"results":"10","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"8"},{"size":0,"mtime":1612611713525,"results":"12","hashOfConfig":"13"},{"size":256,"mtime":1613836697833,"results":"14","hashOfConfig":"13"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"kz50tk",{"filePath":"18","messages":"19","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"17"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16g7jkb",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\index.js",[],["30","31"],"D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\App.js",["32","33","34","35","36","37"],"\nimport React from 'react';\nimport { Chart } from 'primereact/chart';\nimport { Button } from 'primereact/button';\nimport { Card } from 'primereact/card';\nimport { InputText } from 'primereact/inputtext';\nimport { Password } from 'primereact/password';\nimport { PanelMenu } from 'primereact/panelmenu';\nimport api from './api/api'\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Navbar from 'react-bootstrap/Navbar';\nimport 'react-pro-sidebar/dist/css/styles.css';\nimport './index.css';\nimport 'primereact/resources/themes/saga-blue/theme.css'\nimport 'primereact/resources/primereact.min.css'\nimport 'primeicons/primeicons.css'\n\nimport loginLogo from './assets/kpi-digital-login.png';\n\nconst itemsPanelMenu = [\n    {\n        label: 'File',\n        icon: 'pi pi-fw pi-file',\n        items: [\n            {\n                label: 'New',\n                icon: 'pi pi-fw pi-plus',\n                items: [\n                    {\n                        label: 'Bookmark',\n                        icon: 'pi pi-fw pi-bookmark'\n                    },\n                    {\n                        label: 'Video',\n                        icon: 'pi pi-fw pi-video'\n                    }\n                ]\n            },\n            {\n                label: 'Delete',\n                icon: 'pi pi-fw pi-trash'\n            },\n            {\n                label: 'Export',\n                icon: 'pi pi-fw pi-external-link'\n            }\n        ]\n    },\n    {\n        label: 'Edit',\n        icon: 'pi pi-fw pi-pencil',\n        items: [\n            {\n                label: 'Left',\n                icon: 'pi pi-fw pi-align-left'\n            },\n            {\n                label: 'Right',\n                icon: 'pi pi-fw pi-align-right'\n            },\n            {\n                label: 'Center',\n                icon: 'pi pi-fw pi-align-center'\n            },\n            {\n                label: 'Justify',\n                icon: 'pi pi-fw pi-align-justify'\n            },\n\n        ]\n    },\n    {\n        label: 'Users',\n        icon: 'pi pi-fw pi-user',\n        items: [\n            {\n                label: 'New',\n                icon: 'pi pi-fw pi-user-plus'\n            },\n            {\n                label: 'Delete',\n                icon: 'pi pi-fw pi-user-minus'\n            },\n            {\n                label: 'Search',\n                icon: 'pi pi-fw pi-users',\n                items: [\n                    {\n                        label: 'Filter',\n                        icon: 'pi pi-fw pi-filter',\n                        items: [\n                            {\n                                label: 'Print',\n                                icon: 'pi pi-fw pi-print'\n                            }\n                        ]\n                    },\n                    {\n                        icon: 'pi pi-fw pi-bars',\n                        label: 'List'\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        label: 'Events',\n        icon: 'pi pi-fw pi-calendar',\n        items: [\n            {\n                label: 'Edit',\n                icon: 'pi pi-fw pi-pencil',\n                items: [\n                    {\n                        label: 'Save',\n                        icon: 'pi pi-fw pi-calendar-plus'\n                    },\n                    {\n                        label: 'Delete',\n                        icon: 'pi pi-fw pi-calendar-minus'\n                    }\n                ]\n            },\n            {\n                label: 'Archieve',\n                icon: 'pi pi-fw pi-calendar-times',\n                items: [\n                    {\n                        label: 'Remove',\n                        icon: 'pi pi-fw pi-calendar-minus'\n                    }\n                ]\n            }\n        ]\n    }\n];\n\nconst lightOptions = {\n    legend: {\n        labels: {\n            fontColor: '#495057'\n        }\n    },\n    scales: {\n        xAxes: [{\n            ticks: {\n                fontColor: '#495057'\n            }\n        }],\n        yAxes: [{\n            ticks: {\n                fontColor: '#495057'\n            }\n        }]\n    }\n};\n\nconst colorsBars = [\"#80F31F\", \"#A5DE0B\", \"#C7C101\", \"#E39E03\", \"#F6780F\", \"#FE5326\", \"#FB3244\", \"#ED1868\", \"#D5078E\", \"#B601B3\", \"#9106D3\", \"#6B16EC\", \"#472FFA\", \"#2850FE\", \"#1175F7\", \"#039BE5\", \"#01BECA\", \"#0ADCA8\", \"#1DF283\", \"#3AFD5D\", \"#5CFD3A\", \"#82F21E\", \"#A7DD0A\", \"#C9BF01\", \"#E49C03\", \"#F77610\", \"#FE5127\", \"#FB3046\", \"#EC166A\", \"#D40690\", \"#B401B5\", \"#8F06D5\", \"#6917ED\", \"#4531FB\", \"#2752FE\", \"#1077F6\", \"#039DE4\", \"#01C0C8\", \"#0BDEA6\", \"#1FF381\", \"#3BFD5B\", \"#5EFD39\", \"#84F11D\", \"#A9DB0A\", \"#CBBD01\", \"#E69A04\", \"#F77411\", \"#FE4F29\", \"#FA2E48\", \"#EB156D\"]\n\nconst months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n]\n\nfunction App() {\n\n    const userKpiDigitalTemp = { name: 'admin', pass: 'admin' }\n    const header = <img alt=\"Card\" src={loginLogo} />;\n    const footer = <span>\n        <Button label=\"Entrar\" onClick={(e) => handleLogin(e.target.value)} style={{ width: '100%', marginRight: '.25em' }} />\n    </span>;\n\n    let [responseDataLineChart, setResponseDataLineChart] = React.useState({})\n    let [responseDataBarChart, setResponseDataBarChart] = React.useState({})\n    const [username, setUsername] = React.useState(\"\");\n    const [password, setPassword] = React.useState(\"\");\n    const [user, setUser] = React.useState()\n\n    const [crudeJsonResponseDataBarChart, setCrudeJsonResponseDataBarChart] = React.useState({})\n    const [indicator1, setIndicator1] = React.useState([\"Selecione...\"])\n    const [indicator2, setIndicator2] = React.useState([\"Selecione...\"])\n    const [indicator3, setIndicator3] = React.useState([\"Selecione...\"])\n    const AddIndicator1 = indicator1.map(Add => Add)\n    const AddIndicator2 = indicator2.map(Add => Add)\n    const AddIndicator3 = indicator3.map(Add => Add)\n    const [selectedIndicator3, setSelectedIndicator3] = React.useState([])\n    const Indicators3Ul = selectedIndicator3.map(item => <div key={item}>\n        <li>\n            {item}\n        </li>\n    </div>)\n    const [selectedIndicator1, setSelectedIndicator1] = React.useState('')\n    const [selectedIndicator2, setSelectedIndicator2] = React.useState('')\n\n    const handleIndicator1TypeChange = (e) => {\n        console.clear()\n        console.log((indicator1[e.target.value]))\n        setSelectedIndicator1(indicator1[e.target.value])\n        setSelectedIndicator3([])\n        setIndicator3([\"Selecione...\"])\n    }\n\n    const handleIndicator2TypeChange = (e) => {\n        console.clear()\n        console.log((indicator2[e.target.value]))\n        setSelectedIndicator2(indicator2[e.target.value])\n        let json = crudeJsonResponseDataBarChart\n\n        var groupBy = function groupBy(list, keyGetter) {\n            const map = new Map();\n            list.forEach((item) => {\n                const key = keyGetter(item);\n                const collection = map.get(key);\n                if (!collection) {\n                    map.set(key, [item]);\n                } else {\n                    collection.push(item);\n                }\n            });\n            return map;\n        }\n        var xaxis = Array.from(groupBy(json, x => x[selectedIndicator1]), ([name, value]) => ({ name, value }));\n        var yaxis = Array.from(groupBy(json, x => x[indicator2[e.target.value]]), ([name, value]) => ({ name }));\n\n        setIndicator3(yaxis.map(r => r.name))\n    }\n\n    const handleIndicator3TypeChange = (e) => {\n        console.clear()\n        console.log((indicator3[e.target.value]))\n        let indicators = selectedIndicator3\n        indicators.push(indicator3[e.target.value])\n        console.log(indicators)\n        setSelectedIndicator3(indicators)\n    }\n\n    React.useEffect(() => {\n        const loggedInUser = localStorage.getItem(\"user\");\n        if (loggedInUser) {\n            const foundUser = JSON.parse(loggedInUser);\n            setUser(foundUser);\n        }\n    }, []);\n\n    const handleLogin = (e) => {\n        console.log('handleLogin')\n        if (username === userKpiDigitalTemp.name && password === userKpiDigitalTemp.pass) {\n            setUser({ name: username, pass: password });\n            localStorage.setItem('user', JSON.stringify({ name: username }));\n        }\n    }\n\n    const handleLogout = (e) => {\n        console.log('handleLogout')\n        setUser({});\n        setUsername(\"\");\n        setPassword(\"\");\n        localStorage.clear();\n        window.location.reload(false);\n    };\n\n    const fetchDataTest = () => {\n        console.log(\"fetchDataTest\")\n        if (selectedIndicator1 !== \"\" && selectedIndicator2 !== \"\" && selectedIndicator3 !== \"\") {\n            let json = crudeJsonResponseDataBarChart\n            let indicators = Object.keys(json[0]).map(key => key);\n\n            let groupBy = function groupBy(list, keyGetter) {\n                const map = new Map();\n                list.forEach((item) => {\n                    const key = keyGetter(item);\n                    const collection = map.get(key);\n                    if (!collection) {\n                        map.set(key, [item]);\n                    } else {\n                        collection.push(item);\n                    }\n                });\n                return map;\n            }\n\n            let xaxis = Array.from(groupBy(json, x => x[selectedIndicator1]), ([name, value]) => ({ name, value }));\n            let yaxis = Array.from(groupBy(json, x => x[selectedIndicator2]), ([name, value]) => ({ name }));\n\n            xaxis.forEach(x => {\n                x['yaxis'] = Array.from(groupBy(x.value, x => x[selectedIndicator2]), ([name, value]) => ({ name, quantidade: value.length }));\n            })\n\n            let series = []\n            yaxis.forEach((y, index) => {\n                let dataset = xaxis.map(xx => {\n                    let yaxysvalue = xx.yaxis.filter(r => r.name == y.name);\n                    if (yaxysvalue.length)\n                        return yaxysvalue[0].quantidade\n\n                    return 0\n                })\n\n                let serie = {\n                    type: \"bar\",\n                    label: y.name,\n                    backgroundColor: colorsBars[Math.floor(Math.random() * colorsBars.length)],\n                    fill: false,\n                    borderColor: \"white\",\n                    borderWidth: 0,\n                    data: dataset,\n                }\n                series.push(serie)\n            })\n\n            let seriesAdd = []\n            selectedIndicator3.forEach(indicator => {\n                series.filter(s => s.label === indicator).forEach(element => {\n                    seriesAdd.push(element)\n                });\n            });\n\n            const dashboardData = {\n                labels: xaxis.map(r => r.name),\n                datasets: seriesAdd,\n                indicators\n            };\n\n            setResponseDataBarChart(dashboardData)\n            // setIndicator1(dashboardData.indicators)\n            // setIndicator3(dashboardData.indicators)\n            // setIndicator2(dashboardData.indicators)\n        }\n    }\n\n    const fetchData = () => {\n\n        api.getSearaBaseRacBar().then((response) => {\n\n            // Do whatever you want to transform the data\n            let json = JSON.parse(response.data)\n\n            let datasets = [];\n            let indicators = Object.keys(json[0]).map(key => key);\n\n            AddItensToJsonArray(json, 100000, \"bar\")\n            setCrudeJsonResponseDataBarChart(json)\n\n            console.time(\"ProcessResponseBarChart\")\n            let { dateField, field, ano } = SetParamsToQuery();\n\n            SetDateInJsonArrayToQueryOverObjects(json, dateField);\n            let problemas = GetIndicators(json, field);\n            AddLineMockData(datasets);\n            AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\n            console.timeEnd(\"ProcessResponseBarChart\")\n\n            const dashboardData = {\n                labels: months,\n                datasets: datasets,\n                indicators\n            };\n\n            setResponseDataBarChart(dashboardData)\n            setIndicator1(dashboardData.indicators)\n            setIndicator3(dashboardData.indicators)\n            setIndicator2(dashboardData.indicators)\n            console.log(dashboardData)\n        });\n\n        api.getSearaBaseRacLine().then((response) => {\n            setResponseDataLineChart(response.data)\n            console.log(response)\n        });\n    };\n\n    const capitalize = (str) => {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n    if (!user) {\n        return (\n            <div className=\"global-container\">\n                <div className=\"card login-form\">\n                    <Card title=\"Bem vindo\" subTitle=\"faça o login para acessar o sistema\" className=\"card-body\" style={{ width: '25em' }} footer={footer} >\n                        <div className=\"pt-4 p-field p-grid\">\n                            {/* <h5>Usuário</h5>\n                            <InputText id=\"username\" style={{ width: '100%' }} value={username} onChange={(e) => setUsername(e.target.value)} /> */}\n                            <span className=\"p-float-label\">\n                                <InputText id=\"username\" style={{ width: '100%' }} value={username} onChange={(e) => setUsername(e.target.value)} />\n                                <label htmlFor=\"username\">Usuário</label>\n                            </span>\n                        </div>\n                        <div className=\"pt-4 p-field p-grid\">\n                            {/* <h5>Senha</h5>\n                            <Password value={password} style={{ width: '100%' }} onChange={(e) => setPassword(e.target.value)} feedback={false} toggleMask /> */}\n                            <span className=\"p-float-label\">\n                                <Password value={password} style={{ width: '100%' }} onChange={(e) => setPassword(e.target.value)} feedback={false} toggleMask />\n                                <label htmlhtmlFor=\"in\">Senha</label>\n                            </span>\n                        </div>\n                    </Card>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <Container fluid>\n            <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\" >\n                <Navbar.Brand href=\"#home\">\n                    <img\n                        alt=\"\"\n                        src=\"https://react-bootstrap.github.io/logo.svg\"\n                        width=\"30\"\n                        height=\"30\"\n                        className=\"d-inline-block align-top\"\n                    />{' '}\n                React Bootstrap\n                </Navbar.Brand>\n                <Navbar.Toggle />\n                <Navbar.Collapse className=\"justify-content-end\">\n                    <Navbar.Text>\n                        Bem vindo: <a>{capitalize(user.name)}</a>\n                    </Navbar.Text>\n                    &nbsp;\n                    &nbsp;\n                    <Navbar.Text>\n                        <a onClick={(e) => handleLogout(e)}>\n                            <span style={{ cursor: 'pointer', color: 'rgb(255 255 255 / 50%)' }}>\n                                Logout &nbsp;\n                                <i style={{ cursor: 'pointer', color: '#fff' }} className=\"pi pi-sign-out\"></i>\n                            </span>\n                        </a>\n                    </Navbar.Text>\n                </Navbar.Collapse>\n            </Navbar>\n            <nav class=\"col-md-2 d-none d-md-block sidebar pl-0 pr-0\">\n                <div class=\"sidebar-sticky\">\n                    <PanelMenu model={itemsPanelMenu} />\n                    <div style={{ position: 'absolute', bottom: '15px', right:'15px'}}>\n                        <i style={{ 'fontSize': '1.4em' , cursor: 'pointer', color: 'rgb(73 80 87)' }} className=\"pi pi-angle-double-left\"></i>\n                    </div>\n                </div>\n            </nav>\n\n            <div className=\"main-content\">\n\n                <Row>\n                    <Col>\n                        <h1 class=\"h2\" style={{ color: 'rgb(61 171 193)' }}>\n                            Dashboard\n                            <br />\n                            <small>Bootstrap template, demonstrating a set of Primereact Charts</small>\n                        </h1>\n                        <div class=\"btn-toolbar mb-2 mb-md-0\">\n                            <div class=\"btn-group mr-2\">\n                                <button class=\"btn btn-sm btn-outline-secondary\" onClick={fetchData}>Get Data</button>\n                                <button class=\"btn btn-sm btn-outline-secondary\" disabled>Share</button>\n                                <button class=\"btn btn-sm btn-outline-secondary\" disabled>Export</button>\n                            </div>\n                            <button class=\"btn btn-sm btn-outline-secondary dropdown-toggle\" disabled>\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-calendar\"><rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line><line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line><line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line></svg>\n                                This week\n                            </button>\n                        </div>\n                    </Col>\n                </Row>\n                <hr></hr>\n                <Row>\n                    <Col lg={4}>\n                        <Card className=\"p-md-12\">\n                            <h1 class=\"h2\">\n                                Lorem ipsum dolor\n                            <br />\n                                <small>Lorem ipsum dolor</small>\n                                <br />\n                                <select onChange={e => handleIndicator1TypeChange(e)} className=\"browser-default custom-select\" >\n                                    {\n                                        AddIndicator1.map((address, key) =>\n                                            <option key={key} value={key}>{address}</option>)\n                                    }\n                                </select >\n                            </h1>\n                        </Card>\n                    </Col>\n                    <Col lg={4}>\n                        <Card className=\"p-md-12\">\n                            <h1 class=\"h2\">\n                                Lorem ipsum dolor\n                            <br />\n                                <small>Lorem ipsum dolor</small>\n                                <br />\n                                <select onChange={e => handleIndicator2TypeChange(e)} className=\"browser-default custom-select\" >\n                                    {\n                                        AddIndicator2.map((address, key) =>\n                                            <option key={key} value={key}>{address}</option>)\n                                    }\n                                </select >\n                            </h1>\n                        </Card>\n                    </Col>\n                    <Col lg={4}>\n                        <Card>\n                            <h1 class=\"h2\">\n                                Lorem ipsum dolor\n                            <br />\n                                <small>Lorem ipsum dolor</small>\n                                <br />\n                                <select onChange={e => handleIndicator3TypeChange(e)} className=\"browser-default custom-select\" >\n                                    {\n                                        AddIndicator3.map((address, key) =>\n                                            <option key={key} value={key}>{address}</option>)\n                                    }\n                                </select >\n                            </h1>\n                        </Card>\n                    </Col>\n                </Row>\n                <Row style={{ 'padding-right': '15px', 'padding-left': '15px' }}>\n                    <button class=\"btn btn-sm btn-outline-secondary\" style={{ width: '100%' }} onClick={fetchDataTest}>Aplicar</button>\n                </Row>\n                <Row>\n                    <Col>\n                        <Card title=\"Bar Chart\" subTitle=\"Lorem ipsum dolor\" className=\"mt-5\" >\n                            <Chart type=\"bar\" data={responseDataBarChart} options={lightOptions} />\n                        </Card>\n                        <Card title=\"Line Chart\" subTitle=\"Lorem ipsum dolor\" className=\"mt-5\" >\n                            <Chart type=\"Line\" data={responseDataLineChart} options={lightOptions} />\n                        </Card>\n                    </Col>\n                </Row>\n\n            </div>\n        </Container>\n    )\n}\n\nexport default App;\n\nfunction AddItensToJsonArray(json, size, typechart) {\n    console.time(\"AddItensToJsonArray\" + typechart)\n    const start = (Math.random(0, json.length) - 1)\n    const limit = json.length\n    let batch = Object.assign([], json.slice(start, limit));\n    while (json.length < size) {\n        batch.forEach(element => {\n            json.push(element)\n        });\n    }\n    console.timeEnd(\"AddItensToJsonArray\" + typechart)\n    console.log(\"json.length: \" + json.length)\n}\n\nfunction GetIndicators(json, field) {\n    return [...new Set(json.map(item => item[field]))].slice(0, 3);\n}\n\nfunction AddDataByFilters(problemas, json, ano, field, datasets, type) {\n    problemas.forEach((element, i) => {\n        let data = months.map((mes, index) => json\n            .filter(r => r.year !== undefined && r.year === ano\n                && r.mes !== undefined && r.mes === mes\n                && r[field] !== undefined && r[field] === element)\n            .length\n        );\n        if (type === \"line\") {\n            datasets.push({\n                type: type,\n                label: element,\n                borderColor: colorsBars[i],\n                backgroundColor: \"white\",\n                data: data,\n                fill: false,\n                borderWidth: 2\n            });\n        } else {\n            datasets.push({\n                type: type,\n                label: element,\n                backgroundColor: colorsBars[i],\n                data: data,\n                fill: false,\n                borderColor: \"white\",\n                borderWidth: 2\n            });\n        }\n    });\n}\n\nfunction AddLineMockData(datasets) {\n    datasets.push({\n        type: \"line\",\n        label: \"Dataset 1\",\n        borderColor: 'red',\n        backgroundColor: '#edc4c736',\n        borderWidth: 2,\n        fill: true,\n        borderDash: [5, 5],\n        data: [150, 125, 112, 148, 146, 346, 232, 210, 330, 320, 25, 340, 135]\n    });\n}\n\nfunction SetParamsToQuery() {\n    const ano = \"2020\";\n    const dateField = \"Data Fab.\";\n    const field = \"Problema\";\n    return { dateField, field, ano };\n}\n\nfunction SetDateInJsonArrayToQueryOverObjects(json, dateField) {\n    json.forEach(r => {\n        let abc = r[dateField].replace(\" 00:00:00\", \"\").split(\"/\");\n        r['day'] = abc[0];\n        r['month'] = abc[1];\n        r['mes'] = months[(Math.floor(abc[1] - 1))];\n        r['year'] = abc[2];\n    });\n}","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\api\\api.js",["38","39"],"import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://179.184.236.89\"\r\n})\r\n\r\nconst colorsMockLine = [\r\n    '#42A5F5'\r\n]\r\n\r\nconst colorsBars = [\r\n    '#66BB6A',\r\n    '#FFA726',\r\n    '#03a9f4'\r\n]\r\n\r\nconst months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\"\r\n]\r\n\r\nexport default {\r\n\r\n    getSearaBaseRacBar: () =>\r\n        instance({\r\n            method: \"GET\",\r\n            url: \"/Seara/Service/Api/BaseRac\",\r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n\r\n                    return data;\r\n                    // // Do whatever you want to transform the data\r\n                    // let json = JSON.parse(data)\r\n                    // let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                    // AddItensToJsonArray(json, 100000, \"bar\")\r\n\r\n                    // console.time(\"ProcessResponseBarChart\")\r\n                    // let datasets = [];\r\n                    // let { dateField, field, ano } = SetParamsToQuery();\r\n                    \r\n                    // SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                    // let problemas = GetIndicators(json, field);\r\n                    // AddLineMockData(datasets);\r\n                    // AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                    // console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                    // return {\r\n                    //     labels: months,\r\n                    //     datasets: datasets,\r\n                    //     indicators\r\n                    // };\r\n                }\r\n            ]\r\n        }),\r\n\r\n    getSearaBaseRacLine: () =>\r\n        instance({\r\n            method: \"GET\",\r\n            url: \"/Seara/Service/Api/BaseRac\",\r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n                    // Do whatever you want to transform the data\r\n                    let json = JSON.parse(data)\r\n                    console.log(json)\r\n                    let indicators = Object.keys(json[0]).map(key => key);\r\n                    AddItensToJsonArray(json, 100000, \"line\")\r\n\r\n                    console.time(\"ProcessResponseLineChart\")\r\n                    let datasets = []\r\n                    let { dateField, field, ano } = SetParamsToQuery()\r\n                    SetDateInJsonArrayToQueryOverObjects(json, dateField)\r\n                    let problemas = GetIndicators(json, field)\r\n                    AddLineMockData(datasets)\r\n                    AddDataByFilters(problemas, json, ano, field, datasets, \"line\")\r\n                    console.timeEnd(\"ProcessResponseLineChart\")\r\n                    return {\r\n                        labels: months,\r\n                        datasets: datasets,\r\n                        indicators\r\n                    }\r\n\r\n                }\r\n            ]\r\n        })\r\n}\r\n\r\nfunction AddItensToJsonArray(json, size, typechart) {\r\n    console.time(\"AddItensToJsonArray\" + typechart)\r\n    const start = (Math.random(0, json.length) - 1)\r\n    const limit = json.length\r\n    let batch = Object.assign([], json.slice(start, limit));\r\n    while (json.length < size) {\r\n        batch.forEach(element => {\r\n            json.push(element)\r\n        });\r\n    }\r\n    console.timeEnd(\"AddItensToJsonArray\" + typechart)\r\n    console.log(\"json.length: \" + json.length)\r\n}\r\n\r\nfunction GetIndicators(json, field) {\r\n    return [...new Set(json.map(item => item[field]))].slice(0, 3);\r\n}\r\n\r\nfunction AddDataByFilters(problemas, json, ano, field, datasets, type) {\r\n    problemas.forEach((element, i) => {\r\n        let data = months.map((mes, index) => json\r\n            .filter(r => r.year !== undefined && r.year === ano\r\n                && r.mes !== undefined && r.mes === mes\r\n                && r[field] !== undefined && r[field] === element)\r\n            .length\r\n        );\r\n        if (type === \"line\") {\r\n            datasets.push({\r\n                type: type,\r\n                label: element,\r\n                borderColor: colorsBars[i],\r\n                backgroundColor: \"white\",\r\n                data: data,\r\n                fill: false,\r\n                // borderColor: \"white\",\r\n                borderWidth: 2\r\n            });\r\n        } else {\r\n            datasets.push({\r\n                type: type,\r\n                label: element,\r\n                backgroundColor: colorsBars[i],\r\n                data: data,\r\n                fill: false,\r\n                borderColor: \"white\",\r\n                borderWidth: 2\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nfunction AddLineMockData(datasets) {\r\n    datasets.push({\r\n        type: \"line\",\r\n        label: \"Dataset 1\",\r\n        borderColor: 'red',\r\n        backgroundColor: '#edc4c736',\r\n        borderWidth: 2,\r\n        fill: true,\r\n        borderDash: [5, 5],\r\n        data: [150, 125, 112, 148, 146, 346, 232, 210, 330, 320, 25, 340, 135]\r\n    });\r\n}\r\n\r\nfunction SetParamsToQuery() {\r\n    const ano = \"2020\";\r\n    const dateField = \"Data Fab.\";\r\n    const field = \"Problema\";\r\n    return { dateField, field, ano };\r\n}\r\n\r\nfunction SetDateInJsonArrayToQueryOverObjects(json, dateField) {\r\n    json.forEach(r => {\r\n        let abc = r[dateField].replace(\" 00:00:00\", \"\").split(\"/\");\r\n        r['day'] = abc[0];\r\n        r['month'] = abc[1];\r\n        r['mes'] = months[(Math.floor(abc[1] - 1))];\r\n        r['year'] = abc[2];\r\n    });\r\n}","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\reportWebVitals.js",[],"D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\Sidebar.js",[],"D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\views\\questions.js",["40"],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":180,"column":11,"nodeType":"47","messageId":"48","endLine":180,"endColumn":17},{"ruleId":"45","severity":1,"message":"49","line":199,"column":11,"nodeType":"47","messageId":"48","endLine":199,"endColumn":24},{"ruleId":"45","severity":1,"message":"50","line":234,"column":13,"nodeType":"47","messageId":"48","endLine":234,"endColumn":18},{"ruleId":"51","severity":1,"message":"52","line":304,"column":66,"nodeType":"53","messageId":"54","endLine":304,"endColumn":68},{"ruleId":"55","severity":1,"message":"56","line":431,"column":36,"nodeType":"57","endLine":431,"endColumn":39},{"ruleId":"55","severity":1,"message":"56","line":436,"column":25,"nodeType":"57","endLine":436,"endColumn":61},{"ruleId":"45","severity":1,"message":"58","line":7,"column":7,"nodeType":"47","messageId":"48","endLine":7,"endColumn":21},{"ruleId":"59","severity":1,"message":"60","line":32,"column":1,"nodeType":"61","endLine":102,"endColumn":2},{"ruleId":"45","severity":1,"message":"62","line":1,"column":17,"nodeType":"47","messageId":"48","endLine":1,"endColumn":26},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'header' is assigned a value but never used.","Identifier","unusedVar","'Indicators3Ul' is assigned a value but never used.","'xaxis' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'colorsMockLine' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Component' is defined but never used.","no-global-assign","no-unsafe-negation"]