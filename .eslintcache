[{"D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\index.js":"1","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\App.js":"2","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\api\\api.js":"3","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\reportWebVitals.js":"4","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\Sidebar.js":"5"},{"size":525,"mtime":1612585501223,"results":"6","hashOfConfig":"7"},{"size":5145,"mtime":1612620183227,"results":"8","hashOfConfig":"7"},{"size":5259,"mtime":1612614602428,"results":"9","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"7"},{"size":0,"mtime":1612611713525,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"16g7jkb",{"filePath":"15","messages":"16","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\index.js",[],["24","25"],"D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\App.js",["26","27","28","29","30","31","32","33","34","35"],"D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\api\\api.js",["36","37"],"import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://179.184.236.89\"\r\n})\r\n\r\nconst colorsMockLine = [\r\n    '#42A5F5'\r\n]\r\n\r\nconst colorsBars = [\r\n    '#66BB6A',\r\n    '#FFA726',\r\n    '#03a9f4'\r\n]\r\n\r\nconst months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\"\r\n]\r\n\r\nexport default {\r\n\r\n    getSearaBaseRacBar: () =>\r\n        instance({\r\n            method: \"GET\",\r\n            url: \"/Seara/Service/Api/BaseRac\",\r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n                    // Do whatever you want to transform the data\r\n                    let json = JSON.parse(data)\r\n                    AddItensToJsonArray(json, 100000, \"bar\")\r\n\r\n                    console.time(\"ProcessResponseBarChart\")\r\n                    let datasets = [];\r\n                    let { dateField, field, ano } = SetParamsToQuery();\r\n                    SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                    let problemas = GetIndicators(json, field);\r\n                    AddLineMockData(datasets);\r\n                    AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                    console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                    return {\r\n                        labels: months,\r\n                        datasets: datasets\r\n                    };\r\n                }\r\n            ]\r\n        }),\r\n\r\n    getSearaBaseRacLine: () =>\r\n        instance({\r\n            method: \"GET\",\r\n            url: \"/Seara/Service/Api/BaseRac\",\r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n                    // Do whatever you want to transform the data\r\n                    let json = JSON.parse(data)\r\n\r\n                    AddItensToJsonArray(json, 100000, \"line\")\r\n\r\n                    console.time(\"ProcessResponseLineChart\")\r\n                    let datasets = []\r\n                    let { dateField, field, ano } = SetParamsToQuery()\r\n                    SetDateInJsonArrayToQueryOverObjects(json, dateField)\r\n                    let problemas = GetIndicators(json, field)\r\n                    AddLineMockData(datasets)\r\n                    AddDataByFilters(problemas, json, ano, field, datasets, \"line\")\r\n                    console.timeEnd(\"ProcessResponseLineChart\")\r\n                    return {\r\n                        labels: months,\r\n                        datasets: datasets\r\n                    }\r\n\r\n                }\r\n            ]\r\n        })\r\n}\r\n\r\nfunction AddItensToJsonArray(json, size, typechart) {\r\n    console.time(\"AddItensToJsonArray\" + typechart)\r\n    const start = (Math.random(0, json.length) - 1)\r\n    const limit = json.length\r\n    let batch = Object.assign([], json.slice(start, limit));\r\n    while (json.length < size) {\r\n        batch.forEach(element => {\r\n            json.push(element)\r\n        });\r\n    }\r\n    console.timeEnd(\"AddItensToJsonArray\" + typechart)\r\n    console.log(\"json.length: \" + json.length)\r\n}\r\n\r\nfunction GetIndicators(json, field) {\r\n    return [...new Set(json.map(item => item[field]))].slice(0, 3);\r\n}\r\n\r\nfunction AddDataByFilters(problemas, json, ano, field, datasets, type) {\r\n    problemas.forEach((element, i) => {\r\n        let data = months.map((mes, index) => json\r\n            .filter(r => r.year !== undefined && r.year === ano\r\n                && r.mes !== undefined && r.mes === mes\r\n                && r[field] !== undefined && r[field] === element)\r\n            .length\r\n        );\r\n        if (type === \"line\") {\r\n            datasets.push({\r\n                type: type,\r\n                label: element,\r\n                borderColor: colorsBars[i],\r\n                backgroundColor: \"white\",\r\n                data: data,\r\n                fill: false,\r\n                // borderColor: \"white\",\r\n                borderWidth: 2\r\n            });\r\n        } else {\r\n            datasets.push({\r\n                type: type,\r\n                label: element,\r\n                backgroundColor: colorsBars[i],\r\n                data: data,\r\n                fill: false,\r\n                borderColor: \"white\",\r\n                borderWidth: 2\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nfunction AddLineMockData(datasets) {\r\n    datasets.push({\r\n        type: \"line\",\r\n        label: \"Dataset 1\",\r\n        borderColor: 'red',\r\n        backgroundColor: '#edc4c736',\r\n        borderWidth: 2,\r\n        fill: true,\r\n        borderDash: [5, 5],\r\n        data: [150, 125, 112, 148, 146, 346, 232, 210, 330, 320, 25, 340, 135]\r\n    });\r\n}\r\n\r\nfunction SetParamsToQuery() {\r\n    const ano = \"2020\";\r\n    const dateField = \"Data Fab.\";\r\n    const field = \"Problema\";\r\n    return { dateField, field, ano };\r\n}\r\n\r\nfunction SetDateInJsonArrayToQueryOverObjects(json, dateField) {\r\n    json.forEach(r => {\r\n        let abc = r[dateField].replace(\" 00:00:00\", \"\").split(\"/\");\r\n        r['day'] = abc[0];\r\n        r['month'] = abc[1];\r\n        r['mes'] = months[(Math.floor(abc[1] - 1))];\r\n        r['year'] = abc[2];\r\n    });\r\n}","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\reportWebVitals.js",[],"D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\Sidebar.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":6,"column":8,"nodeType":"44","messageId":"45","endLine":6,"endColumn":11},{"ruleId":"42","severity":1,"message":"46","line":7,"column":8,"nodeType":"44","messageId":"45","endLine":7,"endColumn":11},{"ruleId":"42","severity":1,"message":"47","line":8,"column":8,"nodeType":"44","messageId":"45","endLine":8,"endColumn":12},{"ruleId":"42","severity":1,"message":"48","line":10,"column":8,"nodeType":"44","messageId":"45","endLine":10,"endColumn":17},{"ruleId":"42","severity":1,"message":"49","line":11,"column":8,"nodeType":"44","messageId":"45","endLine":11,"endColumn":18},{"ruleId":"42","severity":1,"message":"50","line":12,"column":10,"nodeType":"44","messageId":"45","endLine":12,"endColumn":20},{"ruleId":"42","severity":1,"message":"51","line":12,"column":22,"nodeType":"44","messageId":"45","endLine":12,"endColumn":26},{"ruleId":"42","severity":1,"message":"52","line":12,"column":28,"nodeType":"44","messageId":"45","endLine":12,"endColumn":36},{"ruleId":"42","severity":1,"message":"53","line":12,"column":38,"nodeType":"44","messageId":"45","endLine":12,"endColumn":45},{"ruleId":"42","severity":1,"message":"54","line":35,"column":5,"nodeType":"44","messageId":"45","endLine":35,"endColumn":17},{"ruleId":"42","severity":1,"message":"55","line":7,"column":7,"nodeType":"44","messageId":"45","endLine":7,"endColumn":21},{"ruleId":"56","severity":1,"message":"57","line":32,"column":1,"nodeType":"58","endLine":94,"endColumn":2},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'Card' is defined but never used.","'Jumbotron' is defined but never used.","'Breadcrumb' is defined but never used.","'ProSidebar' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'SubMenu' is defined but never used.","'basicOptions' is assigned a value but never used.","'colorsMockLine' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]