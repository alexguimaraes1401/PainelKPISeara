[{"D:\\GRX\\PainelKPISeara\\src\\index.js":"1","D:\\GRX\\PainelKPISeara\\src\\reportWebVitals.js":"2","D:\\GRX\\PainelKPISeara\\src\\App.js":"3","D:\\GRX\\PainelKPISeara\\src\\views\\contactUs.js":"4","D:\\GRX\\PainelKPISeara\\src\\views\\dashViewNNCMP.js":"5","D:\\GRX\\PainelKPISeara\\src\\views\\notFoundPage.js":"6","D:\\GRX\\PainelKPISeara\\src\\views\\rac.js":"7","D:\\GRX\\PainelKPISeara\\src\\views\\createUser.js":"8","D:\\GRX\\PainelKPISeara\\src\\views\\home.js":"9","D:\\GRX\\PainelKPISeara\\src\\components\\navbarDesktop.js":"10","D:\\GRX\\PainelKPISeara\\src\\components\\sidebarDesktop.js":"11","D:\\GRX\\PainelKPISeara\\src\\views\\dashViewNNCLog.js":"12","D:\\GRX\\PainelKPISeara\\src\\components\\navbarMobile.js":"13","D:\\GRX\\PainelKPISeara\\src\\views\\dashViewAbsorcao.js":"14","D:\\GRX\\PainelKPISeara\\src\\components\\skeletons.js":"15","D:\\GRX\\PainelKPISeara\\src\\domain\\kpiservice.js":"16","D:\\GRX\\PainelKPISeara\\src\\api\\api.js":"17","D:\\GRX\\PainelKPISeara\\src\\domain\\constants.js":"18","D:\\GRX\\PainelKPISeara\\src\\api\\userApi.js":"19","D:\\GRX\\PainelKPISeara\\src\\views\\listUsers.js":"20","D:\\GRX\\PainelKPISeara\\src\\api\\loginApi.js":"21"},{"size":538,"mtime":1615659529714,"results":"22","hashOfConfig":"23"},{"size":375,"mtime":1615659529714,"results":"24","hashOfConfig":"23"},{"size":8419,"mtime":1620338611502,"results":"25","hashOfConfig":"23"},{"size":580,"mtime":1619891588625,"results":"26","hashOfConfig":"23"},{"size":188,"mtime":1620322695002,"results":"27","hashOfConfig":"23"},{"size":376,"mtime":1615819467659,"results":"28","hashOfConfig":"23"},{"size":34970,"mtime":1620322695005,"results":"29","hashOfConfig":"23"},{"size":9056,"mtime":1620322688272,"results":"30","hashOfConfig":"23"},{"size":54803,"mtime":1620322688274,"results":"31","hashOfConfig":"23"},{"size":1596,"mtime":1615659529708,"results":"32","hashOfConfig":"23"},{"size":835,"mtime":1615659529709,"results":"33","hashOfConfig":"23"},{"size":191,"mtime":1620322694999,"results":"34","hashOfConfig":"23"},{"size":1824,"mtime":1615659529709,"results":"35","hashOfConfig":"23"},{"size":197,"mtime":1615819516343,"results":"36","hashOfConfig":"23"},{"size":2288,"mtime":1615659529710,"results":"37","hashOfConfig":"23"},{"size":2638,"mtime":1620322694994,"results":"38","hashOfConfig":"23"},{"size":5991,"mtime":1620322694991,"results":"39","hashOfConfig":"23"},{"size":6271,"mtime":1620322694993,"results":"40","hashOfConfig":"23"},{"size":771,"mtime":1620323112867,"results":"41","hashOfConfig":"23"},{"size":5442,"mtime":1620329011369,"results":"42","hashOfConfig":"23"},{"size":551,"mtime":1620330075926,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"d36far",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"46"},"D:\\GRX\\PainelKPISeara\\src\\index.js",[],["95","96"],"D:\\GRX\\PainelKPISeara\\src\\reportWebVitals.js",[],"D:\\GRX\\PainelKPISeara\\src\\App.js",["97","98","99","100","101"],"D:\\GRX\\PainelKPISeara\\src\\views\\contactUs.js",[],"D:\\GRX\\PainelKPISeara\\src\\views\\dashViewNNCMP.js",[],"D:\\GRX\\PainelKPISeara\\src\\views\\notFoundPage.js",[],"D:\\GRX\\PainelKPISeara\\src\\views\\rac.js",["102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133"],"import React, { useState, useEffect, useRef } from 'react';\r\n\r\nimport { Chart } from 'primereact/chart';\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport { Button } from 'primereact/button';\r\nimport { Card } from 'primereact/card';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Password } from 'primereact/password';\r\nimport api from '../api/api'\r\nimport axios from 'axios';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { ColumnGroup } from 'primereact/columngroup';\r\n\r\nimport { Ripple } from 'primereact/ripple';\r\nimport { Dropdown } from 'primereact/dropdown';\r\n\r\nimport classNames from 'classnames';\r\n\r\n\r\nimport 'react-pro-sidebar/dist/css/styles.css';\r\nimport '../index.css';\r\nimport '../css/sidebar-desktop.css';\r\nimport '../css/login.css';\r\nimport '../css/charts.css';\r\nimport 'primereact/resources/themes/saga-blue/theme.css'\r\nimport 'primereact/resources/primereact.min.css'\r\nimport 'primeicons/primeicons.css'\r\n\r\nimport { ProgressBar } from 'primereact/progressbar';\r\nimport { months, colorsBars, lightOptions } from '../domain/constants';\r\nimport {\r\n    SetDateInJsonArrayToQueryOverObjects,\r\n    SetParamsToQuery,\r\n    AddLineMockData,\r\n    AddDataByFilters,\r\n    GetIndicators\r\n} from '../domain/kpiservice';\r\n\r\n\r\nimport { LoadingSkeletonSquare, LoadingSkeletonCard } from '../components/skeletons';\r\n\r\nimport Pdf from \"react-to-pdf\";\r\nconst ref = React.createRef();\r\nconst options = {\r\n    orientation: 'retrait',\r\n    unit: 'px',\r\n    format: [970,4000]\r\n};\r\n\r\nvar cors = require('cors'); // Already done “npm i cors --save-dev”\r\n\r\nfunction Home() {\r\n\r\n    \r\n    const [isUpdatingData, setIsUpdatingData] = React.useState(false)\r\n    const toast = React.useRef(null);\r\n\r\n    //chamadas\r\n    const [TableRacME, setTableRacME] = React.useState()  \r\n\r\n    const [GraficoRAC_Total, setGraficoRAC_Total] = React.useState()   \r\n    const [GraficoRAC_Aves, setGraficoRAC_Aves] = React.useState() \r\n    const [GraficoRAC_Suinos, setGraficoRAC_Suinos] = React.useState() \r\n    const [GraficoRAC_Preparados, setGraficoRAC_Preparados] = React.useState() \r\n    const [GraficoRAC_Outros, setGraficoRAC_Outros] = React.useState() \r\n    const [GraficoNNCMP_Total, setGraficoNNCMP_Total] = React.useState() \r\n    const [GraficoNNCLog_Total, setGraficoNNCLog_Total] = React.useState() \r\n    const [GraficoCE_Total, setGraficoCE_Total] = React.useState() \r\n    \r\n    let [responseGraficoRAC_Total, setresponseGraficoRAC_Total] = React.useState({})\r\n    let [responseGraficoRAC_Aves, setresponseGraficoRAC_Aves] = React.useState({})\r\n    let [responseGraficoRAC_Suinos, setresponseGraficoRAC_Suinos] = React.useState({})\r\n    let [responseGraficoRAC_Preparados, setresponseGraficoRAC_Preparados] = React.useState({})\r\n    let [responseGraficoRAC_Outros, setresponseGraficoRAC_Outros] = React.useState({})\r\n    let [responseGraficoNNCMP_Total, setresponseGraficoNNCMP_Total] = React.useState({})\r\n    let [responseGraficoNNCLog_Total, setresponseGraficoNNCLog_Total] = React.useState({})\r\n    let [responseGraficoCE_Total, setresponseGraficoCE_Total] = React.useState({})\r\n\r\n    //Handlers\r\n    React.useEffect(() => {\r\n        //debugger\r\n        fetchData(GraficoRAC_Total, \"GraficoRAC_Total\");\r\n        fetchData(GraficoRAC_Aves, \"GraficoRAC_Aves\");\r\n        fetchData(GraficoRAC_Suinos, \"GraficoRAC_Suinos\");\r\n        fetchData(GraficoRAC_Preparados, \"GraficoRAC_Preparados\");\r\n        fetchData(GraficoRAC_Outros, \"GraficoRAC_Outros\");\r\n        fetchData(GraficoNNCMP_Total, \"GraficoNNCMP_Total\");\r\n        fetchData(GraficoNNCLog_Total, \"GraficoNNCLog_Total\");\r\n        fetchData(GraficoCE_Total, \"GraficoCE_Total\");\r\n    }, []);\r\n\r\n    const GerarGrafico = (objeto, numGrafico) => {\r\n        ////debugger\r\n        //if (selectedIndicator1 !== \"\" && selectedIndicator2 !== \"\" && selectedIndicator3 !== \"\") {\r\n            ////debugger\r\n            setIsUpdatingData(true)\r\n            let json = objeto; //GraficoRAC_Total , 2, 3.....\r\n            let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n            let groupBy = function groupBy(list, keyGetter) {\r\n                const map = new Map();\r\n                list.forEach((item) => {\r\n                    const key = keyGetter(item);\r\n                    const collection = map.get(key);\r\n                    if (!collection) {\r\n                        map.set(key, [item]);\r\n                    } else {\r\n                        collection.push(item);\r\n                    }\r\n                });\r\n                return map;\r\n            }\r\n\r\n            // let xaxis = Array.from(groupBy(json, x => x[selectedIndicator1]), ([name, value]) => ({ name, value }));\r\n            // let yaxis = Array.from(groupBy(json, x => x[selectedIndicator2]), ([name, value]) => ({ name }));\r\n\r\n            let xaxis = Array.from(groupBy(json, x => x[\"Periodo\"]), ([name, value]) => ({ name, value }));\r\n            let yaxis = [{name:'Evolutivo 2020'},{name:'Evolutivo 2021'},{name:'Evolutivo Meta'},{name:'Meta'},{name:'2019'},{name:'2020'},{name: '2021'}];\r\n\r\n            // xaxis.sort(function (a, b) {\r\n            //     return parseFloat(a.name) - parseFloat(b.name);\r\n            // });\r\n\r\n            xaxis.forEach(x => {\r\n                // x['yaxis'] = Array.from(groupBy(x.value, x => x[selectedIndicator2]), ([name, value]) => ({ name, quantidade: somaX(x, name, selectedIndicator2, \"Quant\") }));\r\n                if (x.name == \"2019\"){\r\n                    x['yaxis'] = [{name: \"2019\", value: x.value[0].Valor}]\r\n                }else if (x.name == \"2020\"){\r\n                    x['yaxis'] = [{name: \"2020\", value: x.value[0].Valor}]\r\n                }else if(x.name == \"Meta\"){\r\n                    x['yaxis'] = [{name: \"Meta\", value: x.value[0].Valor}]\r\n                }else if(x.name == \"2021\"){\r\n                    x['yaxis'] = [{name: \"2021\", value: x.value[0].Valor}]\r\n                }else{\r\n                    x['yaxis'] = [\r\n                                    {name: \"Evolutivo 2020\", value: x.value[0].a2020},\r\n                                    {name: \"Evolutivo Meta\", value: x.value[0].aMeta},\r\n                                    {name: \"Evolutivo 2021\", value: x.value[0].a2021}\r\n                                ]\r\n                }\r\n            })\r\n\r\n            let series = []\r\n            yaxis.forEach((y, index) => {\r\n                let dataset = xaxis.map(xx => {\r\n                    let yaxysvalue = xx.yaxis.filter(r => r.name === y.name);\r\n                    if (yaxysvalue.length)\r\n                        return yaxysvalue[0].value\r\n\r\n                    return null\r\n                })\r\n\r\n                //let cor = colorsBars[Math.floor(Math.random() * colorsBars.length)]\r\n\r\n                let tipo = 'line'\r\n                let cor = '#bfbfbf'\r\n                let corLabel = '#bfbfbf'\r\n                let yAx = \"B\"\r\n                let varborderDash = [0,0]\r\n\r\n                switch (y.name){\r\n\r\n                    case \"2019\": \r\n                                    tipo = \"bar\"\r\n                                    cor = \"#bfbfbf\"\r\n                                    corLabel = \"#bfbfbf\"\r\n                                    yAx = \"A\"\r\n                                    break\r\n                    case \"2020\": \r\n                                    tipo = \"bar\"\r\n                                    cor = \"#bfbfbf\"\r\n                                    corLabel = \"#bfbfbf\"\r\n                                    yAx = \"A\"\r\n                                    break\r\n                    case \"Meta\": \r\n                                    tipo = \"bar\"\r\n                                    cor = \"rgb(245,156,0)\"\r\n                                    corLabel = \"rgb(245,156,0)\"\r\n                                    yAx = \"A\"\r\n                                    break\r\n                    case \"2021\": \r\n                                    tipo = \"bar\"\r\n                                    cor = \"#cccccc\"\r\n                                    corLabel = \"#cccccc\"\r\n                                    yAx = \"A\"\r\n                                    break\r\n                    case \"Evolutivo 2020\": \r\n                                    tipo = \"line\"\r\n                                    cor = \"rgb(166, 166, 166)\"\r\n                                    corLabel = \"rgb(166, 166, 166)\"\r\n                                    varborderDash = [10,5]\r\n                                    yAx = \"B\"\r\n                                    break\r\n                    case \"Evolutivo Meta\": \r\n                                    tipo = \"line\"\r\n                                    cor = \"rgb(245,156,0)\"\r\n                                    corLabel = \"rgb(245,156,0)\"\r\n                                    yAx = \"B\"\r\n                                    break\r\n                    case \"Evolutivo 2021\": \r\n                                    tipo = \"line\"\r\n                                    cor = \"rgb(89,89,89)\"\r\n                                    corLabel = \"rgb(89,89,89)\"\r\n                                    yAx = \"B\"\r\n                                    break\r\n                                 \r\n                    default:\r\n                                    break\r\n\r\n\r\n                }\r\n\r\n                let serie = {\r\n                    type: tipo,\r\n                    yAxisID: yAx,\r\n                    label: y.name,\r\n                    backgroundColor: cor,\r\n                    fill: false,\r\n                    borderColor: cor,\r\n                    borderWidth: 2,\r\n                    pointRadius: 5,\r\n                    pointBackgroundColor: \"transparent\",\r\n                    pointBorderColor: \"transparent\",\r\n                    borderDash: varborderDash, \r\n                    data: dataset,\r\n                    datalabels: {\r\n                    \r\n                        align: \"top\",\r\n                        anchor: \"end\",\r\n                        offset: 10,\r\n                        padding: -2,\r\n                        color: corLabel,\r\n                        //clip: true,\r\n                        font: {\r\n                            size: \"10\",\r\n                        },\r\n                        \r\n                    }\r\n                     \r\n                }\r\n                series.push(serie)\r\n            })\r\n\r\n            let seriesAdd = []\r\n            \r\n                series.filter(s => s.label != null).forEach(element => {\r\n                    seriesAdd.push(element)\r\n                });\r\n           \r\n\r\n            const dashboardData = {\r\n                labels: xaxis.map(r => r.name),\r\n                datasets: seriesAdd,\r\n                indicators\r\n                \r\n            };\r\n            //debugger\r\n            switch (numGrafico){\r\n                case \"GraficoRAC_Total\":\r\n                    setresponseGraficoRAC_Total(dashboardData)\r\n                    break\r\n                case \"GraficoRAC_Aves\":\r\n                    setresponseGraficoRAC_Aves(dashboardData)\r\n                    break\r\n                case \"GraficoRAC_Suinos\":\r\n                    setresponseGraficoRAC_Suinos(dashboardData)\r\n                    break\r\n                case \"GraficoRAC_Preparados\":\r\n                    setresponseGraficoRAC_Preparados(dashboardData)\r\n                    break\r\n                case \"GraficoRAC_Outros\":\r\n                    setresponseGraficoRAC_Outros(dashboardData)\r\n                    break\r\n                case \"GraficoNNCMP_Total\":\r\n                    setresponseGraficoNNCMP_Total(dashboardData)\r\n                    break\r\n                case \"GraficoNNCLog_Total\":\r\n                    setresponseGraficoNNCLog_Total(dashboardData)\r\n                    break\r\n                case \"GraficoCE_Total\":\r\n                    setresponseGraficoCE_Total(dashboardData)\r\n                    break\r\n                default:\r\n                    break\r\n\r\n            }\r\n\r\n            setIsUpdatingData(false)\r\n    }\r\n\r\n    const DataTableColGroupDemo = () => {\r\n\r\n        if (!GraficoRAC_Total) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < GraficoRAC_Total.length; i++) {\r\n            json.push(GraficoRAC_Total[i])\r\n        }\r\n\r\n        const sales = json\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <DataTable value={sales} sortMode=\"multiple\">\r\n                        <Column field=\"Periodo\" header=\"Período\" sortable></Column>\r\n                        <Column field=\"Valor\" header=\"Nº RAC Histórico\" sortable ></Column>\r\n                        <Column field=\"a2020\" header=\"Nº RAC 2020 Mensal\" sortable></Column>\r\n                        <Column field=\"aMeta\" header=\"Nº RAC Meta Mensal\" sortable></Column>\r\n                        <Column field=\"a2021\" header=\"Nº RAC 2021 Mensal\" sortable></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        //////////////////////////////////////////\r\n    }\r\n\r\n    const DataTableRACME = () => {\r\n\r\n        if (!TableRacME) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRacME.length; i++) {\r\n            json.push(TableRacME[i])\r\n        }\r\n\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestante\" header=\"Manifestante\"></Column>\r\n                        <Column field=\"Nº RAC\" header=\"Nº RAC\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        //////////////////////////////////////////\r\n    }\r\n\r\n    function aplicar() {\r\n        //debugger\r\n        GerarGrafico(GraficoRAC_Total, \"GraficoRAC_Total\")\r\n        GerarGrafico(GraficoRAC_Aves, \"GraficoRAC_Aves\")\r\n        GerarGrafico(GraficoRAC_Suinos, \"GraficoRAC_Suinos\")\r\n        GerarGrafico(GraficoRAC_Preparados, \"GraficoRAC_Preparados\")\r\n        GerarGrafico(GraficoRAC_Outros, \"GraficoRAC_Outros\")\r\n        GerarGrafico(GraficoNNCMP_Total, \"GraficoNNCMP_Total\")\r\n        GerarGrafico(GraficoNNCLog_Total, \"GraficoNNCLog_Total\")\r\n        GerarGrafico(GraficoCE_Total, \"GraficoCE_Total\")\r\n    }\r\n\r\n    const fetchData = (objeto, numGrafico) => {\r\n\r\n        setIsUpdatingData(true)\r\n\r\n        let parm = \" \";\r\n\r\n        api.getSearaBaseRacME(parm).then((response) => {\r\n\r\n            let json = JSON.parse(response.data)\r\n            setTableRacME(json)\r\n        })\r\n\r\n        if(numGrafico == \"GraficoRAC_Total\"){\r\n            //debugger\r\n            let parametros = ['where 1=1']\r\n            api.getSearaBaseRacCE(parametros).then((response) => {\r\n                // Do whatever you want to transform the data\r\n                //debugger\r\n\r\n                let json = JSON.parse(response.data)\r\n                let datasets = [];\r\n                let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                //AddItensToJsonArray(json, 100000, \"bar\")\r\n                //debugger\r\n                setGraficoRAC_Total(json)\r\n\r\n                console.time(\"ProcessResponseBarChart\")\r\n                let { dateField, field, ano } = SetParamsToQuery();\r\n\r\n                SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                let problemas = GetIndicators(json, field);\r\n                AddLineMockData(datasets);\r\n                AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                const dashboardData = {\r\n                    labels: months,\r\n                    datasets: datasets,\r\n                    indicators\r\n                };\r\n\r\n                setresponseGraficoRAC_Total(dashboardData)\r\n\r\n                setIsUpdatingData(false)\r\n\r\n                //GerarGrafico(GraficoRAC_Total, \"GraficoRAC_Total\")\r\n\r\n            }).catch(err => {\r\n                // what now?\r\n                console.log(err);\r\n\r\n            });\r\n        }else if (numGrafico == \"GraficoRAC_Aves\"){\r\n            //debugger\r\n            let parametros = ['WHERE Negócio=\\'AVES\\'']\r\n            api.getSearaBaseRac(parametros).then((response) => {\r\n                // Do whatever you want to transform the data\r\n                //debugger\r\n\r\n                let json = JSON.parse(response.data)\r\n                let datasets = [];\r\n                let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                //AddItensToJsonArray(json, 100000, \"bar\")\r\n                //debugger\r\n                setGraficoRAC_Aves(json)\r\n              \r\n                console.time(\"ProcessResponseBarChart\")\r\n                let { dateField, field, ano } = SetParamsToQuery();\r\n\r\n                SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                let problemas = GetIndicators(json, field);\r\n                AddLineMockData(datasets);\r\n                AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                const dashboardData = {\r\n                    labels: months,\r\n                    datasets: datasets,\r\n                    indicators\r\n                };\r\n\r\n                setresponseGraficoRAC_Aves(dashboardData)\r\n\r\n                setIsUpdatingData(false)\r\n\r\n                //GerarGrafico(GraficoRAC_Aves, \"GraficoRAC_Aves\")\r\n\r\n            }).catch(err => {\r\n                // what now?\r\n                console.log(err);\r\n\r\n            });\r\n\r\n        }else if (numGrafico == \"GraficoRAC_Suinos\"){\r\n            //debugger\r\n            let parametros = ['WHERE Negócio=\\'SUÍ\\'']\r\n            api.getSearaBaseRac(parametros).then((response) => {\r\n                // Do whatever you want to transform the data\r\n                //debugger\r\n\r\n                let json = JSON.parse(response.data)\r\n                let datasets = [];\r\n                let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                //AddItensToJsonArray(json, 100000, \"bar\")\r\n                //debugger\r\n                setGraficoRAC_Suinos(json)\r\n              \r\n                console.time(\"ProcessResponseBarChart\")\r\n                let { dateField, field, ano } = SetParamsToQuery();\r\n\r\n                SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                let problemas = GetIndicators(json, field);\r\n                AddLineMockData(datasets);\r\n                AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                const dashboardData = {\r\n                    labels: months,\r\n                    datasets: datasets,\r\n                    indicators\r\n                };\r\n\r\n                setresponseGraficoRAC_Suinos(dashboardData)\r\n\r\n                setIsUpdatingData(false)\r\n\r\n                //GerarGrafico(GraficoRAC_Aves, \"GraficoRAC_Aves\")\r\n\r\n            }).catch(err => {\r\n                // what now?\r\n                console.log(err);\r\n\r\n            });\r\n\r\n        }else if (numGrafico == \"GraficoRAC_Preparados\"){\r\n            //debugger\r\n            let parametros = ['WHERE Negócio=\\'Preparados\\'']\r\n            api.getSearaBaseRac(parametros).then((response) => {\r\n                // Do whatever you want to transform the data\r\n                //debugger\r\n\r\n                let json = JSON.parse(response.data)\r\n                let datasets = [];\r\n                let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                //AddItensToJsonArray(json, 100000, \"bar\")\r\n                //debugger\r\n                setGraficoRAC_Preparados(json)\r\n              \r\n                console.time(\"ProcessResponseBarChart\")\r\n                let { dateField, field, ano } = SetParamsToQuery();\r\n\r\n                SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                let problemas = GetIndicators(json, field);\r\n                AddLineMockData(datasets);\r\n                AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                const dashboardData = {\r\n                    labels: months,\r\n                    datasets: datasets,\r\n                    indicators\r\n                };\r\n\r\n                setresponseGraficoRAC_Preparados(dashboardData)\r\n\r\n                setIsUpdatingData(false)\r\n\r\n                //GerarGrafico(GraficoRAC_Aves, \"GraficoRAC_Aves\")\r\n\r\n            }).catch(err => {\r\n                // what now?\r\n                console.log(err);\r\n\r\n            });\r\n\r\n        }else if (numGrafico == \"GraficoRAC_Outros\"){\r\n            //debugger\r\n            let parametros = ['WHERE Negócio=\\'OUTROS\\'']\r\n            api.getSearaBaseRac(parametros).then((response) => {\r\n                // Do whatever you want to transform the data\r\n                //debugger\r\n\r\n                let json = JSON.parse(response.data)\r\n                let datasets = [];\r\n                let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                //AddItensToJsonArray(json, 100000, \"bar\")\r\n                //debugger\r\n                setGraficoRAC_Outros(json)\r\n              \r\n                console.time(\"ProcessResponseBarChart\")\r\n                let { dateField, field, ano } = SetParamsToQuery();\r\n\r\n                SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                let problemas = GetIndicators(json, field);\r\n                AddLineMockData(datasets);\r\n                AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                const dashboardData = {\r\n                    labels: months,\r\n                    datasets: datasets,\r\n                    indicators\r\n                };\r\n\r\n                setresponseGraficoRAC_Outros(dashboardData)\r\n\r\n                setIsUpdatingData(false)\r\n\r\n                //GerarGrafico(GraficoRAC_Aves, \"GraficoRAC_Aves\")\r\n\r\n            }).catch(err => {\r\n                // what now?\r\n                console.log(err);\r\n\r\n            });\r\n\r\n        }else if (numGrafico == \"GraficoNNCMP_Total\"){\r\n            //debugger\r\n            let parametros = ['WHERE 1=1 ']\r\n            api.getSearaBaseNCCMPCE(parametros).then((response) => {\r\n                // Do whatever you want to transform the data\r\n                //debugger\r\n\r\n                let json = JSON.parse(response.data)\r\n                let datasets = [];\r\n                let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                //AddItensToJsonArray(json, 100000, \"bar\")\r\n                //debugger\r\n                setGraficoNNCMP_Total(json)\r\n              \r\n                console.time(\"ProcessResponseBarChart\")\r\n                let { dateField, field, ano } = SetParamsToQuery();\r\n\r\n                SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                let problemas = GetIndicators(json, field);\r\n                AddLineMockData(datasets);\r\n                AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                const dashboardData = {\r\n                    labels: months,\r\n                    datasets: datasets,\r\n                    indicators\r\n                };\r\n\r\n                setresponseGraficoNNCMP_Total(dashboardData)\r\n\r\n                setIsUpdatingData(false)\r\n\r\n                //GerarGrafico(GraficoRAC_Aves, \"GraficoRAC_Aves\")\r\n\r\n            }).catch(err => {\r\n                // what now?\r\n                console.log(err);\r\n\r\n            });\r\n\r\n        }else if (numGrafico == \"GraficoNNCLog_Total\"){\r\n            \r\n            let parametros = ['WHERE 1=1 ']\r\n            api.getSearaBaseNCCMPCE(parametros).then((response) => {\r\n                // Do whatever you want to transform the data\r\n                //debugger\r\n\r\n                let json = JSON.parse(response.data)\r\n                let datasets = [];\r\n                let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                //AddItensToJsonArray(json, 100000, \"bar\")\r\n                //debugger\r\n                setGraficoNNCLog_Total(json)\r\n              \r\n                console.time(\"ProcessResponseBarChart\")\r\n                let { dateField, field, ano } = SetParamsToQuery();\r\n\r\n                SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                let problemas = GetIndicators(json, field);\r\n                AddLineMockData(datasets);\r\n                AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                const dashboardData = {\r\n                    labels: months,\r\n                    datasets: datasets,\r\n                    indicators\r\n                };\r\n\r\n                setresponseGraficoNNCLog_Total(dashboardData)\r\n\r\n                setIsUpdatingData(false)\r\n\r\n                //GerarGrafico(GraficoRAC_Aves, \"GraficoRAC_Aves\")\r\n\r\n            }).catch(err => {\r\n                // what now?\r\n                console.log(err);\r\n\r\n            });\r\n\r\n        }else if (numGrafico == \"GraficoCE_Total\"){\r\n            //debugger\r\n            let parametros = ['WHERE    Negócio =\\'AVES LEVELS\\' ']\r\n            api.getSearaBaseCE(parametros).then((response) => {\r\n                // Do whatever you want to transform the data\r\n                //debugger\r\n\r\n                let json = JSON.parse(response.data)\r\n                let datasets = [];\r\n                let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                //AddItensToJsonArray(json, 100000, \"bar\")\r\n                //debugger\r\n                setGraficoCE_Total(json)\r\n              \r\n                console.time(\"ProcessResponseBarChart\")\r\n                let { dateField, field, ano } = SetParamsToQuery();\r\n\r\n                SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                let problemas = GetIndicators(json, field);\r\n                AddLineMockData(datasets);\r\n                AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                const dashboardData = {\r\n                    labels: months,\r\n                    datasets: datasets,\r\n                    indicators\r\n                };\r\n\r\n                setresponseGraficoCE_Total(dashboardData)\r\n\r\n                setIsUpdatingData(false)\r\n\r\n                //GerarGrafico(GraficoRAC_Aves, \"GraficoRAC_Aves\")\r\n\r\n            }).catch(err => {\r\n                // what now?\r\n                console.log(err);\r\n\r\n            });\r\n\r\n        }\r\n\r\n        \r\n    };\r\n\r\n    const showSuccess = (errorMessage, detailMessage) => {\r\n        toast.current.show({ severity: 'success', summary: errorMessage, detail: detailMessage });\r\n    }\r\n\r\n    const showError = (errorMessage, detailMessage) => {\r\n        toast.current.show({ severity: 'error', summary: errorMessage, detail: detailMessage, life: 6000 });\r\n    }\r\n\r\n    const UpdatingDatabase = () => {\r\n        return (\r\n            <div>\r\n                <h1 className={'h2'}>\r\n                    Atualizando a base\r\n                    <br />\r\n                    <small>Puxando dados da RAC</small>\r\n                    <br />\r\n                </h1>\r\n                <ProgressBar mode=\"indeterminate\" style={{ height: '16px' }}></ProgressBar>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // Se esta logado exibe tela do dashboard:\r\n    return (\r\n        // <div style=\"width: 1220px !important;\">\r\n        <div> \r\n            <Row>\r\n                <Col lg={12}>\r\n                    {isUpdatingData ? (<UpdatingDatabase />) : (\r\n                        <div>\r\n                            <h1 className={'h2'}>\r\n                                KPI - RCA\r\n                                    <br />\r\n                                <small>Descrição do KPI</small>\r\n                            </h1>\r\n                            <div className=\"btn-toolbar mb-2 mb-md-0\">\r\n                                <div className=\"btn-group mr-2\">\r\n                                    <button className=\"btn btn-sm btn-outline-secondary\" onClick={fetchData}>Atualizar</button>\r\n                                </div>  \r\n\r\n                                <Pdf targetRef={ref} filename=\"rac.pdf\" options={options} x={1} scale={0.8}>\r\n                                    {({toPdf}) => (\r\n                                        <button onClick={toPdf}>Gerar PDF</button>\r\n                                    )}\r\n                                </Pdf>\r\n\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n\r\n            <hr></hr>\r\n\r\n            {/* Botão aplicar */}\r\n            {isUpdatingData ? (<div> </div>) : (\r\n                <Row style={{ paddingRight: '15px', paddingLeft: '15px' }}>\r\n                    <button className=\"btn btn-sm btn-secondary\" style={{ width: '100%' }} onClick={aplicar}>Aplicar</button>\r\n                </Row>\r\n            )}\r\n\r\n            \r\n\r\n            {/* Graficos */}\r\n            <div className=\"pad10\" ref={ref}  >\r\n                <Row>\r\n                    <Col className=\"mt-5 col-12 \">\r\n                        <h1>Relatório de Atendimento ao Consumidor (RAC)</h1>\r\n                    </Col>\r\n                    \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Total Habilitador\" subTitle=\"\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoCE_Total} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        \r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Total RAC\" subTitle=\"RA\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoRAC_Total} options={lightOptions}/>\r\n                            </Card>\r\n                        )}\r\n  \r\n                    </Col>\r\n                    \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                                \r\n                    </Col>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Total NNC Matéria-Prima\" subTitle=\"\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoNNCMP_Total} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n                \r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Aves\" subTitle=\"RAC\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoRAC_Aves} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Suínos\" subTitle=\"RAC\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoRAC_Suinos} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Preparados\" subTitle=\"RAC\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoRAC_Preparados} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Outros\" subTitle=\"RAC\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoRAC_Outros} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n                \r\n                {/* mercado externo */}\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Corpos estranhos\" subTitle=\"Corpo Estranho\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoCE_Total} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col className=\"mt-5\">\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            \r\n                                DataTableRACME()\r\n                            \r\n                        )}\r\n                    </Col>\r\n\r\n                </Row>  \r\n\r\n                {/* mercado interno */}\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"NNC Matérial Prima\" subTitle=\"Total\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoNNCMP_Total} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        \r\n                    </Col>\r\n\r\n                </Row>   \r\n\r\n                {/* atendimento comercial */}\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"NNC Log\" subTitle=\"Total\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoNNCLog_Total} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        \r\n                        \r\n                    </Col>\r\n\r\n                </Row>  \r\n\r\n                        \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","D:\\GRX\\PainelKPISeara\\src\\views\\createUser.js",["134","135"],"import React from 'react';\r\nimport 'primeicons/primeicons.css'\r\nimport Api from '../api/userApi'\r\nimport { Toast } from 'primereact/toast';\r\nimport { ProgressBar } from 'primereact/progressbar';\r\nimport { Password } from 'primereact/password';\r\n\r\nconst registerTexts = {\r\n    SelectRole: \"Select a role\",\r\n    FullName: \"Full name\",\r\n    EmailAddress: \"Email address\",\r\n    CreatePassword: \"Create password\",\r\n    RepeatPassword: \"Repeat password\",\r\n    HaveAnAaccount: \"Have an account?\",\r\n    CreateAccount: \"Create Account\",\r\n    LogIn: \"Log In\",\r\n    SelectRole: \"Select a role\",\r\n    UnableSaveUserData: \"unable to save user data.\",\r\n    UserDataSaved: \"User data successfully saved!\"\r\n}\r\n\r\nconst toastStatus = {\r\n    success: 'success',\r\n    error: 'error',\r\n}\r\n\r\nclass CreateUserJxs extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            passwordConfirm: '',\r\n            email: '',\r\n            arr: [ //claims\r\n                { id: 1, value: \"Read\", isChecked: true },\r\n                { id: 2, value: \"Write\", isChecked: false },\r\n            ],\r\n            Role: 'user',\r\n            enableSubmit: true,\r\n            showProgressbar: false\r\n        };\r\n        this.toast = React.createRef();\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleCheckChieldElement = this.handleCheckChieldElement.bind(this);\r\n    }\r\n    \r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.refs.btn.setAttribute(\"disabled\", \"disabled\");\r\n        this.refs.loader.style.display = \"block\";\r\n\r\n        let user = {}\r\n        user[\"username\"] = this.state.username\r\n        user[\"email\"] = this.state.email\r\n        user[\"password\"] = this.state.password\r\n        user[\"Roles\"] = [{\r\n            Role: this.state.Role,\r\n            Claims: this.state.arr.filter(r => r.isChecked).map(r => r.value)\r\n        }]\r\n\r\n        Api.post(user).then(r => {\r\n            if (r.status === 201) {\r\n                this.showToast(toastStatus.success, registerTexts.UserDataSaved)\r\n            }\r\n        }).catch(e => {\r\n            if (e?.response?.status === 400 && e?.response?.data) {\r\n                const response = JSON.parse(e.response.data)\r\n                this.showToast(toastStatus.error, response.Message)\r\n            } else {\r\n                this.showToast(toastStatus.error, registerTexts.UnableSaveUserData)\r\n            }\r\n        }).finally(() => {\r\n            this.refs.btn.removeAttribute(\"disabled\");\r\n            this.refs.loader.style.display = \"none\";\r\n        })\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    handleCheckChieldElement(event) {\r\n        let arrCopy = this.state.arr\r\n        arrCopy.forEach(item => {\r\n            if (item.value === event.target.value)\r\n                item.isChecked = event.target.checked\r\n        })\r\n        this.setState({ arr: arrCopy })\r\n    }\r\n\r\n    showToast(severity, message, details) {\r\n        this.toast.current.show({ severity: severity, summary: message, detail: details });\r\n    }\r\n\r\n    render() {\r\n        const usernameOk = this.state.username.length > 0;\r\n        const passwordOk = this.state.password.length > 0;\r\n        const passwordConfirmOk = this.state.passwordConfirm.length > 0;\r\n        const emailOk = this.state.email.length > 0;\r\n        const enabledSubmit =\r\n            usernameOk\r\n            && passwordOk\r\n            && passwordConfirmOk\r\n            && emailOk;\r\n\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <Toast ref={this.toast}></Toast>\r\n                {/* NOME COMPELTO */}\r\n                <div className=\"form-group input-group\">\r\n                    <div className=\"input-group-prepend\" >\r\n                        <span className=\"input-group-text\"> <i style={{ color: usernameOk ? 'green' : 'red' }} className=\"pi pi-user\"></i> </span>\r\n                    </div>\r\n                    <input\r\n                        name=\"username\"\r\n                        value={this.state.username}\r\n                        onChange={this.handleInputChange}\r\n                        className=\"form-control\"\r\n                        placeholder={registerTexts.FullName}\r\n                        type=\"text\" />\r\n                </div>\r\n\r\n                {/* EMAIL */}\r\n                <div className=\"form-group input-group\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <span className=\"input-group-text\"> <i style={{ color: emailOk ? 'green' : 'red' }} className=\"pi pi-envelope\"></i> </span>\r\n                    </div>\r\n                    <input\r\n                        name=\"email\"\r\n                        value={this.state.email}\r\n                        onChange={this.handleInputChange}\r\n                        className=\"form-control\"\r\n                        placeholder={registerTexts.EmailAddress}\r\n                        type=\"email\" />\r\n                </div>\r\n\r\n                {/* PERFIL */}\r\n                <div className=\"form-group input-group\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <span className=\"input-group-text\"> <i className=\"pi pi-flag\"></i> </span>\r\n                    </div>\r\n                    <select\r\n                        className=\"form-control\"\r\n                        value={this.state.Role}\r\n                        name=\"Role\"\r\n                        onChange={this.handleInputChange}>\r\n                        <option value=\"user\">{registerTexts.SelectRole}</option>\r\n                        <option value=\"manager\">Manager</option>\r\n                        <option value=\"employee\">Employee</option>\r\n                    </select>\r\n                </div>\r\n\r\n                {/* UNIDADES */}\r\n                <div className=\"form-group\">\r\n                    {\r\n                        this.state.arr.map((item) => {\r\n                            return (\r\n                                <div key={item.value} className=\"custom-control custom-checkbox\" >\r\n                                    <input name=\"isGoing\" type=\"checkbox\" id={item.value} value={item.value} checked={item.isChecked} onChange={this.handleCheckChieldElement} className=\"custom-control-input\" />\r\n                                    <label className=\"custom-control-label\" htmlFor={item.value}>{item.value}</label>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n\r\n                {/* SENHA */}\r\n                <div className=\"form-group input-group\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <span className=\"input-group-text\"> <i style={{ color: passwordOk ? 'green' : 'red' }} className=\"pi pi-lock\"></i> </span>\r\n                    </div>\r\n                    <Password\r\n                        name=\"password\"\r\n                        placeholder={registerTexts.CreatePassword}\r\n                        value={this.state.password}\r\n                        onChange={this.handleInputChange}\r\n                        toggleMask />\r\n\r\n                </div>\r\n\r\n                {/* CONFIRMAR SENHA */}\r\n                <div className=\"form-group input-group\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <span className=\"input-group-text\"> <i style={{ color: passwordConfirmOk ? 'green' : 'red' }} className=\"pi pi-lock\"></i> </span>\r\n                    </div>\r\n                    <Password\r\n                        name=\"passwordConfirm\"\r\n                        placeholder={registerTexts.RepeatPassword}\r\n                        value={this.state.passwordConfirm}\r\n                        onChange={this.handleInputChange}\r\n                        feedback={false}\r\n                        toggleMask />\r\n\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <button type=\"submit\"\r\n                        ref=\"btn\"\r\n                        disabled={!enabledSubmit}\r\n                        className=\"btn btn-primary btn-block\">\r\n                        {registerTexts.CreateAccount}\r\n                    </button>\r\n                </div>\r\n                <p className=\"text-center\">{registerTexts.HaveAnAccount} <a href=\"\">{registerTexts.LogIn}</a> </p>\r\n                <br />\r\n                <div ref=\"loader\" style={{ display: 'none' }}>\r\n                    <ProgressBar mode=\"indeterminate\" style={{ height: '6px' }}></ProgressBar>\r\n                </div>\r\n\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst CreateUser = () => {\r\n    return <CreateUserJxs />\r\n};\r\n\r\nexport default CreateUser;","D:\\GRX\\PainelKPISeara\\src\\views\\home.js",["136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172"],"//#region Imports\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Chart } from 'primereact/chart';\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport { Button } from 'primereact/button';\r\nimport { Card } from 'primereact/card';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Password } from 'primereact/password';\r\nimport api from '../api/api'\r\nimport axios from 'axios';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { ColumnGroup } from 'primereact/columngroup';\r\n\r\nimport { Ripple } from 'primereact/ripple';\r\nimport { Dropdown } from 'primereact/dropdown';\r\n\r\nimport classNames from 'classnames';\r\n\r\n\r\nimport 'react-pro-sidebar/dist/css/styles.css';\r\nimport '../index.css';\r\nimport '../css/sidebar-desktop.css';\r\nimport '../css/login.css';\r\nimport '../css/charts.css';\r\nimport 'primereact/resources/themes/saga-blue/theme.css'\r\nimport 'primereact/resources/primereact.min.css'\r\nimport 'primeicons/primeicons.css'\r\n\r\nimport { ProgressBar } from 'primereact/progressbar';\r\nimport { months, colorsBars, lightOptions, lightOptionsMenor } from '../domain/constants';\r\nimport {\r\n    SetDateInJsonArrayToQueryOverObjects,\r\n    SetParamsToQuery,\r\n    AddLineMockData,\r\n    AddDataByFilters,\r\n    GetIndicators\r\n} from '../domain/kpiservice';\r\n\r\n\r\nimport { LoadingSkeletonSquare, LoadingSkeletonCard } from '../components/skeletons';\r\n\r\nimport Pdf from \"react-to-pdf\";\r\nconst ref = React.createRef();\r\nconst options = {\r\n    orientation: 'retrait',\r\n    unit: 'px',\r\n    format: [970,16000]\r\n};\r\n\r\nvar cors = require('cors'); // Already done “npm i cors --save-dev”\r\n\r\n//#endregion\r\n\r\nfunction Home() {\r\n \r\n    const [isUpdatingData, setIsUpdatingData] = React.useState(false)\r\n    const toast = React.useRef(null);\r\n\r\n    var numeroChamados = [  false,\r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false]\r\n\r\n    function percorreNumeroChamados(){\r\n        //debugger\r\n        for(var i=0; i < numeroChamados.length; i++){\r\n            if(numeroChamados[i] == false){\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    //chamadas\r\n    let [responseGraficoCETotal, setresponseGraficoCETotal] = React.useState({})\r\n    let [GraficoCETotal, setGraficoCETotal] = React.useState()\r\n\r\n    let [responseGraficoNNCMPTotalCE, setresponseGraficoNNCMPTotalCE] = React.useState({})\r\n    let [GraficoNNCMPTotalCE, setGraficoNNCMPTotalCE] = React.useState()\r\n\r\n    let [responseGraficoRACTotalCE, setresponseGraficoRACTotalCE] = React.useState({})\r\n    let [GraficoRACTotalCE, setGraficoRACTotalCE] = React.useState()\r\n\r\n    let [responseGraficoRAC, setresponseGraficoRAC] = React.useState({})\r\n    let [GraficoRAC, setGraficoRAC] = React.useState()\r\n\r\n    let [responseGraficoNCCMP, setresponseGraficoNCCMP] = React.useState({})\r\n    let [GraficoNCCMP, setGraficoNCCMP] = React.useState()\r\n\r\n    //Aves pesadas RAC\r\n    let [responseGraficoCETotalAvesPesadas, setresponseGraficoCETotalAvesPesadas] = React.useState({})\r\n    let [GraficoCETotalAvesPesadas, setGraficoCETotalAvesPesadas] = React.useState()\r\n\r\n    let [responseGraficoNNCMPTotalCEAvesPesadas, setresponseGraficoNNCMPTotalCEAvesPesadas] = React.useState({})\r\n    let [GraficoNNCMPTotalCEAvesPesadas, setGraficoNNCMPTotalCEAvesPesadas] = React.useState()\r\n\r\n    let [responseGraficoRACTotalCEAvesPesadas, setresponseGraficoRACTotalCEAvesPesadas] = React.useState({})\r\n    let [GraficoRACTotalCEAvesPesadas, setGraficoRACTotalCEAvesPesadas] = React.useState()\r\n\r\n    let [responseGraficoRACAvesPesadas, setresponseGraficoRACAvesPesadas] = React.useState({})\r\n    let [GraficoRACAvesPesadas, setGraficoRACAvesPesadas] = React.useState()\r\n\r\n    let [responseGraficoNCCMPAvesPesadas, setresponseGraficoNCCMPAvesPesadas] = React.useState({})\r\n    let [GraficoNCCMPAvesPesadas, setGraficoNCCMPAvesPesadas] = React.useState()\r\n\r\n    //Testes\r\n    let [responseGrafico5, setresponseGrafico5] = React.useState({})\r\n    let [Grafico_5, setGrafico_5] = React.useState()\r\n\r\n    let [responseTable, setresponseTable] = React.useState({})\r\n    let [TableRacME, setTableRacME] = React.useState()\r\n\r\n    //Handlers\r\n    React.useEffect(() => {\r\n               \r\n        chamarAPI(\"CETotal\",GraficoCETotal, \"GraficoCETotal\", [' where 1=1 '], setGraficoCETotal, setresponseGraficoCETotal, 0)     // 1\r\n        chamarAPI(\"NNCMPTotalCE\",GraficoNNCMPTotalCE, \"GraficoNNCMPTotalCE\", [' where 1=1 '], setGraficoNNCMPTotalCE, setresponseGraficoNNCMPTotalCE, 1)       // 2\r\n        chamarAPI(\"RACTotalCE\",GraficoRACTotalCE, \"GraficoRACTotalCE\", [' where 1=1 '], setGraficoRACTotalCE, setresponseGraficoRACTotalCE, 2)     // 3\r\n        chamarAPI(\"RAC\",GraficoRAC, \"GraficoRAC\", [' where 1=1 '], setGraficoRAC, setresponseGraficoRAC, 3)    // 4\r\n        chamarAPI(\"NCCMP\",GraficoNCCMP, \"GraficoNCCMP\", [' where 1=1 '], setGraficoNCCMP, setresponseGraficoNCCMP, 4)    // 5 \r\n        \r\n        chamarAPI(\"CETotal\",GraficoCETotalAvesPesadas, \"GraficoCETotalAvesPesadas\", [' where 1=1 '], setGraficoCETotalAvesPesadas, setresponseGraficoCETotalAvesPesadas, 5)     // 6\r\n        chamarAPI(\"NNCMPTotalCE\",GraficoNNCMPTotalCEAvesPesadas, \"GraficoNNCMPTotalCEAvesPesadas\", [' where 1=1 '], setGraficoNNCMPTotalCEAvesPesadas, setresponseGraficoNNCMPTotalCEAvesPesadas, 6)       // 7\r\n        chamarAPI(\"RACTotalCE\",GraficoRACTotalCEAvesPesadas, \"GraficoRACTotalCEAvesPesadas\", ['  WHERE [Negócio (Qualidade)] = \\'Aves Pesadas\\'   '], setGraficoRACTotalCEAvesPesadas, setresponseGraficoRACTotalCEAvesPesadas, 7)     // 8\r\n        chamarAPI(\"RAC\",GraficoRACAvesPesadas, \"GraficoRACAvesPesadas\", [' WHERE [Negócio (Qualidade)] = \\'Aves Pesadas\\'  '], setGraficoRACAvesPesadas, setresponseGraficoRACAvesPesadas, 8)    // 9\r\n        chamarAPI(\"NCCMP\",GraficoNCCMPAvesPesadas, \"GraficoNCCMPAvesPesadas\", [' where 1=1 '], setGraficoNCCMPAvesPesadas, setresponseGraficoNCCMPAvesPesadas, 9)    // 10\r\n\r\n\r\n        chamarAPI(\"RACUnico\",Grafico_5, \"Grafico_5\", [' where 1=1 '], setGrafico_5, setresponseGrafico5,10)  // 11                                                                    // 6\r\n\r\n    }, []);\r\n\r\n    function chamarAPI(apiNome, objeto, numGrafico, parametros, funcao, funcaoRetorno, numeroChamado){\r\n\r\n        switch(apiNome){\r\n            case 'CETotal':\r\n                \r\n                api.getSearaBaseCE(parametros).then((response) => {\r\n                    buscarDados(response, funcao, objeto, funcaoRetorno)\r\n                    numeroChamados[numeroChamado] = true;\r\n                    console.log(\"Rodou \"+apiNome)\r\n                    if(percorreNumeroChamados()){\r\n                        console.log(\"0 Rodou \"+apiNome)\r\n                        document.getElementById(\"btnAplicar\").click()\r\n                        //aplicar()\r\n                    }\r\n                    return response\r\n                }).catch(err => {\r\n                    // what now?\r\n                    console.log(err);       \r\n                });\r\n                break\r\n            case 'NNCMPTotalCE':\r\n                \r\n                api.getSearaBaseNNCMPTotalCE(parametros).then((response) => {\r\n                    buscarDados(response, funcao, objeto, funcaoRetorno)\r\n                    numeroChamados[numeroChamado] = true;\r\n                    console.log(\"Rodou \"+apiNome)\r\n                    if(percorreNumeroChamados()){\r\n                        console.log(\"0 Rodou \"+apiNome)\r\n                        document.getElementById(\"btnAplicar\").click()\r\n                        //aplicar()\r\n                    }\r\n                    return response\r\n                }).catch(err => {\r\n                    // what now?\r\n                    console.log(err);       \r\n                });\r\n                break\r\n            case 'RACTotalCE':\r\n                \r\n                api.getSearaBaseRACTotalCE(parametros).then((response) => {\r\n                    buscarDados(response, funcao, objeto, funcaoRetorno)\r\n                    numeroChamados[numeroChamado] = true;\r\n                    console.log(\"Rodou \"+apiNome)\r\n                    if(percorreNumeroChamados()){\r\n                        console.log(\"0 Rodou \"+apiNome)\r\n                        document.getElementById(\"btnAplicar\").click()\r\n                        //aplicar()\r\n                    }\r\n                    return response\r\n                }).catch(err => {\r\n                    // what now?\r\n                    console.log(err);       \r\n                });\r\n                break\r\n\r\n                    \r\n            case 'RAC':\r\n                \r\n                api.getSearaBaseRac(parametros).then((response) => {\r\n                    buscarDados(response, funcao, objeto, funcaoRetorno)\r\n                    numeroChamados[numeroChamado] = true;\r\n                    console.log(\"Rodou \"+apiNome)\r\n                    if(percorreNumeroChamados()){\r\n                        console.log(\"0Rodou \"+apiNome)\r\n                        document.getElementById(\"btnAplicar\").click()\r\n                        //aplicar()\r\n                    }\r\n                    return response\r\n                }).catch(err => {\r\n                    // what now?\r\n                    console.log(err);       \r\n                });\r\n                break\r\n            case 'NCCMP':\r\n                \r\n                api.getSearaBaseNCCMP(parametros).then((response) => {\r\n                    buscarDados(response, funcao, objeto, funcaoRetorno)\r\n                    numeroChamados[numeroChamado] = true;\r\n                    console.log(\"Rodou \"+apiNome)\r\n                    if(percorreNumeroChamados()){\r\n                        console.log(\"0Rodou \"+apiNome)\r\n                        document.getElementById(\"btnAplicar\").click()\r\n                        //aplicar()\r\n                    }\r\n                    return response\r\n                }).catch(err => {\r\n                    // what now?\r\n                    console.log(err);      \r\n                });\r\n                break\r\n\r\n            case 'NCCLOG':\r\n                \r\n                    api.getSearaBaseNCCLOG(parametros).then((response) => {\r\n                        buscarDados(response, funcao, objeto, funcaoRetorno)\r\n                        numeroChamados[numeroChamado] = true;\r\n                        console.log(\"Rodou \"+apiNome)\r\n                        if(percorreNumeroChamados()){\r\n                            console.log(\"0Rodou \"+apiNome)\r\n                            document.getElementById(\"btnAplicar\").click()\r\n                            //aplicar()\r\n                        }\r\n                        return response\r\n                    }).catch(err => {\r\n                        // what now?\r\n                        console.log(err);       \r\n                    });\r\n                    break  \r\n            case 'RACUnico':\r\n                \r\n                    api.getSearaBaseRACUnico(parametros).then((response) => {\r\n                            \r\n                            buscarDados(response, funcao, objeto, funcaoRetorno)\r\n                            numeroChamados[numeroChamado] = true;\r\n                            console.log(\"Rodou \"+apiNome)\r\n                            if(percorreNumeroChamados()){\r\n                                console.log(\"0Rodou \"+apiNome)\r\n                                document.getElementById(\"btnAplicar\").click()\r\n                                //aplicar()\r\n                            }\r\n                            return response\r\n                        }).catch(err => {\r\n                            // what now?\r\n                            console.log(err);       \r\n                        });\r\n                        break  \r\n\r\n            default:\r\n                break    \r\n            \r\n        }\r\n\r\n        return\r\n    }\r\n\r\n    function aplicar() {\r\n        setTimeout(function(){\r\n            GerarGraficoHistorico(GraficoCETotal, setresponseGraficoCETotal)\r\n            GerarGraficoHistorico(GraficoNNCMPTotalCE, setresponseGraficoNNCMPTotalCE)\r\n            GerarGraficoHistorico(GraficoRACTotalCE, setresponseGraficoRACTotalCE)\r\n            GerarGraficoHistorico(GraficoRAC, setresponseGraficoRAC)\r\n            GerarGraficoHistorico(GraficoNCCMP, setresponseGraficoNCCMP)\r\n\r\n            GerarGraficoHistorico(GraficoCETotalAvesPesadas, setresponseGraficoCETotalAvesPesadas)\r\n            GerarGraficoHistorico(GraficoNNCMPTotalCEAvesPesadas, setresponseGraficoNNCMPTotalCEAvesPesadas)\r\n            GerarGraficoHistorico(GraficoRACTotalCEAvesPesadas, setresponseGraficoRACTotalCEAvesPesadas)\r\n            GerarGraficoHistorico(GraficoRACAvesPesadas, setresponseGraficoRACAvesPesadas)\r\n            GerarGraficoHistorico(GraficoNCCMPAvesPesadas, setresponseGraficoNCCMPAvesPesadas)\r\n\r\n            GerarGraficoBarras(Grafico_5, setresponseGrafico5)\r\n        }, 0)\r\n        \r\n    }\r\n\r\n    const GerarGraficoHistorico = (objeto, funcao) => {\r\n            \r\n            setIsUpdatingData(true)\r\n            let json = objeto; \r\n            let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n            let groupBy = function groupBy(list, keyGetter) {\r\n                const map = new Map();\r\n                list.forEach((item) => {\r\n                    const key = keyGetter(item);\r\n                    const collection = map.get(key);\r\n                    if (!collection) {\r\n                        map.set(key, [item]);\r\n                    } else {\r\n                        collection.push(item);\r\n                    }\r\n                });\r\n                return map;\r\n            }\r\n\r\n            let xaxis = Array.from(groupBy(json, x => x[\"Periodo\"]), ([name, value]) => ({ name, value }));\r\n            let yaxis = [{name:'Evolutivo 2020'},{name:'Evolutivo 2021'},{name:'Evolutivo Meta'},{name:'Meta'},{name:'2019'},{name:'2020'},{name: '2021'}];\r\n\r\n            xaxis.forEach(x => {\r\n                if (x.name == \"2019\"){\r\n                    x['yaxis'] = [{name: \"2019\", value: x.value[0].Valor}]\r\n                }else if (x.name == \"2020\"){\r\n                    x['yaxis'] = [{name: \"2020\", value: x.value[0].Valor}]\r\n                }else if(x.name == \"Meta\"){\r\n                    x['yaxis'] = [{name: \"Meta\", value: x.value[0].Valor}]\r\n                }else if(x.name == \"2021\"){\r\n                    x['yaxis'] = [{name: \"2021\", value: x.value[0].Valor}]\r\n                }else{\r\n                    x['yaxis'] = [\r\n                                    {name: \"Evolutivo 2020\", value: x.value[0].a2020},\r\n                                    {name: \"Evolutivo Meta\", value: x.value[0].aMeta},\r\n                                    {name: \"Evolutivo 2021\", value: x.value[0].a2021}\r\n                                ]\r\n                }\r\n            })\r\n\r\n            let series = []\r\n            yaxis.forEach((y, index) => {\r\n                let dataset = xaxis.map(xx => {\r\n                    let yaxysvalue = xx.yaxis.filter(r => r.name === y.name);\r\n                    if (yaxysvalue.length)\r\n                        return yaxysvalue[0].value\r\n\r\n                    return null\r\n                })\r\n\r\n                let tipo = 'line'\r\n                let cor = '#bfbfbf'\r\n                let corLabel = '#bfbfbf'\r\n                let yAx = \"B\"\r\n                let varborderDash = [0,0]\r\n\r\n                switch (y.name){\r\n\r\n                    case \"2019\": \r\n                                    tipo = \"bar\"\r\n                                    cor = \"#bfbfbf\"\r\n                                    corLabel = \"#bfbfbf\"\r\n                                    yAx = \"A\"\r\n                                    break\r\n                    case \"2020\": \r\n                                    tipo = \"bar\"\r\n                                    cor = \"#bfbfbf\"\r\n                                    corLabel = \"#bfbfbf\"\r\n                                    yAx = \"A\"\r\n                                    break\r\n                    case \"Meta\": \r\n                                    tipo = \"bar\"\r\n                                    cor = \"rgb(245,156,0)\"\r\n                                    corLabel = \"rgb(245,156,0)\"\r\n                                    yAx = \"A\"\r\n                                    break\r\n                    case \"2021\": \r\n                                    tipo = \"bar\"\r\n                                    cor = \"#cccccc\"\r\n                                    corLabel = \"#cccccc\"\r\n                                    yAx = \"A\"\r\n                                    break\r\n                    case \"Evolutivo 2020\": \r\n                                    tipo = \"line\"\r\n                                    cor = \"rgb(166, 166, 166)\"\r\n                                    corLabel = \"rgb(166, 166, 166)\"\r\n                                    varborderDash = [10,5]\r\n                                    yAx = \"B\"\r\n                                    break\r\n                    case \"Evolutivo Meta\": \r\n                                    tipo = \"line\"\r\n                                    cor = \"rgb(245,156,0)\"\r\n                                    corLabel = \"rgb(245,156,0)\"\r\n                                    yAx = \"B\"\r\n                                    break\r\n                    case \"Evolutivo 2021\": \r\n                                    tipo = \"line\"\r\n                                    cor = \"rgb(89,89,89)\"\r\n                                    corLabel = \"rgb(89,89,89)\"\r\n                                    yAx = \"B\"\r\n                                    break\r\n                                 \r\n                    default:\r\n                                    break\r\n\r\n\r\n                }\r\n\r\n                let serie = {\r\n                    type: tipo,\r\n                    yAxisID: yAx,\r\n                    label: y.name,\r\n                    backgroundColor: cor,\r\n                    fill: false,\r\n                    borderColor: cor,\r\n                    borderWidth: 2,\r\n                    pointRadius: 5,\r\n                    pointBackgroundColor: \"transparent\",\r\n                    pointBorderColor: \"transparent\",\r\n                    borderDash: varborderDash, \r\n                    data: dataset,\r\n                    datalabels: {\r\n                    \r\n                        align: \"top\",\r\n                        anchor: \"end\",\r\n                        offset: 10,\r\n                        padding: -2,\r\n                        color: corLabel,\r\n                        //clip: true,\r\n                        font: {\r\n                            size: \"10\",\r\n                        },\r\n                        \r\n                    }\r\n                     \r\n                }\r\n                series.push(serie)\r\n            })\r\n\r\n            let seriesAdd = []\r\n            \r\n                series.filter(s => s.label != null).forEach(element => {\r\n                    seriesAdd.push(element)\r\n                });\r\n           \r\n\r\n            const dashboardData = {\r\n                labels: xaxis.map(r => r.name),\r\n                datasets: seriesAdd,\r\n                indicators\r\n                \r\n            };\r\n\r\n            if(typeof(funcao)==\"function\"){\r\n                funcao(dashboardData);\r\n            }\r\n\r\n            setIsUpdatingData(false)\r\n    }\r\n\r\n    const GerarGraficoBarras = (objeto, funcao) => {\r\n            \r\n        setIsUpdatingData(true)\r\n        let json = objeto; \r\n        let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n        let groupBy = function groupBy(list, keyGetter) {\r\n            const map = new Map();\r\n            list.forEach((item) => {\r\n                const key = keyGetter(item);\r\n                const collection = map.get(key);\r\n                if (!collection) {\r\n                    map.set(key, [item]);\r\n                } else {\r\n                    collection.push(item);\r\n                }\r\n            });\r\n            return map;\r\n        }\r\n\r\n        let xaxis = Array.from(json);//groupBy(json, x => x[\"Periodo\"]), ([name, value]) => ({ name, value }));\r\n        let yaxis = [{name: 'Valor'}];\r\n\r\n        xaxis.forEach(x => {          \r\n            x['yaxis'] = [{name: \"Valor\", value: x.value}]            \r\n        })\r\n\r\n        let series = []\r\n        yaxis.forEach((y, index) => {\r\n            let dataset = xaxis.map(xx => {\r\n                let yaxysvalue = xx.yaxis.filter(r => 1===1);\r\n                if (yaxysvalue.length)\r\n                    return yaxysvalue[0].value\r\n\r\n                return null\r\n            })\r\n\r\n            let tipo = 'bar'\r\n            let cor = '#bfbfbf'\r\n            let corLabel = '#bfbfbf'\r\n            let yAx = \"B\"\r\n            let varborderDash = [0,0]\r\n\r\n            let serie = {\r\n                type: tipo,\r\n                yAxisID: yAx,\r\n                label: y.name,\r\n                backgroundColor: cor,\r\n                fill: false,\r\n                borderColor: cor,\r\n                borderWidth: 2,\r\n                pointRadius: 5,\r\n                pointBackgroundColor: \"transparent\",\r\n                pointBorderColor: \"transparent\",\r\n                borderDash: varborderDash, \r\n                data: dataset,\r\n                datalabels: {\r\n                \r\n                    align: \"top\",\r\n                    anchor: \"end\",\r\n                    offset: 10,\r\n                    padding: -2,\r\n                    color: corLabel,\r\n                    //clip: true,\r\n                    font: {\r\n                        size: \"10\",\r\n                    },\r\n                    \r\n                }\r\n                 \r\n            }\r\n            series.push(serie)\r\n        })\r\n\r\n        let seriesAdd = []\r\n        \r\n            series.filter(s => s.label != null).forEach(element => {\r\n                seriesAdd.push(element)\r\n            });\r\n       \r\n\r\n        const dashboardData = {\r\n            labels: xaxis.map(r => r.name),\r\n            datasets: seriesAdd,\r\n            indicators\r\n            \r\n        };\r\n\r\n        if(typeof(funcao)==\"function\"){\r\n            funcao(dashboardData);\r\n        }\r\n\r\n        setIsUpdatingData(false)\r\n    }\r\n\r\n    const DataTableRACME = () => {\r\n\r\n        if (!TableRacME) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRacME.length; i++) {\r\n            json.push(TableRacME[i])\r\n        }\r\n\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestante\" header=\"Manifestante\"></Column>\r\n                        <Column field=\"Nº RAC\" header=\"Nº RAC\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        //////////////////////////////////////////\r\n    }\r\n\r\n    const buscarTabelaRACUnico = () => {\r\n        let parm = \" \";\r\n        \r\n        api.getSearaBaseRacME(parm).then((response) => {\r\n            let json = JSON.parse(response.data)\r\n\r\n            return  (\r\n                <div>\r\n                    <div className=\"card\">\r\n                        <DataTable value={json} sortMode=\"multiple\">\r\n                            <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                            <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                            <Column field=\"Manifestante\" header=\"Manifestante\"></Column>\r\n                            <Column field=\"Nº RAC\" header=\"Nº RAC\"></Column>\r\n                        </DataTable>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        })\r\n    }\r\n\r\n    const buscarDados = (response, funcao, graficoRetorno, funcaoRetorno ) => {\r\n  \r\n        setIsUpdatingData(true)\r\n\r\n        let parm = \" \";\r\n\r\n        api.getSearaBaseRacME(parm).then((response) => {\r\n\r\n            let json = JSON.parse(response.data)\r\n            setTableRacME(json)\r\n        })        \r\n\r\n        let json = JSON.parse(response.data)\r\n        let datasets = [];\r\n        let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n        if(typeof(funcao)==\"function\"){\r\n            funcao(json);\r\n        }\r\n\r\n        setIsUpdatingData(false)\r\n\r\n        //GerarGraficoHistorico(graficoRetorno, funcaoRetorno)\r\n  \r\n    };\r\n\r\n    const showSuccess = (errorMessage, detailMessage) => {\r\n        toast.current.show({ severity: 'success', summary: errorMessage, detail: detailMessage });\r\n    }\r\n\r\n    const showError = (errorMessage, detailMessage) => {\r\n        toast.current.show({ severity: 'error', summary: errorMessage, detail: detailMessage, life: 6000 });\r\n    }\r\n\r\n    const UpdatingDatabase = () => {\r\n        return (\r\n            <div>\r\n                <h1 className={'h2'}>\r\n                    Atualizando a base\r\n                    <br />\r\n                    <small>Puxando dados da RAC</small>\r\n                    <br />\r\n                </h1>\r\n                <ProgressBar mode=\"indeterminate\" style={{ height: '16px' }}></ProgressBar>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // Se esta logado exibe tela do dashboard:\r\n    return (\r\n        // <div style=\"width: 1220px !important;\">\r\n        <div> \r\n            <Row>\r\n                <Col lg={12} className=\"cssSeara2021\">\r\n                    {isUpdatingData ? (<UpdatingDatabase />) : (\r\n                        <div>\r\n                            <h1 className={'h2'}>\r\n                                Relatório KPI Seara\r\n                                    <br />\r\n                                <small>por GRX Soluções</small>\r\n                            </h1>\r\n                            <div className=\"btn-toolbar mb-2 mb-md-0\">\r\n                                {/* <div className=\"btn-group mr-2\">\r\n                                    <button className=\"btn btn-sm btn-outline-secondary\" onClick={buscarDados}>Atualizar</button>\r\n                                </div>   */}\r\n\r\n                                <Pdf targetRef={ref} filename=\"KPI.pdf\" options={options} x={1} scale={0.8}>\r\n                                    {({toPdf}) => (\r\n                                        <button className=\"btn btn-sm btn-secondary\" style={{ width: '100%' }} onClick={toPdf} id=\"btnPDF\">Gerar PDF</button>\r\n                                    )}\r\n                                </Pdf>\r\n\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n\r\n            <hr></hr>\r\n\r\n            {/* Botão aplicar */}\r\n            {isUpdatingData ? (<div> </div>) : (\r\n                <Row style={{ paddingRight: '15px', paddingLeft: '15px', display: 'none' }}>\r\n                    <button className=\"btn btn-sm btn-secondary\" style={{ width: '100%' }} onClick={aplicar} id=\"btnAplicar\">Aplicar</button>\r\n                </Row>\r\n            )}\r\n\r\n            \r\n\r\n            {/* Graficos */}\r\n            <div className=\"pad10\" ref={ref}  >\r\n                <Row>\r\n                    <Col className=\"mt-5 col-12 cssSeara2021\">\r\n                        <h1>Relatório de Atendimento ao Consumidor (RAC)</h1>\r\n                    </Col>\r\n                    \r\n                </Row>\r\n\r\n                <reg id=\"region RAC - Totais\">\r\n\r\n                <Row>\r\n                    <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                        Totais\r\n                        <hr></hr>\r\n                    </Col>    \r\n                </Row>\r\n                <Row>\r\n                    <Col className=\" align-self-center\">\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Habilitador\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico divMaior\">\r\n                                <Chart type=\"bar\" data={responseGraficoCETotal} options={lightOptions} className=\"divMaior\"/>\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico divMenor\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRACTotalCE} options={lightOptionsMenor} />\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico divMenor\">\r\n                                    <Chart type=\"bar\" data={responseGraficoNNCMPTotalCE} options={lightOptionsMenor} />\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                    </Col>\r\n                    \r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"mt-1 col-12 cssSeara2021_subTitulo\">\r\n                        Reclamações\r\n                        <hr></hr>\r\n                    </Col>    \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                <Chart type=\"bar\" data={responseGraficoRAC} options={lightOptions}/>\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                <Chart type=\"bar\" data={responseGraficoNCCMP} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    \r\n                </Row>\r\n\r\n                </reg>\r\n                \r\n                <reg id=\"region RAC - Aves Pesadas\">\r\n\r\n                <Row>\r\n                    <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                        Aves Pesadas\r\n                        <hr></hr>\r\n                    </Col>    \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Habilitador\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                <Chart type=\"bar\" data={responseGraficoCETotalAvesPesadas} options={lightOptions}/>\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico divMenor\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRACTotalCEAvesPesadas} options={lightOptionsMenor}/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico divMenor\">\r\n                                    <Chart type=\"bar\" data={responseGraficoNNCMPTotalCEAvesPesadas} options={lightOptionsMenor}/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                    </Col>\r\n                    \r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"mt-1 col-12 cssSeara2021_subTitulo\">\r\n                        Reclamações\r\n                        <hr></hr>\r\n                    </Col>    \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                <Chart type=\"bar\" data={responseGraficoRACAvesPesadas} options={lightOptions}/>\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                <Chart type=\"bar\" data={responseGraficoNCCMPAvesPesadas} options={lightOptions}/>\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    \r\n                </Row>\r\n\r\n                </reg>\r\n                \r\n                <reg id=\"region RAC - Aves Pesadas PR\">\r\n\r\n                <Row>\r\n                    <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                        Aves Pesadas PR\r\n                        <hr></hr>\r\n                    </Col>    \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Habilitador\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                <Chart type=\"bar\" data={responseGraficoCETotal} options={lightOptions}/>\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoNNCMPTotalCE} options={lightOptions}/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoNNCMPTotalCE} options={lightOptions}/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                    </Col>\r\n                    \r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"mt-1 col-12 cssSeara2021_subTitulo\">\r\n                        Reclamações\r\n                        <hr></hr>\r\n                    </Col>    \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                <Chart type=\"bar\" data={responseGraficoRACTotalCE} options={lightOptions}/>\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                <Chart type=\"bar\" data={responseGraficoRAC} options={lightOptions}/>\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    \r\n                </Row>\r\n\r\n                </reg>\r\n\r\n                <reg id=\"region RAC - Aves Leves\">\r\n\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            Aves Leves\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"Habilitador\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoCETotal} options={lightOptions}/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col>\r\n                            <Col>\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoNNCMPTotalCE} options={lightOptions}/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                            <Col>\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoNNCMPTotalCE} options={lightOptions}/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_subTitulo\">\r\n                            Reclamações\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRACTotalCE} options={lightOptions}/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRAC} options={lightOptions}/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n                </reg>\r\n\r\n                <reg id=\"region RAC - Suínos\">\r\n\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            Suínos\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"Habilitador\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoCETotal} options={lightOptions}/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col>\r\n                            <Col>\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoNNCMPTotalCE} options={lightOptions}/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                            <Col>\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoNNCMPTotalCE} options={lightOptions}/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_subTitulo\">\r\n                            Reclamações\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRACTotalCE} options={lightOptions}/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRAC} options={lightOptions}/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n                </reg>\r\n\r\n                <reg id=\"region RAC - Preparados\">\r\n\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            Preparados\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"Habilitador\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoCETotal} options={lightOptions}/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col>\r\n                            <Col>\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoNNCMPTotalCE} options={lightOptions}/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                            <Col>\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoNNCMPTotalCE} options={lightOptions}/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_subTitulo\">\r\n                            Reclamações\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRACTotalCE} options={lightOptions}/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRAC} options={lightOptions}/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n                </reg>\r\n\r\n                <reg id=\"region RAC - Reclamações - Aves Pesadas\">\r\n\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            Reclamações - Aves Pesadas\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"Habilitador\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoCETotal} options={lightOptions}/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col>\r\n                            <Col>\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGrafico5} options={lightOptions}/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                            <Col>\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGrafico5} options={lightOptions}/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n                \r\n                </reg>\r\n\r\n                <reg id=\"region RAC - Reclamações - Aves Pesadas PR\">\r\n\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            Reclamações - Aves Pesadas PR\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"Habilitador\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoCETotal} options={lightOptions}/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col>\r\n                            <Col>\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGrafico5} options={lightOptions}/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                            <Col>\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGrafico5} options={lightOptions}/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n                </reg>\r\n\r\n                <reg id=\"region RAC - Reclamações - Suínos\">\r\n\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            Reclamações - Suínos\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"Habilitador\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoCETotal} options={lightOptions}/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col>\r\n                            <Col>\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGrafico5} options={lightOptions}/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                            <Col>\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGrafico5} options={lightOptions}/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n\r\n                </reg>\r\n\r\n                <reg id=\"region RAC - Reclamações - Preparados\">\r\n\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            Reclamações - Preparados\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"Habilitador\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoCETotal} options={lightOptions}/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col>\r\n                            <Col>\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGrafico5} options={lightOptions}/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                            <Col>\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGrafico5} options={lightOptions}/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n\r\n                </reg>\r\n\r\n\r\n                \r\n                                \r\n                                \r\n                                \r\n                                \r\n                                \r\n                                \r\n                                \r\n                                \r\n                                \r\n                                \r\n                                \r\n                                \r\n                                \r\n                                \r\n                                \r\n                                \r\n                                \r\n                                \r\n                                {/* Testes finais */}\r\n\r\n                                <Row>\r\n                                    <Col>\r\n                                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                            <Card title=\"Total RAC\" subTitle=\"RA\" className=\"mt-5\">\r\n                                                <Chart type=\"bar\" data={responseGrafico5} options={lightOptions}/>\r\n                                            </Card>\r\n                                        )}\r\n                                    </Col>\r\n\r\n                                    <Col className=\"mt-5\">                     \r\n\r\n                                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                            \r\n                                            DataTableRACME() \r\n                                        \r\n                                        )}\r\n\r\n                                    </Col>  \r\n                                </Row>\r\n                                        \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","D:\\GRX\\PainelKPISeara\\src\\components\\navbarDesktop.js",["173","174"],"import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\nconst NavbarDesktop = (props) => {\r\n\r\n    const capitalize = (str) => {\r\n        return str.charAt(0).toUpperCase() + str.slice(1);\r\n    }\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\" className=\"navbar-desk\" >\r\n            <Navbar.Brand href=\"#home\">\r\n                <img\r\n                    alt=\"\"\r\n                    src=\"https://logodownload.org/wp-content/uploads/2014/12/seara-logo-1-1.png\"\r\n                    //width=\"30\"\r\n                    height=\"30\"\r\n                    className=\"d-inline-block align-top\"\r\n                />{' '}\r\n                Painel de KPIs\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle />\r\n            <Navbar.Collapse className=\"justify-content-end\">\r\n                <Navbar.Text>\r\n                    Bem-vindo: <a href=\"#\" style={{ textDecoration: 'none' }}>{capitalize(props.username)}</a>\r\n                </Navbar.Text>\r\n                &nbsp;\r\n                &nbsp;\r\n                <Navbar.Text>\r\n                    <a href=\"#\" style={{ textDecoration: 'none' }} onClick={(e) => props.handleLogout(e)}>\r\n                        <span style={{ cursor: 'pointer', color: 'rgb(255 255 255 / 50%)' }}>\r\n                            Sair &nbsp;\r\n                            <i style={{ cursor: 'pointer', color: '#fff' }} className=\"pi pi-sign-out\"></i>\r\n                        </span>\r\n                    </a>\r\n                </Navbar.Text>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default NavbarDesktop;","D:\\GRX\\PainelKPISeara\\src\\components\\sidebarDesktop.js",[],"D:\\GRX\\PainelKPISeara\\src\\views\\dashViewNNCLog.js",[],"D:\\GRX\\PainelKPISeara\\src\\components\\navbarMobile.js",[],"D:\\GRX\\PainelKPISeara\\src\\views\\dashViewAbsorcao.js",[],"D:\\GRX\\PainelKPISeara\\src\\components\\skeletons.js",[],"D:\\GRX\\PainelKPISeara\\src\\domain\\kpiservice.js",[],"D:\\GRX\\PainelKPISeara\\src\\api\\api.js",["175","176","177","178","179","180","181","182"],"import axios from 'axios'\r\nimport {\r\n    SetDateInJsonArrayToQueryOverObjects,\r\n    SetParamsToQuery,\r\n    AddLineMockData,\r\n    AddDataByFilters,\r\n    GetIndicators,\r\n    AddItensToJsonArray,\r\n} from '../domain/kpiservice'\r\nimport { months } from '../domain/constants'\r\n\r\nconst instance = axios.create({\r\n    //baseURL: \"http://192.168.25.200/Seara\" //\"http://179.184.236.89/Seara\" \"http://localhost\"\r\n    baseURL: \"http://localhost/SearaDashboard\"\r\n})\r\n\r\n\r\n\r\nexport default {\r\n\r\n    getSearaBaseRac: (params) =>\r\n        instance({\r\n            method: \"GET\",\r\n            //url: `/Service/RAC?data=${params[0]}&nome=${params[1]}`, //`/SearaDashboard/RAC?data=${params[0]}&nome=${params[1]}`,\r\n            //url: `/RACTotal?data=${params[0]}&nome=${params[1]}`, \r\n            url: `/RacTotal?where=${params[0]}`, \r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n                    return data;\r\n                }\r\n            ]\r\n        }),\r\n    getSearaBaseNNCMPTotalCE: (params) =>\r\n        instance({\r\n            method: \"GET\",\r\n            //url: `/Service/RAC?data=${params[0]}&nome=${params[1]}`, //`/SearaDashboard/RAC?data=${params[0]}&nome=${params[1]}`,\r\n            //url: `/RACTotal?data=${params[0]}&nome=${params[1]}`, \r\n            url: `/NNCMPTotalCE?where=${params[0]}`, \r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n                    return data;\r\n                }\r\n            ]\r\n        }),\r\n    getSearaBaseRACTotalCE: (params) =>\r\n        instance({\r\n            method: \"GET\",\r\n            //url: `/Service/RAC?data=${params[0]}&nome=${params[1]}`, //`/SearaDashboard/RAC?data=${params[0]}&nome=${params[1]}`,\r\n            //url: `/RACTotal?data=${params[0]}&nome=${params[1]}`, \r\n            url: `/RACTotalCE?where=${params[0]}`, \r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n                    return data;\r\n                }\r\n            ]\r\n        }),\r\n\r\n        \r\n    getSearaBaseRacCE: (params) =>\r\n        instance({\r\n            method: \"GET\",\r\n            //url: `/Service/RAC?data=${params[0]}&nome=${params[1]}`, //`/SearaDashboard/RAC?data=${params[0]}&nome=${params[1]}`,\r\n            //url: `/RACTotal?data=${params[0]}&nome=${params[1]}`, \r\n            url: `/RacTotalCE?where=${params[0]}`, \r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n                    return data;\r\n                }\r\n            ]\r\n        }),\r\n    \r\n    getSearaBaseRacME: (params) =>\r\n        instance({\r\n            method: \"GET\",\r\n            url: `/RacME?where=${params[0]}`, \r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n                    \r\n                    return data;\r\n                }\r\n            ]\r\n        }),\r\n\r\n    getSearaBaseNCCMP: (params) =>\r\n        instance({\r\n            method: \"GET\",\r\n            //url: `/Service/RAC?data=${params[0]}&nome=${params[1]}`, //`/SearaDashboard/RAC?data=${params[0]}&nome=${params[1]}`,\r\n            //url: `/RACTotal?data=${params[0]}&nome=${params[1]}`, \r\n            url: `/NNCMPTotal?where=${params[0]}`, \r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n                    return data;\r\n                }\r\n            ]\r\n        }),\r\n\r\n    getSearaBaseNCCMPCE: (params) =>\r\n        instance({\r\n            method: \"GET\",\r\n            //url: `/Service/RAC?data=${params[0]}&nome=${params[1]}`, //`/SearaDashboard/RAC?data=${params[0]}&nome=${params[1]}`,\r\n            //url: `/RACTotal?data=${params[0]}&nome=${params[1]}`, \r\n            url: `/NNCMPTotalCE?where=${params[0]}`, \r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n                    return data;\r\n                }\r\n            ]\r\n        }),\r\n\r\n    getSearaBaseNCCLOG: (params) =>\r\n        instance({\r\n            method: \"GET\",\r\n            //url: `/Service/RAC?data=${params[0]}&nome=${params[1]}`, //`/SearaDashboard/RAC?data=${params[0]}&nome=${params[1]}`,\r\n            //url: `/RACTotal?data=${params[0]}&nome=${params[1]}`, \r\n            url: `/NNCLogTotal?where=${params[0]}`, \r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n                    return data;\r\n                }\r\n            ]\r\n        }),\r\n\r\n    getSearaBaseCE: (params) =>\r\n        instance({\r\n            method: \"GET\",\r\n            //url: `/Service/RAC?data=${params[0]}&nome=${params[1]}`, //`/SearaDashboard/RAC?data=${params[0]}&nome=${params[1]}`,\r\n            //url: `/RACTotal?data=${params[0]}&nome=${params[1]}`, \r\n            url: `/CETotal?where=${params[0]}`, \r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n                    return data;\r\n                }\r\n            ]\r\n        }),\r\n\r\n    getSearaBaseRACUnico: (params) =>\r\n        instance({\r\n            method: \"GET\",\r\n            //url: `/Service/RAC?data=${params[0]}&nome=${params[1]}`, //`/SearaDashboard/RAC?data=${params[0]}&nome=${params[1]}`,\r\n            //url: `/RACTotal?data=${params[0]}&nome=${params[1]}`, \r\n            url: `/RACUnico?where=${params[0]}`, \r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n                    return data;\r\n                }\r\n            ]\r\n        }),\r\n\r\n\r\n\r\n        \r\n\r\n    \r\n}\r\n","D:\\GRX\\PainelKPISeara\\src\\domain\\constants.js",[],"D:\\GRX\\PainelKPISeara\\src\\api\\userApi.js",["183"],"import axios from 'axios'\r\n\r\n// const instance = axios.create({\r\n//     baseURL: \"http://179.184.236.89\" //\"http://179.184.236.89\"\r\n// })\r\nconst instance = axios.create({\r\n    baseURL: \"https://localhost:44317/SearaDashboard\" //\"http://179.184.236.89\"\r\n})\r\n\r\nexport default {\r\n\r\n    get: () =>\r\n    instance({\r\n        method: \"GET\",\r\n        url: `/get-users`,\r\n        transformResponse: [\r\n            function (data) {\r\n                return data;\r\n            }\r\n        ]\r\n    }),\r\n\r\n    post: (user) =>\r\n        instance({\r\n            method: \"POST\",\r\n            url: `/create-user`,\r\n            data: user,\r\n            transformResponse: [\r\n                function (data) {\r\n                    return data;\r\n                }\r\n            ]\r\n        }),\r\n}","D:\\GRX\\PainelKPISeara\\src\\views\\listUsers.js",["184"],"import React from 'react';\r\nimport 'primeicons/primeicons.css'\r\nimport Api from '../api/userApi'\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { Button } from 'primereact/button';\r\nimport { InputText } from 'primereact/inputtext';\r\n\r\nconst listUsersTexts = {\r\n    columnName: \"Nome de usuario\",\r\n    columnEmail: \"E-mail\",\r\n    columnRoles: \"Roles/Claims\",\r\n    columnActions: \"Ações\",\r\n    tableHeader: \"Usuários cadastrados\",\r\n    searchColumnEmailPlaceholder: \"Busque por e-mail\",\r\n    searchColumnNamePlaceholder: \"Busque por nome de usuário\",\r\n    searchColumnRole: \"Busque por roles/claims\",\r\n}\r\n\r\nclass ListUserJxs extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: [],\r\n            totalRecords: 0,\r\n            loading: true,\r\n            globalFilter: null\r\n        };\r\n        // this.toast = React.createRef();\r\n        this.getUsers();\r\n    }\r\n\r\n    getUsers() {\r\n        Api.get().then(r => {\r\n            const users = JSON.parse(r.data);\r\n            const totalRecords = users.length;\r\n            this.setState({\r\n                users: JSON.parse(r.data),\r\n                totalRecords: totalRecords,\r\n                loading: false\r\n            });\r\n            console.log(this.state)\r\n        }).catch(e => {\r\n\r\n        }).finally(() => {\r\n\r\n        })\r\n    }\r\n\r\n    edit(rowData) {\r\n        console.log(rowData)\r\n    }\r\n    confirmInactivate(rowData) {\r\n        console.log(rowData)\r\n    }\r\n\r\n    actionBodyTemplate(rowData) {\r\n        return (\r\n            <React.Fragment>\r\n                <Button icon=\"pi pi-pencil\" className=\"mr-1 p-button-rounded p-button-warning p-mr-2\" onClick={() => this.edit(rowData)} />\r\n                <Button icon=\"pi pi-trash\" className=\"p-button-rounded p-button-danger\" onClick={() => this.confirmInactivate(rowData)} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    rolesBodyTemplate(rowData) {\r\n        return (\r\n            <React.Fragment>\r\n                <div>\r\n                    {rowData.Roles.map((r, index) => {\r\n                        return (<div key={index}>\r\n                            Role:\r\n                            <span className={`customer-badge status-qualified`}>{r.Role}</span>\r\n                            Claims in Role:\r\n                            <span className={`customer-badge status-qualified`}>{JSON.stringify(r.Claims)}</span>\r\n                        </div>)\r\n                    })}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const header = (\r\n            <div className=\"table-header\" style={{ display: \"flex\", \"justifyContent\": \"space-between\" }}>\r\n                {listUsersTexts.tableHeader}\r\n                {/* <span className=\"p-input-icon-left\">\r\n                    <i className=\"pi pi-search\" />\r\n                    <InputText type=\"search\" onInput={(e) => this.setState({ globalFilter: e.target.value })} placeholder=\"Global Search\" />\r\n                </span> */}\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <DataTable\r\n                        value={this.state.users}\r\n                        header={header}\r\n                        lazy\r\n                        paginator\r\n                        first={this.state.users.first}\r\n                        rows={10}\r\n                        loading={this.state.loading}\r\n                        totalRecords={this.state.totalRecords}\r\n                        resizableColumns\r\n                        columnResizeMode=\"expand\"\r\n                        globalFilter={this.state.globalFilter}\r\n                        emptyMessage=\"No customers found.\"\r\n                        className=\"p-datatable-responsive-demo p-datatable-sm p-datatable-striped\">\r\n                        <Column\r\n                            field=\"Username\"\r\n                            header={listUsersTexts.columnName}\r\n                            filter\r\n                            filterPlaceholder={listUsersTexts.searchColumnNamePlaceholder}\r\n                            filterMatchMode=\"contains\"\r\n                            style={{ width: '20%' }}\r\n                            sortable>\r\n                        </Column>\r\n                        <Column\r\n                            field=\"Email\"\r\n                            filter\r\n                            filterPlaceholder={listUsersTexts.searchColumnEmailPlaceholder}\r\n                            filterMatchMode=\"contains\"\r\n                            header={listUsersTexts.columnEmail}\r\n                            style={{ width: '25%' }}\r\n                            sortable>\r\n                        </Column>\r\n                        <Column\r\n                            header={listUsersTexts.columnRoles}\r\n                            body={this.rolesBodyTemplate}>\r\n                        </Column>\r\n                        <Column\r\n                            header={listUsersTexts.columnActions}\r\n                            style={{ width: '15%' }}\r\n                            body={this.actionBodyTemplate}>\r\n                        </Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst ListUsers = () => {\r\n    return <ListUserJxs />\r\n};\r\n\r\nexport default ListUsers;","D:\\GRX\\PainelKPISeara\\src\\api\\loginApi.js",["185"],"import axios from 'axios'\r\n\r\n// const instance = axios.create({\r\n//     baseURL: \"http://179.184.236.89\" //\"http://179.184.236.89\"\r\n// })\r\nconst instance = axios.create({\r\n    baseURL: \"https://localhost:44317/SearaDashboard\" //\"http://179.184.236.89\"\r\n})\r\n\r\nexport default {\r\n    post: (user) =>\r\n        instance({\r\n            method: \"POST\",\r\n            url: `/login`,\r\n            data: user,\r\n            transformResponse: [\r\n                function (data) {\r\n                    return data;\r\n                }\r\n            ]\r\n        }),\r\n}",{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":6,"column":8,"nodeType":"192","messageId":"193","endLine":6,"endColumn":17},{"ruleId":"190","severity":1,"message":"194","line":39,"column":11,"nodeType":"192","messageId":"193","endLine":39,"endColumn":29},{"ruleId":"190","severity":1,"message":"195","line":43,"column":12,"nodeType":"192","messageId":"193","endLine":43,"endColumn":27},{"ruleId":"190","severity":1,"message":"196","line":79,"column":11,"nodeType":"192","messageId":"193","endLine":79,"endColumn":20},{"ruleId":"190","severity":1,"message":"197","line":133,"column":11,"nodeType":"192","messageId":"193","endLine":133,"endColumn":22},{"ruleId":"190","severity":1,"message":"198","line":1,"column":17,"nodeType":"192","messageId":"193","endLine":1,"endColumn":25},{"ruleId":"190","severity":1,"message":"199","line":1,"column":27,"nodeType":"192","messageId":"193","endLine":1,"endColumn":36},{"ruleId":"190","severity":1,"message":"200","line":1,"column":38,"nodeType":"192","messageId":"193","endLine":1,"endColumn":44},{"ruleId":"190","severity":1,"message":"201","line":4,"column":8,"nodeType":"192","messageId":"193","endLine":4,"endColumn":23},{"ruleId":"190","severity":1,"message":"202","line":5,"column":10,"nodeType":"192","messageId":"193","endLine":5,"endColumn":16},{"ruleId":"190","severity":1,"message":"203","line":7,"column":10,"nodeType":"192","messageId":"193","endLine":7,"endColumn":19},{"ruleId":"190","severity":1,"message":"204","line":8,"column":10,"nodeType":"192","messageId":"193","endLine":8,"endColumn":18},{"ruleId":"190","severity":1,"message":"205","line":10,"column":8,"nodeType":"192","messageId":"193","endLine":10,"endColumn":13},{"ruleId":"190","severity":1,"message":"191","line":11,"column":8,"nodeType":"192","messageId":"193","endLine":11,"endColumn":17},{"ruleId":"190","severity":1,"message":"206","line":17,"column":10,"nodeType":"192","messageId":"193","endLine":17,"endColumn":21},{"ruleId":"190","severity":1,"message":"207","line":19,"column":10,"nodeType":"192","messageId":"193","endLine":19,"endColumn":16},{"ruleId":"190","severity":1,"message":"208","line":20,"column":10,"nodeType":"192","messageId":"193","endLine":20,"endColumn":18},{"ruleId":"190","severity":1,"message":"209","line":22,"column":8,"nodeType":"192","messageId":"193","endLine":22,"endColumn":18},{"ruleId":"190","severity":1,"message":"210","line":35,"column":18,"nodeType":"192","messageId":"193","endLine":35,"endColumn":28},{"ruleId":"190","severity":1,"message":"211","line":45,"column":10,"nodeType":"192","messageId":"193","endLine":45,"endColumn":31},{"ruleId":"190","severity":1,"message":"212","line":55,"column":5,"nodeType":"192","messageId":"193","endLine":55,"endColumn":9},{"ruleId":"213","severity":1,"message":"214","line":95,"column":8,"nodeType":"215","endLine":95,"endColumn":10,"suggestions":"216"},{"ruleId":"217","severity":1,"message":"218","line":131,"column":28,"nodeType":"219","messageId":"220","endLine":131,"endColumn":30},{"ruleId":"217","severity":1,"message":"218","line":133,"column":34,"nodeType":"219","messageId":"220","endLine":133,"endColumn":36},{"ruleId":"217","severity":1,"message":"218","line":135,"column":33,"nodeType":"219","messageId":"220","endLine":135,"endColumn":35},{"ruleId":"217","severity":1,"message":"218","line":137,"column":33,"nodeType":"219","messageId":"220","endLine":137,"endColumn":35},{"ruleId":"190","severity":1,"message":"221","line":296,"column":11,"nodeType":"192","messageId":"193","endLine":296,"endColumn":32},{"ruleId":"217","severity":1,"message":"218","line":381,"column":23,"nodeType":"219","messageId":"220","endLine":381,"endColumn":25},{"ruleId":"217","severity":1,"message":"218","line":422,"column":30,"nodeType":"219","messageId":"220","endLine":422,"endColumn":32},{"ruleId":"217","severity":1,"message":"218","line":464,"column":30,"nodeType":"219","messageId":"220","endLine":464,"endColumn":32},{"ruleId":"217","severity":1,"message":"218","line":506,"column":30,"nodeType":"219","messageId":"220","endLine":506,"endColumn":32},{"ruleId":"217","severity":1,"message":"218","line":548,"column":30,"nodeType":"219","messageId":"220","endLine":548,"endColumn":32},{"ruleId":"217","severity":1,"message":"218","line":590,"column":30,"nodeType":"219","messageId":"220","endLine":590,"endColumn":32},{"ruleId":"217","severity":1,"message":"218","line":632,"column":30,"nodeType":"219","messageId":"220","endLine":632,"endColumn":32},{"ruleId":"217","severity":1,"message":"218","line":674,"column":30,"nodeType":"219","messageId":"220","endLine":674,"endColumn":32},{"ruleId":"190","severity":1,"message":"222","line":721,"column":11,"nodeType":"192","messageId":"193","endLine":721,"endColumn":22},{"ruleId":"190","severity":1,"message":"196","line":725,"column":11,"nodeType":"192","messageId":"193","endLine":725,"endColumn":20},{"ruleId":"223","severity":1,"message":"224","line":17,"column":5,"nodeType":"225","messageId":"220","endLine":17,"endColumn":15},{"ruleId":"226","severity":1,"message":"227","line":214,"column":74,"nodeType":"228","endLine":214,"endColumn":85},{"ruleId":"190","severity":1,"message":"198","line":2,"column":17,"nodeType":"192","messageId":"193","endLine":2,"endColumn":25},{"ruleId":"190","severity":1,"message":"199","line":2,"column":27,"nodeType":"192","messageId":"193","endLine":2,"endColumn":36},{"ruleId":"190","severity":1,"message":"200","line":2,"column":38,"nodeType":"192","messageId":"193","endLine":2,"endColumn":44},{"ruleId":"190","severity":1,"message":"201","line":4,"column":8,"nodeType":"192","messageId":"193","endLine":4,"endColumn":23},{"ruleId":"190","severity":1,"message":"202","line":5,"column":10,"nodeType":"192","messageId":"193","endLine":5,"endColumn":16},{"ruleId":"190","severity":1,"message":"203","line":7,"column":10,"nodeType":"192","messageId":"193","endLine":7,"endColumn":19},{"ruleId":"190","severity":1,"message":"204","line":8,"column":10,"nodeType":"192","messageId":"193","endLine":8,"endColumn":18},{"ruleId":"190","severity":1,"message":"205","line":10,"column":8,"nodeType":"192","messageId":"193","endLine":10,"endColumn":13},{"ruleId":"190","severity":1,"message":"191","line":11,"column":8,"nodeType":"192","messageId":"193","endLine":11,"endColumn":17},{"ruleId":"190","severity":1,"message":"206","line":17,"column":10,"nodeType":"192","messageId":"193","endLine":17,"endColumn":21},{"ruleId":"190","severity":1,"message":"207","line":19,"column":10,"nodeType":"192","messageId":"193","endLine":19,"endColumn":16},{"ruleId":"190","severity":1,"message":"208","line":20,"column":10,"nodeType":"192","messageId":"193","endLine":20,"endColumn":18},{"ruleId":"190","severity":1,"message":"209","line":22,"column":8,"nodeType":"192","messageId":"193","endLine":22,"endColumn":18},{"ruleId":"190","severity":1,"message":"229","line":35,"column":10,"nodeType":"192","messageId":"193","endLine":35,"endColumn":16},{"ruleId":"190","severity":1,"message":"210","line":35,"column":18,"nodeType":"192","messageId":"193","endLine":35,"endColumn":28},{"ruleId":"190","severity":1,"message":"230","line":37,"column":5,"nodeType":"192","messageId":"193","endLine":37,"endColumn":41},{"ruleId":"190","severity":1,"message":"231","line":38,"column":5,"nodeType":"192","messageId":"193","endLine":38,"endColumn":21},{"ruleId":"190","severity":1,"message":"232","line":39,"column":5,"nodeType":"192","messageId":"193","endLine":39,"endColumn":20},{"ruleId":"190","severity":1,"message":"233","line":40,"column":5,"nodeType":"192","messageId":"193","endLine":40,"endColumn":21},{"ruleId":"190","severity":1,"message":"234","line":41,"column":5,"nodeType":"192","messageId":"193","endLine":41,"endColumn":18},{"ruleId":"190","severity":1,"message":"211","line":45,"column":10,"nodeType":"192","messageId":"193","endLine":45,"endColumn":31},{"ruleId":"190","severity":1,"message":"212","line":55,"column":5,"nodeType":"192","messageId":"193","endLine":55,"endColumn":9},{"ruleId":"217","severity":1,"message":"218","line":79,"column":34,"nodeType":"219","messageId":"220","endLine":79,"endColumn":36},{"ruleId":"190","severity":1,"message":"235","line":122,"column":10,"nodeType":"192","messageId":"193","endLine":122,"endColumn":23},{"ruleId":"190","severity":1,"message":"236","line":122,"column":25,"nodeType":"192","messageId":"193","endLine":122,"endColumn":41},{"ruleId":"213","severity":1,"message":"237","line":143,"column":8,"nodeType":"215","endLine":143,"endColumn":10,"suggestions":"238"},{"ruleId":"217","severity":1,"message":"218","line":323,"column":28,"nodeType":"219","messageId":"220","endLine":323,"endColumn":30},{"ruleId":"217","severity":1,"message":"218","line":325,"column":34,"nodeType":"219","messageId":"220","endLine":325,"endColumn":36},{"ruleId":"217","severity":1,"message":"218","line":327,"column":33,"nodeType":"219","messageId":"220","endLine":327,"endColumn":35},{"ruleId":"217","severity":1,"message":"218","line":329,"column":33,"nodeType":"219","messageId":"220","endLine":329,"endColumn":35},{"ruleId":"190","severity":1,"message":"239","line":466,"column":13,"nodeType":"192","messageId":"193","endLine":466,"endColumn":20},{"ruleId":"240","severity":1,"message":"241","line":490,"column":55,"nodeType":"219","messageId":"242","endLine":490,"endColumn":60},{"ruleId":"190","severity":1,"message":"243","line":585,"column":11,"nodeType":"192","messageId":"193","endLine":585,"endColumn":31},{"ruleId":"190","severity":1,"message":"244","line":620,"column":13,"nodeType":"192","messageId":"193","endLine":620,"endColumn":21},{"ruleId":"190","severity":1,"message":"245","line":621,"column":13,"nodeType":"192","messageId":"193","endLine":621,"endColumn":23},{"ruleId":"190","severity":1,"message":"222","line":633,"column":11,"nodeType":"192","messageId":"193","endLine":633,"endColumn":22},{"ruleId":"190","severity":1,"message":"196","line":637,"column":11,"nodeType":"192","messageId":"193","endLine":637,"endColumn":20},{"ruleId":"226","severity":1,"message":"227","line":25,"column":32,"nodeType":"228","endLine":25,"endColumn":79},{"ruleId":"226","severity":1,"message":"227","line":30,"column":21,"nodeType":"228","endLine":30,"endColumn":107},{"ruleId":"190","severity":1,"message":"230","line":3,"column":5,"nodeType":"192","messageId":"193","endLine":3,"endColumn":41},{"ruleId":"190","severity":1,"message":"231","line":4,"column":5,"nodeType":"192","messageId":"193","endLine":4,"endColumn":21},{"ruleId":"190","severity":1,"message":"232","line":5,"column":5,"nodeType":"192","messageId":"193","endLine":5,"endColumn":20},{"ruleId":"190","severity":1,"message":"233","line":6,"column":5,"nodeType":"192","messageId":"193","endLine":6,"endColumn":21},{"ruleId":"190","severity":1,"message":"234","line":7,"column":5,"nodeType":"192","messageId":"193","endLine":7,"endColumn":18},{"ruleId":"190","severity":1,"message":"246","line":8,"column":5,"nodeType":"192","messageId":"193","endLine":8,"endColumn":24},{"ruleId":"190","severity":1,"message":"229","line":10,"column":10,"nodeType":"192","messageId":"193","endLine":10,"endColumn":16},{"ruleId":"247","severity":1,"message":"248","line":19,"column":1,"nodeType":"249","endLine":184,"endColumn":2},{"ruleId":"247","severity":1,"message":"248","line":10,"column":1,"nodeType":"249","endLine":34,"endColumn":2},{"ruleId":"190","severity":1,"message":"203","line":7,"column":10,"nodeType":"192","messageId":"193","endLine":7,"endColumn":19},{"ruleId":"247","severity":1,"message":"248","line":10,"column":1,"nodeType":"249","endLine":22,"endColumn":2},"no-native-reassign",["250"],"no-negated-in-lhs",["251"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'userKpiDigitalTemp' is assigned a value but never used.","'isAuthenticated' is assigned a value but never used.","'showError' is assigned a value but never used.","'loginfooter' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'ChartDataLabels' is defined but never used.","'Button' is defined but never used.","'InputText' is defined but never used.","'Password' is defined but never used.","'axios' is defined but never used.","'ColumnGroup' is defined but never used.","'Ripple' is defined but never used.","'Dropdown' is defined but never used.","'classNames' is defined but never used.","'colorsBars' is defined but never used.","'LoadingSkeletonSquare' is defined but never used.","'cors' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'GraficoCE_Total', 'GraficoNNCLog_Total', 'GraficoNNCMP_Total', 'GraficoRAC_Aves', 'GraficoRAC_Outros', 'GraficoRAC_Preparados', 'GraficoRAC_Suinos', and 'GraficoRAC_Total'. Either include them or remove the dependency array.","ArrayExpression",["252"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'DataTableColGroupDemo' is assigned a value but never used.","'showSuccess' is assigned a value but never used.","no-dupe-keys","Duplicate key 'SelectRole'.","ObjectExpression","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'months' is defined but never used.","'SetDateInJsonArrayToQueryOverObjects' is defined but never used.","'SetParamsToQuery' is defined but never used.","'AddLineMockData' is defined but never used.","'AddDataByFilters' is defined but never used.","'GetIndicators' is defined but never used.","'responseTable' is assigned a value but never used.","'setresponseTable' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'GraficoCETotal', 'GraficoCETotalAvesPesadas', 'GraficoNCCMP', 'GraficoNCCMPAvesPesadas', 'GraficoNNCMPTotalCE', 'GraficoNNCMPTotalCEAvesPesadas', 'GraficoRAC', 'GraficoRACAvesPesadas', 'GraficoRACTotalCE', 'GraficoRACTotalCEAvesPesadas', 'Grafico_5', and 'chamarAPI'. Either include them or remove the dependency array.",["253"],"'groupBy' is assigned a value but never used.","no-self-compare","Comparing to itself is potentially pointless.","comparingToSelf","'buscarTabelaRACUnico' is assigned a value but never used.","'datasets' is assigned a value but never used.","'indicators' is assigned a value but never used.","'AddItensToJsonArray' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},"Update the dependencies array to be: [GraficoCE_Total, GraficoNNCLog_Total, GraficoNNCMP_Total, GraficoRAC_Aves, GraficoRAC_Outros, GraficoRAC_Preparados, GraficoRAC_Suinos, GraficoRAC_Total]",{"range":"258","text":"259"},"Update the dependencies array to be: [GraficoCETotal, GraficoCETotalAvesPesadas, GraficoNCCMP, GraficoNCCMPAvesPesadas, GraficoNNCMPTotalCE, GraficoNNCMPTotalCEAvesPesadas, GraficoRAC, GraficoRACAvesPesadas, GraficoRACTotalCE, GraficoRACTotalCEAvesPesadas, Grafico_5, chamarAPI]",{"range":"260","text":"261"},[3850,3852],"[GraficoCE_Total, GraficoNNCLog_Total, GraficoNNCMP_Total, GraficoRAC_Aves, GraficoRAC_Outros, GraficoRAC_Preparados, GraficoRAC_Suinos, GraficoRAC_Total]",[6593,6595],"[GraficoCETotal, GraficoCETotalAvesPesadas, GraficoNCCMP, GraficoNCCMPAvesPesadas, GraficoNNCMPTotalCE, GraficoNNCMPTotalCEAvesPesadas, GraficoRAC, GraficoRACAvesPesadas, GraficoRACTotalCE, GraficoRACTotalCEAvesPesadas, Grafico_5, chamarAPI]"]