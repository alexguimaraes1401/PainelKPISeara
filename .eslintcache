[{"D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\index.js":"1","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\App.js":"2","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\api\\api.js":"3","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\reportWebVitals.js":"4","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\Sidebar.js":"5","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\views\\questions.js":"6"},{"size":525,"mtime":1612585501223,"results":"7","hashOfConfig":"8"},{"size":23358,"mtime":1614124776594,"results":"9","hashOfConfig":"8"},{"size":5633,"mtime":1613841486599,"results":"10","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"8"},{"size":0,"mtime":1612611713525,"results":"12","hashOfConfig":"13"},{"size":256,"mtime":1613836697833,"results":"14","hashOfConfig":"13"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"kz50tk",{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16g7jkb",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\index.js",[],["29","30"],"D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\App.js",["31","32","33"],"D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\api\\api.js",["34","35"],"import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://179.184.236.89\"\r\n})\r\n\r\nconst colorsMockLine = [\r\n    '#42A5F5'\r\n]\r\n\r\nconst colorsBars = [\r\n    '#66BB6A',\r\n    '#FFA726',\r\n    '#03a9f4'\r\n]\r\n\r\nconst months = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\"\r\n]\r\n\r\nexport default {\r\n\r\n    getSearaBaseRacBar: () =>\r\n        instance({\r\n            method: \"GET\",\r\n            url: \"/Seara/Service/Api/BaseRac\",\r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n\r\n                    return data;\r\n                    // // Do whatever you want to transform the data\r\n                    // let json = JSON.parse(data)\r\n                    // let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                    // AddItensToJsonArray(json, 100000, \"bar\")\r\n\r\n                    // console.time(\"ProcessResponseBarChart\")\r\n                    // let datasets = [];\r\n                    // let { dateField, field, ano } = SetParamsToQuery();\r\n                    \r\n                    // SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                    // let problemas = GetIndicators(json, field);\r\n                    // AddLineMockData(datasets);\r\n                    // AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                    // console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                    // return {\r\n                    //     labels: months,\r\n                    //     datasets: datasets,\r\n                    //     indicators\r\n                    // };\r\n                }\r\n            ]\r\n        }),\r\n\r\n    getSearaBaseRacLine: () =>\r\n        instance({\r\n            method: \"GET\",\r\n            url: \"/Seara/Service/Api/BaseRac\",\r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n                    // Do whatever you want to transform the data\r\n                    let json = JSON.parse(data)\r\n                    console.log(json)\r\n                    let indicators = Object.keys(json[0]).map(key => key);\r\n                    AddItensToJsonArray(json, 100000, \"line\")\r\n\r\n                    console.time(\"ProcessResponseLineChart\")\r\n                    let datasets = []\r\n                    let { dateField, field, ano } = SetParamsToQuery()\r\n                    SetDateInJsonArrayToQueryOverObjects(json, dateField)\r\n                    let problemas = GetIndicators(json, field)\r\n                    AddLineMockData(datasets)\r\n                    AddDataByFilters(problemas, json, ano, field, datasets, \"line\")\r\n                    console.timeEnd(\"ProcessResponseLineChart\")\r\n                    return {\r\n                        labels: months,\r\n                        datasets: datasets,\r\n                        indicators\r\n                    }\r\n\r\n                }\r\n            ]\r\n        })\r\n}\r\n\r\nfunction AddItensToJsonArray(json, size, typechart) {\r\n    console.time(\"AddItensToJsonArray\" + typechart)\r\n    const start = (Math.random(0, json.length) - 1)\r\n    const limit = json.length\r\n    let batch = Object.assign([], json.slice(start, limit));\r\n    while (json.length < size) {\r\n        batch.forEach(element => {\r\n            json.push(element)\r\n        });\r\n    }\r\n    console.timeEnd(\"AddItensToJsonArray\" + typechart)\r\n    console.log(\"json.length: \" + json.length)\r\n}\r\n\r\nfunction GetIndicators(json, field) {\r\n    return [...new Set(json.map(item => item[field]))].slice(0, 3);\r\n}\r\n\r\nfunction AddDataByFilters(problemas, json, ano, field, datasets, type) {\r\n    problemas.forEach((element, i) => {\r\n        let data = months.map((mes, index) => json\r\n            .filter(r => r.year !== undefined && r.year === ano\r\n                && r.mes !== undefined && r.mes === mes\r\n                && r[field] !== undefined && r[field] === element)\r\n            .length\r\n        );\r\n        if (type === \"line\") {\r\n            datasets.push({\r\n                type: type,\r\n                label: element,\r\n                borderColor: colorsBars[i],\r\n                backgroundColor: \"white\",\r\n                data: data,\r\n                fill: false,\r\n                // borderColor: \"white\",\r\n                borderWidth: 2\r\n            });\r\n        } else {\r\n            datasets.push({\r\n                type: type,\r\n                label: element,\r\n                backgroundColor: colorsBars[i],\r\n                data: data,\r\n                fill: false,\r\n                borderColor: \"white\",\r\n                borderWidth: 2\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nfunction AddLineMockData(datasets) {\r\n    datasets.push({\r\n        type: \"line\",\r\n        label: \"Dataset 1\",\r\n        borderColor: 'red',\r\n        backgroundColor: '#edc4c736',\r\n        borderWidth: 2,\r\n        fill: true,\r\n        borderDash: [5, 5],\r\n        data: [150, 125, 112, 148, 146, 346, 232, 210, 330, 320, 25, 340, 135]\r\n    });\r\n}\r\n\r\nfunction SetParamsToQuery() {\r\n    const ano = \"2020\";\r\n    const dateField = \"Data Fab.\";\r\n    const field = \"Problema\";\r\n    return { dateField, field, ano };\r\n}\r\n\r\nfunction SetDateInJsonArrayToQueryOverObjects(json, dateField) {\r\n    json.forEach(r => {\r\n        let abc = r[dateField].replace(\" 00:00:00\", \"\").split(\"/\");\r\n        r['day'] = abc[0];\r\n        r['month'] = abc[1];\r\n        r['mes'] = months[(Math.floor(abc[1] - 1))];\r\n        r['year'] = abc[2];\r\n    });\r\n}","D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\reportWebVitals.js",[],"D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\Sidebar.js",[],"D:\\RepoCelsoGea\\kpi-digital\\kpi-digital\\src\\views\\questions.js",["36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":20,"column":8,"nodeType":"43","messageId":"44","endLine":20,"endColumn":17},{"ruleId":"45","severity":1,"message":"46","line":429,"column":36,"nodeType":"47","endLine":429,"endColumn":48},{"ruleId":"45","severity":1,"message":"46","line":434,"column":25,"nodeType":"47","endLine":434,"endColumn":71},{"ruleId":"41","severity":1,"message":"48","line":7,"column":7,"nodeType":"43","messageId":"44","endLine":7,"endColumn":21},{"ruleId":"49","severity":1,"message":"50","line":32,"column":1,"nodeType":"51","endLine":102,"endColumn":2},{"ruleId":"41","severity":1,"message":"52","line":1,"column":17,"nodeType":"43","messageId":"44","endLine":1,"endColumn":26},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'loginLogo' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'colorsMockLine' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Component' is defined but never used.","no-global-assign","no-unsafe-negation"]