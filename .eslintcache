[{"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\index.js":"1","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\App.js":"2","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\reportWebVitals.js":"3","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\api\\api.js":"4","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\domain\\constants.js":"5","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\components\\skeletons.js":"6","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\domain\\kpiservice.js":"7","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\components\\navbarMobile.js":"8","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\components\\sidebarDesktop.js":"9","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\components\\navbarDesktop.js":"10","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\contactUs.js":"11","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\dashViewAbsorcao.js":"12","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\notFoundPage.js":"13","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\home.js":"14"},{"size":538,"mtime":1615291765865,"results":"15","hashOfConfig":"16"},{"size":5364,"mtime":1615928953578,"results":"17","hashOfConfig":"16"},{"size":375,"mtime":1615291765866,"results":"18","hashOfConfig":"16"},{"size":2061,"mtime":1615930386660,"results":"19","hashOfConfig":"16"},{"size":4002,"mtime":1615928953586,"results":"20","hashOfConfig":"16"},{"size":2288,"mtime":1615291765854,"results":"21","hashOfConfig":"16"},{"size":2710,"mtime":1616266565373,"results":"22","hashOfConfig":"16"},{"size":1824,"mtime":1615291765851,"results":"23","hashOfConfig":"16"},{"size":835,"mtime":1615291765852,"results":"24","hashOfConfig":"16"},{"size":1596,"mtime":1615395366826,"results":"25","hashOfConfig":"16"},{"size":580,"mtime":1615928953591,"results":"26","hashOfConfig":"16"},{"size":197,"mtime":1615928953593,"results":"27","hashOfConfig":"16"},{"size":376,"mtime":1615928953599,"results":"28","hashOfConfig":"16"},{"size":26231,"mtime":1615930304895,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"18gn22y",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\index.js",[],["64","65"],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\App.js",["66"],"import React, { Suspense, lazy } from 'react';\r\nimport { Button } from 'primereact/button';\r\nimport { Card } from 'primereact/card';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Password } from 'primereact/password';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\n// Grab components out of the ReactRouterDOM that we will be using\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\n\r\nimport 'react-pro-sidebar/dist/css/styles.css';\r\nimport './index.css';\r\nimport './css/sidebar-desktop.css';\r\nimport './css/login.css';\r\nimport './css/charts.css';\r\nimport 'primereact/resources/themes/saga-blue/theme.css'\r\nimport 'primereact/resources/primereact.min.css'\r\nimport 'primeicons/primeicons.css'\r\n\r\nimport NavbarMobile from './components/navbarMobile';\r\nimport NavbarDesktop from './components/navbarDesktop';\r\nimport SidebarDesktop from './components/sidebarDesktop';\r\nimport { Toast } from 'primereact/toast';\r\n\r\nconst ContactUs = lazy(() => import(\"./views/contactUs\"));\r\nconst NotFoundPage = lazy(() => import(\"./views/notFoundPage\"));\r\nconst DashViewAbsorcao = lazy(() => import(\"./views/dashViewAbsorcao\"));\r\nconst Home = lazy(() => import(\"./views/home\"));\r\n\r\nfunction App() {\r\n    const userKpiDigitalTemp = { name: 'admin', pass: 'admin' }\r\n    const [username, setUsername] = React.useState(\"\");\r\n    const [password, setPassword] = React.useState(\"\");\r\n    const [user, setUser] = React.useState();\r\n    const toast = React.useRef(null);\r\n    const [isAuthenticated, setIsAuthenticated] = React.useState(false);\r\n    \r\n    const handleLogin = (e) => {\r\n        if (username.toLocaleLowerCase() === userKpiDigitalTemp.name.toLocaleLowerCase() && password === userKpiDigitalTemp.pass) {\r\n            setUser({ name: username, pass: password });\r\n            localStorage.setItem('user', JSON.stringify({ name: username }));\r\n            setIsAuthenticated(true);\r\n        }\r\n    }\r\n\r\n    const handleLogout = (e) => {\r\n        setUser({});\r\n        setUsername(\"\");\r\n        setPassword(\"\");\r\n        localStorage.clear();\r\n        window.location.reload(false);\r\n        setIsAuthenticated(false);\r\n    };\r\n\r\n    //Handlers\r\n    React.useEffect(() => {\r\n        const loggedInUser = localStorage.getItem(\"user\");\r\n        if (loggedInUser) {\r\n            const foundUser = JSON.parse(loggedInUser);\r\n            setUser(foundUser);\r\n\r\n        }\r\n    }, []);\r\n\r\n\r\n    /* Local Componentes */\r\n    const Login = () => {\r\n        const loginfooter = <span>\r\n            <Button label=\"Entrar\" onClick={(e) => handleLogin(e.target.value)} style={{ width: '100%', marginRight: '.25em' }} />\r\n        </span>;\r\n        return (\r\n            <div className=\"global-container\">\r\n                <div className=\"card login-form\">\r\n                    <Card title=\"Bem vindo\" subTitle=\"faça o login para acessar o sistema\" className=\"card-body\" footer={loginfooter} >\r\n                        <div className=\"pt-4 p-field p-grid\">\r\n                            <span className=\"p-float-label\">\r\n                                <InputText id=\"username\" style={{ width: '100%' }} value={username} onChange={(e) => setUsername(e.target.value)} />\r\n                                <label htmlFor=\"username\">Usuário</label>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"pt-4 p-field p-grid\">\r\n                            <span className=\"p-float-label\">\r\n                                <Password value={password} style={{ width: '100%' }} onChange={(e) => setPassword(e.target.value)} feedback={false} toggleMask />\r\n                                <label htmlFor=\"in\">Senha</label>\r\n                            </span>\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const Layout = ({ children }) => {\r\n        return (\r\n            <Container fluid>\r\n                <NavbarMobile username={user.name} handleLogout={handleLogout} />\r\n                <NavbarDesktop username={user.name} handleLogout={handleLogout} />\r\n                <SidebarDesktop />\r\n                <Toast ref={toast} position=\"bottom-right\"></Toast>\r\n                <div className=\"main-content\">\r\n                    {children}\r\n                </div>\r\n            </Container>\r\n        );\r\n    };\r\n\r\n    const ChangePageLoader = () => {\r\n        return (\r\n            <ProgressSpinner style={{ width: '50px', height: '50px' }} strokeWidth=\"8\" fill=\"#EEEEEE\" animationDuration=\".5s\" />\r\n        )\r\n    }\r\n\r\n    /* Se nao esta logado exibe tela de login: */\r\n    if (!user) {\r\n        return (\r\n            <Login />\r\n        )\r\n    }\r\n\r\n    /*Exibe paginas no Router*/\r\n    return (\r\n        <Router>\r\n            <Suspense fallback={<ChangePageLoader />}>\r\n                <Layout>\r\n                    <Switch>\r\n                        <Route exact path='/' component={Home} />\r\n                        <Route path='/contact' component={ContactUs} />\r\n                        <Route path='/absorcao' component={DashViewAbsorcao} />\r\n                        <Route path='*' component={NotFoundPage} />\r\n                    </Switch>\r\n                </Layout>\r\n            </Suspense>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App;","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\reportWebVitals.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\api\\api.js",["67","68"],"import axios from 'axios'\r\nimport {\r\n    SetDateInJsonArrayToQueryOverObjects,\r\n    SetParamsToQuery,\r\n    AddLineMockData,\r\n    AddDataByFilters,\r\n    GetIndicators,\r\n    AddItensToJsonArray,\r\n} from '../domain/kpiservice'\r\nimport { months } from '../domain/constants'\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://localhost\" //\"http://179.184.236.89/Seara\"\r\n})\r\n\r\n\r\n\r\nexport default {\r\n\r\n    getSearaBaseRacBar: (params) =>\r\n        instance({\r\n            method: \"GET\",\r\n            url: `/SearaDashboard/Api/BaseRac?data=${params[0]}&nome=${params[1]}`,\r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n                    return data;\r\n                }\r\n            ]\r\n        }),\r\n\r\n    getSearaBaseRacLine: () =>\r\n        instance({\r\n            method: \"GET\",\r\n            url: `/SearaDashboard/Api/BaseRac`,\r\n            params: {\r\n                datatype: \"json\"\r\n            },\r\n            transformResponse: [\r\n                function (data) {\r\n                    // Do whatever you want to transform the data\r\n                    let json = JSON.parse(data)\r\n                    let indicators = Object.keys(json[0]).map(key => key);\r\n                    //AddItensToJsonArray(json, 100000, \"line\")\r\n\r\n                    console.time(\"ProcessResponseLineChart\")\r\n                    let datasets = []\r\n                    let { dateField, field, ano } = SetParamsToQuery()\r\n                    SetDateInJsonArrayToQueryOverObjects(json, dateField)\r\n                    let problemas = GetIndicators(json, field)\r\n                    AddLineMockData(datasets)\r\n                    AddDataByFilters(problemas, json, ano, field, datasets, \"line\")\r\n                    console.timeEnd(\"ProcessResponseLineChart\")\r\n                    return {\r\n                        labels: months,\r\n                        datasets: datasets,\r\n                        indicators\r\n                    }\r\n\r\n                }\r\n            ]\r\n        })\r\n}\r\n",["69","70"],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\domain\\constants.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\components\\skeletons.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\domain\\kpiservice.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\components\\navbarMobile.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\components\\sidebarDesktop.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\components\\navbarDesktop.js",["71","72"],"import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\nconst NavbarDesktop = (props) => {\r\n\r\n    const capitalize = (str) => {\r\n        return str.charAt(0).toUpperCase() + str.slice(1);\r\n    }\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\" className=\"navbar-desk\" >\r\n            <Navbar.Brand href=\"#home\">\r\n                <img\r\n                    alt=\"\"\r\n                    src=\"https://logodownload.org/wp-content/uploads/2014/12/seara-logo-1-1.png\"\r\n                    //width=\"30\"\r\n                    height=\"30\"\r\n                    className=\"d-inline-block align-top\"\r\n                />{' '}\r\n                Painel de KPIs\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle />\r\n            <Navbar.Collapse className=\"justify-content-end\">\r\n                <Navbar.Text>\r\n                    Bem-vindo: <a href=\"#\" style={{ textDecoration: 'none' }}>{capitalize(props.username)}</a>\r\n                </Navbar.Text>\r\n                &nbsp;\r\n                &nbsp;\r\n                <Navbar.Text>\r\n                    <a href=\"#\" style={{ textDecoration: 'none' }} onClick={(e) => props.handleLogout(e)}>\r\n                        <span style={{ cursor: 'pointer', color: 'rgb(255 255 255 / 50%)' }}>\r\n                            Sair &nbsp;\r\n                            <i style={{ cursor: 'pointer', color: '#fff' }} className=\"pi pi-sign-out\"></i>\r\n                        </span>\r\n                    </a>\r\n                </Navbar.Text>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default NavbarDesktop;","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\contactUs.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\dashViewAbsorcao.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\notFoundPage.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\home.js",["73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89"],"import React, { useState, useEffect } from 'react';\r\nimport { Chart } from 'primereact/chart';\r\nimport { Button } from 'primereact/button';\r\nimport { Card } from 'primereact/card';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Password } from 'primereact/password';\r\nimport api from '../api/api'\r\nimport axios from 'axios';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { ColumnGroup } from 'primereact/columngroup';\r\n\r\nimport { Ripple } from 'primereact/ripple';\r\nimport { Dropdown } from 'primereact/dropdown';\r\n\r\nimport classNames from 'classnames';\r\n\r\n\r\nimport 'react-pro-sidebar/dist/css/styles.css';\r\nimport '../index.css';\r\nimport '../css/sidebar-desktop.css';\r\nimport '../css/login.css';\r\nimport '../css/charts.css';\r\nimport 'primereact/resources/themes/saga-blue/theme.css'\r\nimport 'primereact/resources/primereact.min.css'\r\nimport 'primeicons/primeicons.css'\r\n\r\nimport { ProgressBar } from 'primereact/progressbar';\r\nimport { months, colorsBars, lightOptions } from '../domain/constants';\r\nimport {\r\n    SetDateInJsonArrayToQueryOverObjects,\r\n    SetParamsToQuery,\r\n    AddLineMockData,\r\n    AddDataByFilters,\r\n    GetIndicators\r\n} from '../domain/kpiservice';\r\n\r\n\r\nimport { LoadingSkeletonSquare, LoadingSkeletonCard } from '../components/skeletons';\r\n\r\nvar cors = require('cors'); // Already done “npm i cors --save-dev”\r\n\r\nfunction Home() {\r\n\r\n    let [responseDataLineChart, setResponseDataLineChart] = React.useState({})\r\n    let [responseDataBarChart, setResponseDataBarChart] = React.useState({})\r\n\r\n    const [crudeJsonResponseDataBarChart, setCrudeJsonResponseDataBarChart] = React.useState()\r\n    const [indicator1, setIndicator1] = React.useState([\"Select...\"])\r\n    const [indicator2, setIndicator2] = React.useState([\"Select...\"])\r\n    const [indicator3, setIndicator3] = React.useState([\"Select...\"])\r\n\r\n    const [indicator4, setIndicator4] = React.useState([\"Select...\"])\r\n    const [indicator5, setIndicator5] = React.useState([\"Select...\"])\r\n    const [indicator6, setIndicator6] = React.useState([\"Select...\"])\r\n\r\n    const AddIndicator1 = indicator1.map(Add => Add)\r\n    const AddIndicator2 = indicator2.map(Add => Add)\r\n    const AddIndicator3 = indicator3.map(Add => Add)\r\n\r\n    const AddIndicator4 = indicator4.map(Add => Add)\r\n    const AddIndicator5 = indicator5.map(Add => Add)\r\n    const AddIndicator6 = indicator6.map(Add => Add)\r\n\r\n    const [selectedIndicator3, setSelectedIndicator3] = React.useState([])\r\n    const [selectedIndicator1, setSelectedIndicator1] = React.useState('')\r\n    const [selectedIndicator2, setSelectedIndicator2] = React.useState('')\r\n\r\n    const [selectedIndicator4, setSelectedIndicator4] = React.useState([])\r\n    const [selectedIndicator5, setSelectedIndicator5] = React.useState('')\r\n    const [selectedIndicator6, setSelectedIndicator6] = React.useState('')\r\n\r\n    const [isUpdatingData, setIsUpdatingData] = React.useState(false)\r\n    const toast = React.useRef(null);\r\n\r\n    //Handlers\r\n    React.useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    const handleIndicator1TypeChange = (e) => {\r\n        console.clear()\r\n        setSelectedIndicator1(indicator1[e.target.value])\r\n        setSelectedIndicator3([])\r\n        setIndicator3([\"Selecione...\"])\r\n    }\r\n\r\n    const handleIndicator2TypeChange = (e) => {\r\n        console.clear()\r\n        setSelectedIndicator2(indicator2[e.target.value])\r\n        let json = crudeJsonResponseDataBarChart\r\n\r\n        let groupBy = function groupBy(list, keyGetter) {\r\n            const map = new Map();\r\n            list.forEach((item) => {\r\n                const key = keyGetter(item);\r\n                const collection = map.get(key);\r\n                if (!collection) {\r\n                    map.set(key, [item]);\r\n                } else {\r\n                    collection.push(item);\r\n                }\r\n            });\r\n            return map;\r\n        }\r\n        let yaxis = Array.from(groupBy(json, x => x[indicator2[e.target.value]]), ([name, value]) => ({ name }));\r\n        setSelectedIndicator3([])\r\n        setIndicator3(yaxis.filter(r => r.name !== \"\").map(r => r.name))\r\n    }\r\n\r\n    const handleIndicator3TypeChange = (e) => {\r\n        console.clear()\r\n        let indicators = selectedIndicator3\r\n        indicators.push(indicator3[e.target.value])\r\n        setSelectedIndicator3(indicators)\r\n    }\r\n\r\n    const handleCheckboxChangeIndicator3 = event => {\r\n        console.clear()\r\n        let indicators = selectedIndicator3\r\n        if (event.target.checked) {\r\n            indicators.push(event.target.value)\r\n        }\r\n        else {\r\n            const index = indicators.indexOf(event.target.value)\r\n            if (index > -1) {\r\n                indicators.splice(index, 1)\r\n            }\r\n        }\r\n        setSelectedIndicator3(indicators)\r\n        aplicar();\r\n    };\r\n\r\n\r\n    const handleIndicator4TypeChange = (e) => {\r\n        console.clear()\r\n        setSelectedIndicator4(indicator1[e.target.value])\r\n        setSelectedIndicator6([])\r\n        setIndicator6([\"Selecione...\"])\r\n    }\r\n\r\n    const handleIndicator5TypeChange = (e) => {\r\n        console.clear()\r\n        setSelectedIndicator5(indicator2[e.target.value])\r\n        let json = crudeJsonResponseDataBarChart\r\n\r\n        let groupBy = function groupBy(list, keyGetter) {\r\n            const map = new Map();\r\n            list.forEach((item) => {\r\n                const key = keyGetter(item);\r\n                const collection = map.get(key);\r\n                if (!collection) {\r\n                    map.set(key, [item]);\r\n                } else {\r\n                    collection.push(item);\r\n                }\r\n            });\r\n            return map;\r\n        }\r\n        let yaxis = Array.from(groupBy(json, x => x[indicator5[e.target.value]]), ([name, value]) => ({ name }));\r\n        setSelectedIndicator6([])\r\n        setIndicator6(yaxis.filter(r => r.name !== \"\").map(r => r.name))\r\n    }\r\n\r\n    const handleIndicator6TypeChange = (e) => {\r\n        console.clear()\r\n        let indicators = selectedIndicator6\r\n        indicators.push(indicator6[e.target.value])\r\n        setSelectedIndicator6(indicators)\r\n    }\r\n\r\n    const handleCheckboxChangeIndicator6 = event => {\r\n        console.clear()\r\n        let indicators = selectedIndicator6\r\n        if (event.target.checked) {\r\n            indicators.push(event.target.value)\r\n        }\r\n        else {\r\n            const index = indicators.indexOf(event.target.value)\r\n            if (index > -1) {\r\n                indicators.splice(index, 1)\r\n            }\r\n        }\r\n        setSelectedIndicator6(indicators)\r\n        aplicar();\r\n    };\r\n\r\n\r\n    const somaX = function (vetor, name, campoName, valor) {\r\n        let soma = 0\r\n        vetor.value.forEach((element, i) => {\r\n            if (element.[campoName] == name)\r\n                soma += parseInt(element.[valor])\r\n        });\r\n        return soma\r\n\r\n    }\r\n\r\n    const fetchDataLocal = () => {\r\n        //debugger\r\n        if (selectedIndicator1 !== \"\" && selectedIndicator2 !== \"\" && selectedIndicator3 !== \"\") {\r\n            setIsUpdatingData(true)\r\n            let json = crudeJsonResponseDataBarChart\r\n            let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n            let groupBy = function groupBy(list, keyGetter) {\r\n                const map = new Map();\r\n                list.forEach((item) => {\r\n                    const key = keyGetter(item);\r\n                    const collection = map.get(key);\r\n                    if (!collection) {\r\n                        map.set(key, [item]);\r\n                    } else {\r\n                        collection.push(item);\r\n                    }\r\n                });\r\n                return map;\r\n            }\r\n\r\n            let xaxis = Array.from(groupBy(json, x => x[selectedIndicator1]), ([name, value]) => ({ name, value }));\r\n            let yaxis = Array.from(groupBy(json, x => x[selectedIndicator2]), ([name, value]) => ({ name }));\r\n\r\n            xaxis.sort(function (a, b) {\r\n                return parseFloat(a.name) - parseFloat(b.name);\r\n            });\r\n\r\n            xaxis.forEach(x => {\r\n\r\n\r\n                x['yaxis'] = Array.from(groupBy(x.value, x => x[selectedIndicator2]), ([name, value]) => ({ name, quantidade: somaX(x, name, selectedIndicator2, \"Quant\") }));\r\n            })\r\n\r\n            let series = []\r\n            yaxis.forEach((y, index) => {\r\n                let dataset = xaxis.map(xx => {\r\n                    let yaxysvalue = xx.yaxis.filter(r => r.name === y.name);\r\n                    if (yaxysvalue.length)\r\n                        return yaxysvalue[0].quantidade\r\n\r\n                    return 0\r\n                })\r\n\r\n                let cor = colorsBars[Math.floor(Math.random() * colorsBars.length)]\r\n\r\n                let serie = {\r\n                    type: \"line\",\r\n                    label: y.name,\r\n                    backgroundColor: cor,\r\n                    fill: false,\r\n                    borderColor: cor,\r\n                    borderWidth: 2,\r\n                    data: dataset,\r\n                }\r\n                series.push(serie)\r\n            })\r\n\r\n            let seriesAdd = []\r\n            if (selectedIndicator3.length == 0) {\r\n                series.filter(s => s.label != null).forEach(element => {\r\n                    seriesAdd.push(element)\r\n                });\r\n            } else {\r\n                selectedIndicator3.forEach(indicator => {\r\n                    series.filter(s => s.label === indicator).forEach(element => {\r\n                        seriesAdd.push(element)\r\n                    });\r\n                });\r\n            }\r\n\r\n            const dashboardData = {\r\n                labels: xaxis.map(r => r.name),\r\n                datasets: seriesAdd,\r\n                indicators\r\n            };\r\n\r\n            setResponseDataBarChart(dashboardData)\r\n            setIsUpdatingData(false)\r\n        }\r\n    }\r\n\r\n    const fetchDataLocalII = () => {\r\n\r\n        if (selectedIndicator4 !== \"\" && selectedIndicator5 !== \"\" && selectedIndicator6 !== \"\") {\r\n            setIsUpdatingData(true)\r\n            let json = crudeJsonResponseDataBarChart\r\n            let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n            let groupBy = function groupBy(list, keyGetter) {\r\n                const map = new Map();\r\n                list.forEach((item) => {\r\n                    const key = keyGetter(item);\r\n                    const collection = map.get(key);\r\n                    if (!collection) {\r\n                        map.set(key, [item]);\r\n                    } else {\r\n                        collection.push(item);\r\n                    }\r\n                });\r\n                return map;\r\n            }\r\n\r\n            let xaxis = Array.from(groupBy(json, x => x[selectedIndicator4]), ([name, value]) => ({ name, value }));\r\n            let yaxis = Array.from(groupBy(json, x => x[selectedIndicator5]), ([name, value]) => ({ name }));\r\n\r\n            xaxis.sort(function (a, b) {\r\n                return parseFloat(a.name) - parseFloat(b.name);\r\n            });\r\n\r\n            xaxis.forEach(x => {\r\n\r\n                x['yaxis'] = Array.from(groupBy(x.value, x => x[selectedIndicator5]), ([name, value]) => ({ name, quantidade: somaX(x, name, selectedIndicator5, \"Quant\") }));\r\n            })\r\n\r\n            let series = []\r\n            yaxis.forEach((y, index) => {\r\n                let dataset = xaxis.map(xx => {\r\n                    let yaxysvalue = xx.yaxis.filter(r => r.name === y.name);\r\n                    if (yaxysvalue.length)\r\n                        return yaxysvalue[0].quantidade\r\n\r\n                    return 0\r\n                })\r\n\r\n                let serie = {\r\n                    type: \"bar\",\r\n                    label: y.name,\r\n                    backgroundColor: colorsBars[Math.floor(Math.random() * colorsBars.length)],\r\n                    fill: false,\r\n                    borderColor: \"white\",\r\n                    borderWidth: 0,\r\n                    data: dataset,\r\n                }\r\n                series.push(serie)\r\n            })\r\n\r\n            let seriesAdd = []\r\n            if (selectedIndicator6.length == 0) {\r\n                series.filter(s => s.label != null).forEach(element => {\r\n                    seriesAdd.push(element)\r\n                });\r\n            } else {\r\n                selectedIndicator6.forEach(indicator => {\r\n                    series.filter(s => s.label === indicator).forEach(element => {\r\n                        seriesAdd.push(element)\r\n                    });\r\n                });\r\n            }\r\n\r\n            const dashboardData = {\r\n                labels: xaxis.map(r => r.name),\r\n                datasets: seriesAdd,\r\n                indicators\r\n            };\r\n\r\n            setResponseDataLineChart(dashboardData)\r\n            setIsUpdatingData(false)\r\n        }\r\n    }\r\n\r\n    const DataTableColGroupDemo = () => {\r\n\r\n        if (!crudeJsonResponseDataBarChart) return;\r\n\r\n        debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < 100; i++) {\r\n            json.push(crudeJsonResponseDataBarChart[i])\r\n        }\r\n\r\n        const sales = json\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <DataTable value={sales} sortMode=\"multiple\">\r\n                        <Column field=\"ANO\" header=\"ANO\" sortable filter filterPlaceholder=\"Filtro ANO\"></Column>\r\n                        <Column field=\"MES\" header=\"MES\" sortable filter filterPlaceholder=\"Filtro MES\"></Column>\r\n                        <Column field=\"ANO-MES\" header=\"ANO-MES\" sortable filter filterPlaceholder=\"Filtro ANO-MES\"></Column>\r\n                        <Column field=\"Filial\" header=\"Filial\" sortable filter filterPlaceholder=\"Filtro Filial\"></Column>\r\n                        <Column field=\"Negócio Planilha\" header=\"Negócio\" sortable filter filterPlaceholder=\"Filtro Negócio\"></Column>\r\n                        <Column field=\"Quant\" header=\"Quantidade de Reclamações\" sortable filter filterPlaceholder=\"Filtro Quantidade\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        //////////////////////////////////////////\r\n    }\r\n\r\n    function aplicar() {\r\n        fetchDataLocalII()\r\n        fetchDataLocal()\r\n    }\r\n\r\n    const fetchData = () => {\r\n\r\n        setIsUpdatingData(true)\r\n\r\n        //teste Gabriel\r\n        let parametros = ['20210101', 'gabriel']\r\n\r\n        api.getSearaBaseRacBar(parametros).then((response) => {\r\n            // Do whatever you want to transform the data\r\n            //debugger\r\n\r\n\r\n\r\n            let json = JSON.parse(response.data)\r\n\r\n            let datasets = [];\r\n            let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n            //AddItensToJsonArray(json, 100000, \"bar\")\r\n            setCrudeJsonResponseDataBarChart(json)\r\n\r\n            console.time(\"ProcessResponseBarChart\")\r\n            let { dateField, field, ano } = SetParamsToQuery();\r\n\r\n            SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n            let problemas = GetIndicators(json, field);\r\n            AddLineMockData(datasets);\r\n            AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n            console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n            const dashboardData = {\r\n                labels: months,\r\n                datasets: datasets,\r\n                indicators\r\n            };\r\n\r\n\r\n\r\n            setResponseDataBarChart(dashboardData)\r\n            setIndicator1(dashboardData.indicators)\r\n            setIndicator3(dashboardData.indicators)\r\n            setIndicator2(dashboardData.indicators)\r\n            setIndicator4(dashboardData.indicators)\r\n            setIndicator5(dashboardData.indicators)\r\n            setIndicator6(dashboardData.indicators)\r\n\r\n            setIsUpdatingData(false)\r\n\r\n        }).catch(err => {\r\n            // what now?\r\n            console.log(err);\r\n\r\n        });\r\n\r\n        api.getSearaBaseRacLine().then((response) => {\r\n            setResponseDataLineChart(response.data)\r\n            setIsUpdatingData(false)\r\n            // showSuccess('Database updated!')\r\n        }).catch(err => {\r\n            // what now?\r\n            console.log(err);\r\n            showError('Network Error', 'Could not fetch data')\r\n        });\r\n    };\r\n\r\n    const showSuccess = (errorMessage, detailMessage) => {\r\n        toast.current.show({ severity: 'success', summary: errorMessage, detail: detailMessage });\r\n    }\r\n\r\n    const showError = (errorMessage, detailMessage) => {\r\n        toast.current.show({ severity: 'error', summary: errorMessage, detail: detailMessage, life: 6000 });\r\n    }\r\n\r\n    const UpdatingDatabase = () => {\r\n        return (\r\n            <div>\r\n                <h1 className={'h2'}>\r\n                    Updating database\r\n                    <br />\r\n                    <small>this may take a while</small>\r\n                    <br />\r\n                </h1>\r\n                <ProgressBar mode=\"indeterminate\" style={{ height: '16px' }}></ProgressBar>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // Se esta logado exibe tela do dashboard:\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col lg={3}>\r\n                    {isUpdatingData ? (<UpdatingDatabase />) : (\r\n                        <div>\r\n                            <h1 className={'h2'}>\r\n                                KPI - RCA\r\n                                    <br />\r\n                                <small>Descrição do KPI</small>\r\n                            </h1>\r\n                            <div className=\"btn-toolbar mb-2 mb-md-0\">\r\n                                <div className=\"btn-group mr-2\">\r\n                                    <button className=\"btn btn-sm btn-outline-secondary\" onClick={fetchData}>Atualizar</button>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n\r\n            <hr></hr>\r\n\r\n            {/* Botão aplicar */}\r\n            {isUpdatingData ? (<div> </div>) : (\r\n                <Row style={{ paddingRight: '15px', paddingLeft: '15px' }}>\r\n                    <button className=\"btn btn-sm btn-secondary\" style={{ width: '100%' }} onClick={aplicar}>Aplicar</button>\r\n                </Row>\r\n            )}\r\n\r\n            {/* Drop down com indicadores */}\r\n            {isUpdatingData ? (<Row><LoadingSkeletonSquare /></Row>) : (\r\n                <Row>\r\n                    <Col lg={2}>\r\n                        <Card className=\"p-md-12\">\r\n                            <h1 className=\"h6\">\r\n                                Categoria\r\n                                        <br />\r\n                                <small>Eixo X</small>\r\n                                <br />\r\n                                <select onChange={e => handleIndicator1TypeChange(e)} className=\"browser-default custom-select\" >\r\n                                    {\r\n                                        AddIndicator1.map((address, key) =>\r\n                                            <option key={key} value={key}>{address}</option>)\r\n                                    }\r\n                                </select >\r\n                            </h1>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col lg={2}>\r\n                        <Card className=\"p-md-12\">\r\n                            <h1 className=\"h6\">\r\n                                Séries\r\n                                        <br />\r\n                                <small>Séries</small>\r\n                                <br />\r\n                                <select onChange={e => handleIndicator2TypeChange(e)} className=\"browser-default custom-select\" >\r\n                                    {\r\n                                        AddIndicator2.map((address, key) =>\r\n                                            <option key={key} value={key}>{address}</option>)\r\n                                    }\r\n                                </select >\r\n                            </h1>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col lg={2}>\r\n                        <Card className=\"h6\" style={{ \"overflow-y\": \"auto\", \"max-height\": \"230px\" }}>\r\n                            {\r\n                                AddIndicator3.map(item => (\r\n                                    <div className=\"custom-control custom-checkbox \" >\r\n                                        <input type=\"checkbox\" className=\"custom-control-input\" id={item} value={item} onChange={e => handleCheckboxChangeIndicator3(e)} />\r\n                                        <label className=\"custom-control-label\" htmlFor={item}>{item}</label>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </Card>\r\n                        <Card>\r\n                            <h1 className=\"h6\">\r\n                                Agrupamento\r\n                                        <br />\r\n                                <small>Série</small>\r\n                                <br />\r\n                                <select onChange={e => handleIndicator3TypeChange(e)} className=\"browser-default custom-select\" >\r\n                                    {\r\n                                        AddIndicator3.map((address, key) =>\r\n                                            <option key={key} value={key}>{address}</option>)\r\n                                    }\r\n                                </select >\r\n                            </h1>\r\n                        </Card>\r\n                    </Col>\r\n\r\n\r\n\r\n                    <Col lg={2}>\r\n                        <Card className=\"p-md-12\">\r\n                            <h1 className=\"h6\">\r\n                                Categoria\r\n                                        <br />\r\n                                <small>Eixo X</small>\r\n                                <br />\r\n                                <select onChange={e => handleIndicator4TypeChange(e)} className=\"browser-default custom-select\" >\r\n                                    {\r\n                                        AddIndicator4.map((address, key) =>\r\n                                            <option key={key} value={key}>{address}</option>)\r\n                                    }\r\n                                </select >\r\n                            </h1>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col lg={2}>\r\n                        <Card className=\"p-md-12\">\r\n                            <h1 className=\"h6\">\r\n                                Séries\r\n                                        <br />\r\n                                <small>Séries</small>\r\n                                <br />\r\n                                <select onChange={e => handleIndicator5TypeChange(e)} className=\"browser-default custom-select\" >\r\n                                    {\r\n                                        AddIndicator5.map((address, key) =>\r\n                                            <option key={key} value={key}>{address}</option>)\r\n                                    }\r\n                                </select >\r\n                            </h1>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col lg={2}>\r\n                        <Card className=\"h6\" style={{ \"overflow-y\": \"auto\", \"max-height\": \"230px\" }}>\r\n                            {\r\n                                AddIndicator6.map(item => (\r\n                                    <div className=\"custom-control custom-checkbox \" >\r\n                                        <input type=\"checkbox\" className=\"custom-control-input\" id={item} value={item} onChange={e => handleCheckboxChangeIndicator6(e)} />\r\n                                        <label className=\"custom-control-label\" htmlFor={item}>{item}</label>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </Card>\r\n                        <Card>\r\n                            <h1 className=\"h6\">\r\n                                Agrupamento\r\n                                        <br />\r\n                                <small>Série</small>\r\n                                <br />\r\n                                <select onChange={e => handleIndicator6TypeChange(e)} className=\"browser-default custom-select\" >\r\n                                    {\r\n                                        AddIndicator6.map((address, key) =>\r\n                                            <option key={key} value={key}>{address}</option>)\r\n                                    }\r\n                                </select >\r\n                            </h1>\r\n                        </Card>\r\n                    </Col>\r\n\r\n\r\n                </Row>\r\n            )}\r\n\r\n            {/* Graficos */}\r\n            <Row>\r\n                <Col>\r\n                    {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                        <Card title=\"RAC\" subTitle=\"Indicador de Reclamações\" className=\"mt-5\">\r\n                            <Chart type=\"bar\" data={responseDataBarChart} options={lightOptions} />\r\n                        </Card>\r\n                    )}\r\n                </Col>\r\n                <Col>\r\n                    {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                        <Card title=\"RAC\" subTitle=\"Indicador de Reclamações II\" className=\"mt-5\" >\r\n                            <Chart type=\"Line\" data={responseDataLineChart} options={lightOptions} />\r\n                        </Card>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n            {/* Tabelas */}\r\n            {/* {DataTableColGroupDemo()} */}\r\n            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                DataTableColGroupDemo()\r\n            )}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;",{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":37,"column":12,"nodeType":"96","messageId":"97","endLine":37,"endColumn":27},{"ruleId":"94","severity":1,"message":"98","line":8,"column":5,"nodeType":"96","messageId":"97","endLine":8,"endColumn":24},{"ruleId":"99","severity":1,"message":"100","line":18,"column":1,"nodeType":"101","endLine":65,"endColumn":2},{"ruleId":"90","replacedBy":"102"},{"ruleId":"92","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":25,"column":32,"nodeType":"106","endLine":25,"endColumn":79},{"ruleId":"104","severity":1,"message":"105","line":30,"column":21,"nodeType":"106","endLine":30,"endColumn":107},{"ruleId":"94","severity":1,"message":"107","line":1,"column":17,"nodeType":"96","messageId":"97","endLine":1,"endColumn":25},{"ruleId":"94","severity":1,"message":"108","line":1,"column":27,"nodeType":"96","messageId":"97","endLine":1,"endColumn":36},{"ruleId":"94","severity":1,"message":"109","line":3,"column":10,"nodeType":"96","messageId":"97","endLine":3,"endColumn":16},{"ruleId":"94","severity":1,"message":"110","line":5,"column":10,"nodeType":"96","messageId":"97","endLine":5,"endColumn":19},{"ruleId":"94","severity":1,"message":"111","line":6,"column":10,"nodeType":"96","messageId":"97","endLine":6,"endColumn":18},{"ruleId":"94","severity":1,"message":"112","line":8,"column":8,"nodeType":"96","messageId":"97","endLine":8,"endColumn":13},{"ruleId":"94","severity":1,"message":"113","line":9,"column":8,"nodeType":"96","messageId":"97","endLine":9,"endColumn":17},{"ruleId":"94","severity":1,"message":"114","line":15,"column":10,"nodeType":"96","messageId":"97","endLine":15,"endColumn":21},{"ruleId":"94","severity":1,"message":"115","line":17,"column":10,"nodeType":"96","messageId":"97","endLine":17,"endColumn":16},{"ruleId":"94","severity":1,"message":"116","line":18,"column":10,"nodeType":"96","messageId":"97","endLine":18,"endColumn":18},{"ruleId":"94","severity":1,"message":"117","line":20,"column":8,"nodeType":"96","messageId":"97","endLine":20,"endColumn":18},{"ruleId":"94","severity":1,"message":"118","line":45,"column":5,"nodeType":"96","messageId":"97","endLine":45,"endColumn":9},{"ruleId":"119","severity":1,"message":"120","line":83,"column":8,"nodeType":"121","endLine":83,"endColumn":10,"suggestions":"122"},{"ruleId":"123","severity":1,"message":"124","line":196,"column":37,"nodeType":"125","messageId":"126","endLine":196,"endColumn":39},{"ruleId":"123","severity":1,"message":"124","line":262,"column":43,"nodeType":"125","messageId":"126","endLine":262,"endColumn":45},{"ruleId":"123","severity":1,"message":"124","line":341,"column":43,"nodeType":"125","messageId":"126","endLine":341,"endColumn":45},{"ruleId":"94","severity":1,"message":"127","line":466,"column":11,"nodeType":"96","messageId":"97","endLine":466,"endColumn":22},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'isAuthenticated' is assigned a value but never used.","Identifier","unusedVar","'AddItensToJsonArray' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["128"],["129"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useState' is defined but never used.","'useEffect' is defined but never used.","'Button' is defined but never used.","'InputText' is defined but never used.","'Password' is defined but never used.","'axios' is defined but never used.","'Container' is defined but never used.","'ColumnGroup' is defined but never used.","'Ripple' is defined but never used.","'Dropdown' is defined but never used.","'classNames' is defined but never used.","'cors' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["130"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'showSuccess' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},"Update the dependencies array to be: [fetchData]",{"range":"133","text":"134"},[3224,3226],"[fetchData]"]