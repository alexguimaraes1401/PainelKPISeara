[{"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\index.js":"1","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\App.js":"2","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\reportWebVitals.js":"3","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\api\\api.js":"4","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\domain\\constants.js":"5","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\components\\skeletons.js":"6","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\domain\\kpiservice.js":"7","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\components\\navbarMobile.js":"8","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\components\\sidebarDesktop.js":"9","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\components\\navbarDesktop.js":"10","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\contactUs.js":"11","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\dashViewAbsorcao.js":"12","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\notFoundPage.js":"13","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\home.js":"14","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\rac.js":"15","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\dashViewNNCLog.js":"16","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\dashViewNNCMP.js":"17"},{"size":538,"mtime":1615291765865,"results":"18","hashOfConfig":"19"},{"size":5783,"mtime":1617233135058,"results":"20","hashOfConfig":"19"},{"size":375,"mtime":1615291765866,"results":"21","hashOfConfig":"19"},{"size":8053,"mtime":1620329712523,"results":"22","hashOfConfig":"19"},{"size":6422,"mtime":1620249698752,"results":"23","hashOfConfig":"19"},{"size":2288,"mtime":1615291765854,"results":"24","hashOfConfig":"19"},{"size":2638,"mtime":1617233353191,"results":"25","hashOfConfig":"19"},{"size":1824,"mtime":1615291765851,"results":"26","hashOfConfig":"19"},{"size":835,"mtime":1615291765852,"results":"27","hashOfConfig":"19"},{"size":1596,"mtime":1615395366826,"results":"28","hashOfConfig":"19"},{"size":580,"mtime":1615928953591,"results":"29","hashOfConfig":"19"},{"size":197,"mtime":1615928953593,"results":"30","hashOfConfig":"19"},{"size":376,"mtime":1615928953599,"results":"31","hashOfConfig":"19"},{"size":123049,"mtime":1620329507177,"results":"32","hashOfConfig":"19"},{"size":34970,"mtime":1618196804244,"results":"33","hashOfConfig":"19"},{"size":191,"mtime":1617233194718,"results":"34","hashOfConfig":"19"},{"size":188,"mtime":1617233204450,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"18gn22y",{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\index.js",[],["75","76"],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\App.js",["77","78"],"import React, { Suspense, lazy } from 'react';\r\nimport { Button } from 'primereact/button';\r\nimport { Card } from 'primereact/card';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Password } from 'primereact/password';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\n// Grab components out of the ReactRouterDOM that we will be using\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { ProgressSpinner } from 'primereact/progressspinner';\r\n\r\nimport 'react-pro-sidebar/dist/css/styles.css';\r\nimport './index.css';\r\nimport './css/sidebar-desktop.css';\r\nimport './css/login.css';\r\nimport './css/charts.css';\r\nimport 'primereact/resources/themes/saga-blue/theme.css'\r\nimport 'primereact/resources/primereact.min.css'\r\nimport 'primeicons/primeicons.css'\r\n\r\nimport NavbarMobile from './components/navbarMobile';\r\nimport NavbarDesktop from './components/navbarDesktop';\r\nimport SidebarDesktop from './components/sidebarDesktop';\r\nimport { Toast } from 'primereact/toast';\r\n\r\nconst ContactUs = lazy(() => import(\"./views/contactUs\"));\r\nconst NotFoundPage = lazy(() => import(\"./views/notFoundPage\"));\r\nconst DashViewAbsorcao = lazy(() => import(\"./views/dashViewAbsorcao\"));\r\nconst DashViewNNCLog = lazy(() => import(\"./views/dashViewNNCLog\"));\r\nconst DashViewNNCMP = lazy(() => import(\"./views/dashViewNNCMP\"));\r\nconst DashViewRac = lazy(() => import(\"./views/rac\"));\r\nconst Home = lazy(() => import(\"./views/home\"));\r\n\r\nfunction App() {\r\n    const userKpiDigitalTemp = { name: 'admin', pass: 'admin' }\r\n    const [username, setUsername] = React.useState(\"\");\r\n    const [password, setPassword] = React.useState(\"\");\r\n    const [user, setUser] = React.useState();\r\n    const toast = React.useRef(null);\r\n    const [isAuthenticated, setIsAuthenticated] = React.useState(false);\r\n    \r\n    const handleLogin = (e) => {\r\n        if (username.toLocaleLowerCase() === userKpiDigitalTemp.name.toLocaleLowerCase() && password === userKpiDigitalTemp.pass) {\r\n            setUser({ name: username, pass: password });\r\n            localStorage.setItem('user', JSON.stringify({ name: username }));\r\n            setIsAuthenticated(true);\r\n        }\r\n    }\r\n\r\n    const handleLogout = (e) => {\r\n        setUser({});\r\n        setUsername(\"\");\r\n        setPassword(\"\");\r\n        localStorage.clear();\r\n        window.location.reload(false);\r\n        setIsAuthenticated(false);\r\n    };\r\n\r\n    //Handlers\r\n    React.useEffect(() => {\r\n        const loggedInUser = localStorage.getItem(\"user\");\r\n        if (loggedInUser) {\r\n            const foundUser = JSON.parse(loggedInUser);\r\n            setUser(foundUser);\r\n\r\n        }\r\n    }, []);\r\n\r\n\r\n    /* Local Componentes */\r\n    const Login = () => {\r\n        const loginfooter = <span>\r\n            <Button label=\"Entrar\" onClick={(e) => handleLogin(e.target.value)} style={{ width: '100%', marginRight: '.25em' }} />\r\n        </span>;\r\n        return (\r\n            <div className=\"global-container\">\r\n                <div className=\"card login-form\">\r\n                    <Card title=\"Bem vindo\" subTitle=\"faça o login para acessar o sistema\" className=\"card-body\" footer={loginfooter} >\r\n                        <div className=\"pt-4 p-field p-grid\">\r\n                            <span className=\"p-float-label\">\r\n                                <InputText id=\"username\" style={{ width: '100%' }} value={username} onChange={(e) => setUsername(e.target.value)} />\r\n                                <label htmlFor=\"username\">Usuário</label>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"pt-4 p-field p-grid\">\r\n                            <span className=\"p-float-label\">\r\n                                <Password value={password} style={{ width: '100%' }} onChange={(e) => setPassword(e.target.value)} feedback={false} toggleMask />\r\n                                <label htmlFor=\"in\">Senha</label>\r\n                            </span>\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const Layout = ({ children }) => {\r\n        return (\r\n            <div className=\"pdfsize\">\r\n                <NavbarMobile username={user.name} handleLogout={handleLogout} />\r\n                <NavbarDesktop username={user.name} handleLogout={handleLogout} />\r\n                <SidebarDesktop />\r\n                <Toast ref={toast} position=\"bottom-right\"></Toast>\r\n                <div className=\"main-content\">\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const ChangePageLoader = () => {\r\n        return (\r\n            <ProgressSpinner style={{ width: '50px', height: '50px' }} strokeWidth=\"8\" fill=\"#EEEEEE\" animationDuration=\".5s\" />\r\n        )\r\n    }\r\n\r\n    /* Se nao esta logado exibe tela de login: */\r\n    if (!user) {\r\n        return (\r\n            <Login />\r\n        )\r\n    }\r\n\r\n    /*Exibe paginas no Router*/\r\n    return (\r\n        <Router>\r\n            <Suspense fallback={<ChangePageLoader />}>\r\n                <Layout>\r\n                    <Switch>\r\n                        <Route exact path='/' component={Home} />\r\n                        <Route path='/contact' component={ContactUs} />\r\n                        <Route path='/absorcao' component={DashViewAbsorcao} />\r\n                        <Route path='/nnclog' component={DashViewNNCLog} />\r\n                        <Route path='/nncmp' component={DashViewNNCMP} />\r\n                        <Route path='/rac' component={DashViewRac} />\r\n                        <Route path='*' component={NotFoundPage} />\r\n                    </Switch>\r\n                </Layout>\r\n            </Suspense>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App;","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\reportWebVitals.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\api\\api.js",["79","80","81","82","83","84","85","86"],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\domain\\constants.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\components\\skeletons.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\domain\\kpiservice.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\components\\navbarMobile.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\components\\sidebarDesktop.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\components\\navbarDesktop.js",["87","88"],"import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\nconst NavbarDesktop = (props) => {\r\n\r\n    const capitalize = (str) => {\r\n        return str.charAt(0).toUpperCase() + str.slice(1);\r\n    }\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\" className=\"navbar-desk\" >\r\n            <Navbar.Brand href=\"#home\">\r\n                <img\r\n                    alt=\"\"\r\n                    src=\"https://logodownload.org/wp-content/uploads/2014/12/seara-logo-1-1.png\"\r\n                    //width=\"30\"\r\n                    height=\"30\"\r\n                    className=\"d-inline-block align-top\"\r\n                />{' '}\r\n                Painel de KPIs\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle />\r\n            <Navbar.Collapse className=\"justify-content-end\">\r\n                <Navbar.Text>\r\n                    Bem-vindo: <a href=\"#\" style={{ textDecoration: 'none' }}>{capitalize(props.username)}</a>\r\n                </Navbar.Text>\r\n                &nbsp;\r\n                &nbsp;\r\n                <Navbar.Text>\r\n                    <a href=\"#\" style={{ textDecoration: 'none' }} onClick={(e) => props.handleLogout(e)}>\r\n                        <span style={{ cursor: 'pointer', color: 'rgb(255 255 255 / 50%)' }}>\r\n                            Sair &nbsp;\r\n                            <i style={{ cursor: 'pointer', color: '#fff' }} className=\"pi pi-sign-out\"></i>\r\n                        </span>\r\n                    </a>\r\n                </Navbar.Text>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default NavbarDesktop;","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\contactUs.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\dashViewAbsorcao.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\notFoundPage.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\home.js",["89"],"//#region Imports\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Chart } from 'primereact/chart';\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport { Button } from 'primereact/button';\r\nimport { Card } from 'primereact/card';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Password } from 'primereact/password';\r\nimport api from '../api/api'\r\nimport axios from 'axios';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { ColumnGroup } from 'primereact/columngroup';\r\n\r\nimport { Ripple } from 'primereact/ripple';\r\nimport { Dropdown } from 'primereact/dropdown';\r\n\r\nimport classNames from 'classnames';\r\n\r\n\r\nimport 'react-pro-sidebar/dist/css/styles.css';\r\nimport '../index.css';\r\nimport '../css/sidebar-desktop.css';\r\nimport '../css/login.css';\r\nimport '../css/charts.css';\r\nimport 'primereact/resources/themes/saga-blue/theme.css'\r\nimport 'primereact/resources/primereact.min.css'\r\nimport 'primeicons/primeicons.css'\r\n\r\nimport { ProgressBar } from 'primereact/progressbar';\r\nimport { months, colorsBars, lightOptions, optionsComparativo } from '../domain/constants';\r\nimport {\r\n    SetDateInJsonArrayToQueryOverObjects,\r\n    SetParamsToQuery,\r\n    AddLineMockData,\r\n    AddDataByFilters,\r\n    GetIndicators\r\n} from '../domain/kpiservice';\r\n\r\n\r\nimport { LoadingSkeletonSquare, LoadingSkeletonCard } from '../components/skeletons';\r\n\r\nimport Pdf from \"react-to-pdf\";\r\nimport { LineWeight } from '@material-ui/icons';\r\nconst ref = React.createRef();\r\nconst options = {\r\n    orientation: 'retrait',\r\n    unit: 'px',\r\n    format: [1200,16000]\r\n};\r\n\r\nvar cors = require('cors'); // Already done “npm i cors --save-dev”\r\n\r\n//#endregion\r\n\r\nfunction Home() {\r\n \r\n    const [isUpdatingData, setIsUpdatingData] = React.useState(false)\r\n    const toast = React.useRef(null);\r\n    const canvasRef = React.useRef();\r\n    \r\n    var numeroChamados = [  false,\r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false,\r\n\r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false,                           \r\n\r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false,\r\n\r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false,   \r\n                            \r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false,\r\n\r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false,\r\n                            false,\r\n\r\n                            false,\r\n                        ]\r\n\r\n\r\n    function percorreNumeroChamados(){\r\n        // debugger\r\n        for(var i=0; i < numeroChamados.length; i++){\r\n            if(numeroChamados[i] == false){\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    }\r\n\r\n    let [backgroundGradient, SetBackgroundGradient] = React.useState();\r\n    let [backgroundGradientCinza, SetBackgroundGradientCinza] = React.useState();\r\n\r\n    //chamadas\r\n    let [responseGraficoCETotal, setresponseGraficoCETotal] = React.useState({})\r\n    let [GraficoCETotal, setGraficoCETotal] = React.useState()\r\n    \r\n    let [responseGraficoNNCMPTotalCE, setresponseGraficoNNCMPTotalCE] = React.useState({})\r\n    let [GraficoNNCMPTotalCE, setGraficoNNCMPTotalCE] = React.useState()\r\n\r\n    let [responseGraficoRACTotalCE, setresponseGraficoRACTotalCE] = React.useState({})\r\n    let [GraficoRACTotalCE, setGraficoRACTotalCE] = React.useState()\r\n\r\n    let [responseGraficoRAC, setresponseGraficoRAC] = React.useState({})\r\n    let [GraficoRAC, setGraficoRAC] = React.useState()\r\n\r\n    let [responseGraficoNCCMP, setresponseGraficoNCCMP] = React.useState({})\r\n    let [GraficoNCCMP, setGraficoNCCMP] = React.useState()\r\n\r\n    //Aves pesadas RAC\r\n    let [responseGraficoCETotalAvesPesadas, setresponseGraficoCETotalAvesPesadas] = React.useState({})\r\n    let [GraficoCETotalAvesPesadas, setGraficoCETotalAvesPesadas] = React.useState()\r\n\r\n    let [responseGraficoNNCMPTotalCEAvesPesadas, setresponseGraficoNNCMPTotalCEAvesPesadas] = React.useState({})\r\n    let [GraficoNNCMPTotalCEAvesPesadas, setGraficoNNCMPTotalCEAvesPesadas] = React.useState()\r\n\r\n    let [responseGraficoRACTotalCEAvesPesadas, setresponseGraficoRACTotalCEAvesPesadas] = React.useState({})\r\n    let [GraficoRACTotalCEAvesPesadas, setGraficoRACTotalCEAvesPesadas] = React.useState()\r\n\r\n    let [responseGraficoRACAvesPesadas, setresponseGraficoRACAvesPesadas] = React.useState({})\r\n    let [GraficoRACAvesPesadas, setGraficoRACAvesPesadas] = React.useState()\r\n\r\n    let [responseGraficoNCCMPAvesPesadas, setresponseGraficoNCCMPAvesPesadas] = React.useState({})\r\n    let [GraficoNCCMPAvesPesadas, setGraficoNCCMPAvesPesadas] = React.useState()\r\n\r\n    //Aves pesadas PR RAC\r\n    let [responseGraficoCETotalAvesPesadasPR, setresponseGraficoCETotalAvesPesadasPR] = React.useState({})\r\n    let [GraficoCETotalAvesPesadasPR, setGraficoCETotalAvesPesadasPR] = React.useState()\r\n\r\n    let [responseGraficoNNCMPTotalCEAvesPesadasPR, setresponseGraficoNNCMPTotalCEAvesPesadasPR] = React.useState({})\r\n    let [GraficoNNCMPTotalCEAvesPesadasPR, setGraficoNNCMPTotalCEAvesPesadasPR] = React.useState()\r\n\r\n    let [responseGraficoRACTotalCEAvesPesadasPR, setresponseGraficoRACTotalCEAvesPesadasPR] = React.useState({})\r\n    let [GraficoRACTotalCEAvesPesadasPR, setGraficoRACTotalCEAvesPesadasPR] = React.useState()\r\n\r\n    let [responseGraficoRACAvesPesadasPR, setresponseGraficoRACAvesPesadasPR] = React.useState({})\r\n    let [GraficoRACAvesPesadasPR, setGraficoRACAvesPesadasPR] = React.useState()\r\n\r\n    let [responseGraficoNCCMPAvesPesadasPR, setresponseGraficoNCCMPAvesPesadasPR] = React.useState({})\r\n    let [GraficoNCCMPAvesPesadasPR, setGraficoNCCMPAvesPesadasPR] = React.useState()\r\n\r\n    //Aves Leves RAC\r\n    let [responseGraficoCETotalAvesLeves, setresponseGraficoCETotalAvesLeves] = React.useState({})\r\n    let [GraficoCETotalAvesLeves, setGraficoCETotalAvesLeves] = React.useState()\r\n\r\n    let [responseGraficoNNCMPTotalCEAvesLeves, setresponseGraficoNNCMPTotalCEAvesLeves] = React.useState({})\r\n    let [GraficoNNCMPTotalCEAvesLeves, setGraficoNNCMPTotalCEAvesLeves] = React.useState()\r\n\r\n    let [responseGraficoRACTotalCEAvesLeves, setresponseGraficoRACTotalCEAvesLeves] = React.useState({})\r\n    let [GraficoRACTotalCEAvesLeves, setGraficoRACTotalCEAvesLeves] = React.useState()\r\n\r\n    let [responseGraficoRACAvesLeves, setresponseGraficoRACAvesLeves] = React.useState({})\r\n    let [GraficoRACAvesLeves, setGraficoRACAvesLeves] = React.useState()\r\n\r\n    let [responseGraficoNCCMPAvesLeves, setresponseGraficoNCCMPAvesLeves] = React.useState({})\r\n    let [GraficoNCCMPAvesLeves, setGraficoNCCMPAvesLeves] = React.useState()\r\n\r\n    //Suínos RAC\r\n    let [responseGraficoCETotalSuinos, setresponseGraficoCETotalSuinos] = React.useState({})\r\n    let [GraficoCETotalSuinos, setGraficoCETotalSuinos] = React.useState()\r\n\r\n    let [responseGraficoNNCMPTotalCESuinos, setresponseGraficoNNCMPTotalCESuinos] = React.useState({})\r\n    let [GraficoNNCMPTotalCESuinos, setGraficoNNCMPTotalCESuinos] = React.useState()\r\n\r\n    let [responseGraficoRACTotalCESuinos, setresponseGraficoRACTotalCESuinos] = React.useState({})\r\n    let [GraficoRACTotalCESuinos, setGraficoRACTotalCESuinos] = React.useState()\r\n\r\n    let [responseGraficoRACSuinos, setresponseGraficoRACSuinos] = React.useState({})\r\n    let [GraficoRACSuinos, setGraficoRACSuinos] = React.useState()\r\n\r\n    let [responseGraficoNCCMPSuinos, setresponseGraficoNCCMPSuinos] = React.useState({})\r\n    let [GraficoNCCMPSuinos, setGraficoNCCMPSuinos] = React.useState()\r\n\r\n    //Preparados RAC\r\n    let [responseGraficoCETotalPreparados, setresponseGraficoCETotalPreparados] = React.useState({})\r\n    let [GraficoCETotalPreparados, setGraficoCETotalPreparados] = React.useState()\r\n\r\n    let [responseGraficoNNCMPTotalCEPreparados, setresponseGraficoNNCMPTotalCEPreparados] = React.useState({})\r\n    let [GraficoNNCMPTotalCEPreparados, setGraficoNNCMPTotalCEPreparados] = React.useState()\r\n\r\n    let [responseGraficoRACTotalCEPreparados, setresponseGraficoRACTotalCEPreparados] = React.useState({})\r\n    let [GraficoRACTotalCEPreparados, setGraficoRACTotalCEPreparados] = React.useState()\r\n\r\n    let [responseGraficoRACPreparados, setresponseGraficoRACPreparados] = React.useState({})\r\n    let [GraficoRACPreparados, setGraficoRACPreparados] = React.useState()\r\n\r\n    let [responseGraficoNCCMPPreparados, setresponseGraficoNCCMPPreparados] = React.useState({})\r\n    let [GraficoNCCMPPreparados, setGraficoNCCMPPreparados] = React.useState()\r\n\r\n    \r\n    let [responseGraficoRACUnidadesAvesPesadas, setresponseGraficoRACUnidadesAvesPesadas] = React.useState({})\r\n    let [GraficoRACUnidadesAvesPesadas, setGraficoRACUnidadesAvesPesadas] = React.useState()\r\n    let [responseGraficoRACProblemasAvesPesadas, setresponseGraficoRACProblemasAvesPesadas] = React.useState({})\r\n    let [GraficoRACProblemasAvesPesadas, setGraficoRACProblemasAvesPesadas] = React.useState()\r\n\r\n    let [responseGraficoRACUnidadesAvesPesadasPR, setresponseGraficoRACUnidadesAvesPesadasPR] = React.useState({})\r\n    let [GraficoRACUnidadesAvesPesadasPR, setGraficoRACUnidadesAvesPesadasPR] = React.useState()\r\n    let [responseGraficoRACProblemasAvesPesadasPR, setresponseGraficoRACProblemasAvesPesadasPR] = React.useState({})\r\n    let [GraficoRACProblemasAvesPesadasPR, setGraficoRACProblemasAvesPesadasPR] = React.useState()\r\n\r\n    let [responseGraficoRACUnidadesAvesLeves, setresponseGraficoRACUnidadesAvesLeves] = React.useState({})\r\n    let [GraficoRACUnidadesAvesLeves, setGraficoRACUnidadesAvesLeves] = React.useState()\r\n    let [responseGraficoRACProblemasAvesLeves, setresponseGraficoRACProblemasAvesLeves] = React.useState({})\r\n    let [GraficoRACProblemasAvesLeves, setGraficoRACProblemasAvesLeves] = React.useState()\r\n\r\n    let [responseGraficoRACUnidadesSuinos, setresponseGraficoRACUnidadesSuinos] = React.useState({})\r\n    let [GraficoRACUnidadesSuinos, setGraficoRACUnidadesSuinos] = React.useState()\r\n    let [responseGraficoRACProblemasSuinos, setresponseGraficoRACProblemasSuinos] = React.useState({})\r\n    let [GraficoRACProblemasSuinos, setGraficoRACProblemasSuinos] = React.useState()\r\n\r\n    let [responseGraficoRACUnidadesPreparados, setresponseGraficoRACUnidadesPreparados] = React.useState({})\r\n    let [GraficoRACUnidadesPreparados, setGraficoRACUnidadesPreparados] = React.useState()\r\n    let [responseGraficoRACProblemasPreparados, setresponseGraficoRACProblemasPreparados] = React.useState({})\r\n    let [GraficoRACProblemasPreparados, setGraficoRACProblemasPreparados] = React.useState()\r\n\r\n    let [responseGraficoRACME, setresponseGraficoRACME] = React.useState({})\r\n    let [GraficoRACME, setGraficoRACME] = React.useState()\r\n\r\n    let [TableRacAberturaME, setTableRacAberturaME] = React.useState() \r\n\r\n    let [responseGraficoRACMI, setresponseGraficoRACMI] = React.useState({})\r\n    let [GraficoRACMI, setGraficoRACMI] = React.useState()\r\n\r\n    let [TableRacAberturaMEOrienteMedio, setTableRacAberturaMEOrienteMedio] = React.useState() \r\n    let [TableRacAberturaMEEuropa, setTableRacAberturaMEEuropa] = React.useState() \r\n    let [TableRacAberturaMEJapao, setTableRacAberturaMEJapao] = React.useState() \r\n    let [TableRacAberturaMEAsia, setTableRacAberturaMEAsia] = React.useState() \r\n    let [TableRacAberturaMEAmericasAfrica, setTableRacAberturaMEAmericasAfrica] = React.useState()\r\n    let [TableRacAberturaMEContasGlobais, setTableRacAberturaMEContasGlobais] = React.useState() \r\n\r\n\r\n\r\n    let [responseTable, setresponseTable] = React.useState({})\r\n    let [TableRacME, setTableRacME] = React.useState()\r\n\r\n    let [TableRacFinalME, setTableRacFinalME] = React.useState() //ME\r\n    let [TableRacFinalMI, setTableRacFinalMI] = React.useState() //MI\r\n    let [TableRacFinalRECL, setTableRacFinalRECL] = React.useState() //RECLAMAÇÕES ESPECIAIS\r\n    let [TableRacFinalPDV, setTableRacFinalPDV] = React.useState() //PDV ABERTURA\r\n    let [TableRacFinalTE, setTableRacFinalTE] = React.useState() //ABERTURA TERCEIROS\r\n    let [TableRacFinalCRIT, setTableRacFinalCRIT] = React.useState() //CRITICOS\r\n\r\n\r\n\r\n    let whereRACPreparados = \"WHERE ([Regional (Qualidade)] like 'Preparados%' or [Regional (Qualidade)] in ('Outros', 'Itajaí')) \"\r\n    whereRACPreparados += \" AND ([Origem da RAC] IN ('Documentação Unidade','EXPEDIÇÃO FÁBRICA','FABRICAÇÃO')\"\r\n    whereRACPreparados += \"                                 OR [Origem da RAC] IS NULL) \"\r\n    whereRACPreparados += \" and unidade in ( \"\r\n    whereRACPreparados += \" 'Brasília',  \"\r\n    whereRACPreparados += \" 'Dourados',  \"\r\n    whereRACPreparados += \" 'Duque de Caxias',  \"\r\n    whereRACPreparados += \" 'Jaguariúna',  \"\r\n    whereRACPreparados += \" 'Lages',  \"\r\n    whereRACPreparados += \" 'Montenegro',  \"\r\n    whereRACPreparados += \" 'Rio Grande da Serra',  \"\r\n    whereRACPreparados += \" 'Roca Sales',  \"\r\n    whereRACPreparados += \" 'Salto Veloso',  \"\r\n    whereRACPreparados += \"  'São Gonçalo',  \"\r\n    whereRACPreparados += \" 'São Miguel do Oeste',  \"\r\n    whereRACPreparados += \" 'Três Passos',  \"\r\n    whereRACPreparados += \" 'Bom Retiro', \" \r\n    whereRACPreparados += \" 'Carambeí',  \"\r\n    whereRACPreparados += \" 'Osasco',  \"\r\n    whereRACPreparados += \" 'Jundiaí', \" \r\n    whereRACPreparados += \" 'Caxias do Sul - Ana Rech',  \"\r\n    whereRACPreparados += \" 'Itapiranga',  \"\r\n    whereRACPreparados += \" 'Seara',  \"\r\n    whereRACPreparados += \" 'Jaragua do Sul',  \"\r\n    whereRACPreparados += \" 'ITAJAI INDUSTRIALIZADOS',  \"\r\n    whereRACPreparados += \" 'ITAJAI SUINOS')\"\r\n\r\n    let whereRACCE = \" WHERE Tipo = 'REAL'  \"\r\n    whereRACCE += \" AND Grupo = 'CORPO ESTRANHO' \"\r\n    whereRACCE += \" AND [Regional (Qualidade)] NOT IN ('Excelsior') \"\r\n    whereRACCE += \" AND [Tipo CE] = 'Não Inerente'  \"\r\n    whereRACCE += \" AND  [Tipo_Atendimento_rac] IN ( \"\r\n    whereRACCE += \" 'CONTATO EXCELSIOR_RAC',  \"\r\n    whereRACCE += \" 'CONTATO JBS CARNES',  \"\r\n    whereRACCE += \" 'CONTATO MERCADO DA CARNE',  \"\r\n    whereRACCE += \" 'NOTIFICAÇÃO',  \"\r\n    whereRACCE += \" 'RECLAMAÇÃO',  \"\r\n    whereRACCE += \" 'RECLAMAÇÃO ABUSO DE PRODUTO',  \"\r\n    whereRACCE += \" 'RECLAMAÇÃO ABUSO PROD.',  \"\r\n    whereRACCE += \" 'Reclamação Contas Globais',  \"\r\n    whereRACCE += \" 'RECLAMAÇÃO FAB. NÃO IDENTIF.',  \"\r\n    whereRACCE += \" 'RECLAMAÇÃO HANS',  \"\r\n    whereRACCE += \" 'RECLAMAÇÃO VOSSKO')  \"\r\n    whereRACCE += \" AND [Origem da RAC] IN ( \"\r\n    whereRACCE += \" 'Documentação Unidade',  \"\r\n    whereRACCE += \" 'EXPEDIÇÃO FÁBRICA',  \"\r\n    whereRACCE += \" 'FABRICAÇÃO',  \"\r\n    whereRACCE += \" 'P-D') \"\r\n\r\n    let whereNNCMP = \" WHERE ([Reg. Qual] NOT IN ('Itajaí', 'Outros')) \"\r\n    whereNNCMP += \" AND ([Grupo Problema] NOT IN ('Distr / Log', 'Embalagem Secundária') or [Grupo Problema] is null) \"\r\n    whereNNCMP += \" AND ([Entra para a Meta] <> 'Não' or [Entra para a Meta] is null) \"\r\n\r\n    //Handlers\r\n    React.useEffect(() => {\r\n               \r\n        chamarAPI(\"CETotal\",GraficoCETotal, \"GraficoCETotal\", [' where 1=1 '], setGraficoCETotal, setresponseGraficoCETotal, 0)     // 1\r\n        chamarAPI(\"NNCMPTotalCE\",GraficoNNCMPTotalCE, \"GraficoNNCMPTotalCE\", [' where 1=1 '], setGraficoNNCMPTotalCE, setresponseGraficoNNCMPTotalCE, 1)       // 2\r\n        chamarAPI(\"RAC\",GraficoRACTotalCE, \"GraficoRACTotalCE\", [whereRACCE], setGraficoRACTotalCE, setresponseGraficoRACTotalCE, 2)     // 3\r\n        chamarAPI(\"RAC\",GraficoRAC, \"GraficoRAC\", [' where 1=1 '], setGraficoRAC, setresponseGraficoRAC, 3)    // 4\r\n        chamarAPI(\"NCCMP\",GraficoNCCMP, \"GraficoNCCMP\", [whereNNCMP], setGraficoNCCMP, setresponseGraficoNCCMP, 4)    // 5 \r\n        \r\n        chamarAPI(\"CETotal\",GraficoCETotalAvesPesadas, \"GraficoCETotalAvesPesadas\", [' where NEGOCIO = \\'Aves Pesadas\\'  '], setGraficoCETotalAvesPesadas, setresponseGraficoCETotalAvesPesadas, 5)     // 6\r\n        chamarAPI(\"NNCMPTotalCE\",GraficoNNCMPTotalCEAvesPesadas, \"GraficoNNCMPTotalCEAvesPesadas\", [' where [Regional (Qualidade)] in (\\'Aves Pesadas 1\\',\\'Aves Pesadas 2\\',\\'Aves Pesadas 3\\', \\'Aves Pesadas PR\\') '], setGraficoNNCMPTotalCEAvesPesadas, setresponseGraficoNNCMPTotalCEAvesPesadas, 6)       // 7\r\n        chamarAPI(\"RACTotalCE\",GraficoRACTotalCEAvesPesadas, \"GraficoRACTotalCEAvesPesadas\", [' WHERE [Regional (Qualidade)] in (\\'Aves Pesadas 1\\',\\'Aves Pesadas 2\\',\\'Aves Pesadas 3\\', \\'Aves Pesadas PR\\')  '], setGraficoRACTotalCEAvesPesadas, setresponseGraficoRACTotalCEAvesPesadas, 7)     // 8\r\n        chamarAPI(\"RACIndicadores\",GraficoRACAvesPesadas, \"GraficoRACAvesPesadas\", [' WHERE [Regional (Qualidade)] in (\\'Aves Pesadas 1\\',\\'Aves Pesadas 2\\',\\'Aves Pesadas 3\\', \\'Aves Pesadas PR\\')  '], setGraficoRACAvesPesadas, setresponseGraficoRACAvesPesadas, 8)    // 9\r\n        chamarAPI(\"NCCMP\",GraficoNCCMPAvesPesadas, \"GraficoNCCMPAvesPesadas\", [whereNNCMP + ' and [Reg. Qual] in (\\'Aves Pesadas 1\\',\\'Aves Pesadas 2\\',\\'Aves Pesadas 3\\', \\'Aves Pesadas PR\\')  '], setGraficoNCCMPAvesPesadas, setresponseGraficoNCCMPAvesPesadas, 9)    // 10\r\n\r\n        chamarAPI(\"CETotal\",GraficoCETotalAvesPesadasPR, \"GraficoCETotalAvesPesadasPR\", [' where [NEGOCIO] = \\'Aves Pesadas PR\\' '], setGraficoCETotalAvesPesadasPR, setresponseGraficoCETotalAvesPesadasPR, 10)     // 11\r\n        chamarAPI(\"NNCMPTotalCE\",GraficoNNCMPTotalCEAvesPesadasPR, \"GraficoNNCMPTotalCEAvesPesadasPR\", ['  where [Regional (Qualidade)] = \\'Aves Pesadas PR\\'  '], setGraficoNNCMPTotalCEAvesPesadasPR, setresponseGraficoNNCMPTotalCEAvesPesadasPR, 11)       // 12\r\n        chamarAPI(\"RACTotalCE\",GraficoRACTotalCEAvesPesadasPR, \"GraficoRACTotalCEAvesPesadasPR\", ['  WHERE [Negócio (Qualidade)] in (\\'Aves Pesadas PR\\')   '], setGraficoRACTotalCEAvesPesadasPR, setresponseGraficoRACTotalCEAvesPesadasPR, 12)     // 13\r\n        chamarAPI(\"RACIndicadores\",GraficoRACAvesPesadasPR, \"GraficoRACAvesPesadasPR\", [' WHERE [Regional (Qualidade)] in (\\'Aves Pesadas PR\\')  '], setGraficoRACAvesPesadasPR, setresponseGraficoRACAvesPesadasPR, 13)    // 14\r\n        chamarAPI(\"NCCMP\",GraficoNCCMPAvesPesadasPR, \"GraficoNCCMPAvesPesadasPR\", [whereNNCMP + ' and [Reg. Qual] = \\'Aves Pesadas PR\\'  '], setGraficoNCCMPAvesPesadasPR, setresponseGraficoNCCMPAvesPesadasPR, 14)    // 15\r\n\r\n        chamarAPI(\"CETotal\",GraficoCETotalAvesLeves, \"GraficoCETotalAvesLeves\", [' where [NEGOCIO]  = \\'Aves Leves\\' '], setGraficoCETotalAvesLeves, setresponseGraficoCETotalAvesLeves, 15)     // 11\r\n        chamarAPI(\"NNCMPTotalCE\",GraficoNNCMPTotalCEAvesLeves, \"GraficoNNCMPTotalCEAvesLeves\", [' where [Regional (Qualidade)] = \\'Aves Leves\\' '], setGraficoNNCMPTotalCEAvesLeves, setresponseGraficoNNCMPTotalCEAvesLeves, 16)       // 12\r\n        chamarAPI(\"RACTotalCE\",GraficoRACTotalCEAvesLeves, \"GraficoRACTotalCEAvesLeves\", ['  WHERE [Negócio (Qualidade)] = \\'Aves Leves\\'   '], setGraficoRACTotalCEAvesLeves, setresponseGraficoRACTotalCEAvesLeves, 17)     // 13\r\n        chamarAPI(\"RACIndicadores\",GraficoRACAvesLeves, \"GraficoRACAvesLeves\", [' WHERE [Negócio (Qualidade)] = \\'Aves Leves\\'  '], setGraficoRACAvesLeves, setresponseGraficoRACAvesLeves, 18)    // 14\r\n        chamarAPI(\"NCCMP\",GraficoNCCMPAvesLeves, \"GraficoNCCMPAvesLeves\", [whereNNCMP + ' and [Reg. Qual] = \\'Aves Leves\\'  '], setGraficoNCCMPAvesLeves, setresponseGraficoNCCMPAvesLeves, 19)    // 15\r\n\r\n        chamarAPI(\"CETotal\",GraficoCETotalSuinos, \"GraficoCETotalSuinos\", [' where [NEGOCIO]  = \\'Suínos\\' '], setGraficoCETotalSuinos, setresponseGraficoCETotalSuinos, 20)     // 11\r\n        chamarAPI(\"NNCMPTotalCE\",GraficoNNCMPTotalCESuinos, \"GraficoNNCMPTotalCESuinos\", [' where [Regional (Qualidade)] = \\'Suínos\\' '], setGraficoNNCMPTotalCESuinos, setresponseGraficoNNCMPTotalCESuinos, 21)       // 12\r\n        chamarAPI(\"RACTotalCE\",GraficoRACTotalCESuinos, \"GraficoRACTotalCESuinos\", ['  WHERE [Negócio (Qualidade)] = \\'Suínos\\'   '], setGraficoRACTotalCESuinos, setresponseGraficoRACTotalCESuinos, 22)     // 13\r\n        chamarAPI(\"RACIndicadores\",GraficoRACSuinos, \"GraficoRACSuinos\", [' WHERE [Negócio (Qualidade)] = \\'Suínos\\'  '], setGraficoRACSuinos, setresponseGraficoRACSuinos, 23)    // 14\r\n        chamarAPI(\"NCCMP\",GraficoNCCMPSuinos, \"GraficoNCCMPSuinos\", [whereNNCMP + ' and [Reg. Qual] = \\'Suínos\\'  '], setGraficoNCCMPSuinos, setresponseGraficoNCCMPSuinos, 24)    // 15\r\n\r\n        chamarAPI(\"CETotal\",GraficoCETotalPreparados, \"GraficoCETotalPreparados\", [' where [NEGOCIO]  = \\'Preparados\\' '], setGraficoCETotalPreparados, setresponseGraficoCETotalPreparados, 25)     // 11\r\n        chamarAPI(\"NNCMPTotalCE\",GraficoNNCMPTotalCEPreparados, \"GraficoNNCMPTotalCEPreparados\", [' where [Regional (Qualidade)] in (\\'Preparados 1\\',\\'Preparados 2\\',\\'Preparados 3\\', \\'Outros\\') '], setGraficoNNCMPTotalCEPreparados, setresponseGraficoNNCMPTotalCEPreparados, 26)       // 12\r\n        chamarAPI(\"RACTotalCE\",GraficoRACTotalCEPreparados, \"GraficoRACTotalCEPreparados\", ['  WHERE [Negócio (Qualidade)] = \\'Preparados\\'   '], setGraficoRACTotalCEPreparados, setresponseGraficoRACTotalCEPreparados, 27)     // 13\r\n        chamarAPI(\"RACIndicadores\",GraficoRACPreparados, \"GraficoRACPreparados\", [whereRACPreparados], setGraficoRACPreparados, setresponseGraficoRACPreparados, 28)    // 14\r\n        chamarAPI(\"NCCMP\",GraficoNCCMPPreparados, \"GraficoNCCMPPreparados\", [whereNNCMP + ' and [Reg. Qual] in (\\'Preparados 5\\',\\'Preparados 2\\',\\'Preparados 3\\', \\'Outros\\')  '], setGraficoNCCMPPreparados, setresponseGraficoNCCMPPreparados, 29)    // 15\r\n\r\n        chamarAPI(\"RACUnicoUnidade\",GraficoRACUnidadesAvesPesadas, \"GraficoRACUnidadesAvesPesadas\", [' where Tipo = \\'REAL\\' and [Negócio (Qualidade)] = \\'Aves Pesadas\\' and Ano = year((select * from v_maiorData)) and Mês = month((select * from v_maiorData)) '], setGraficoRACUnidadesAvesPesadas, setresponseGraficoRACUnidadesAvesPesadas,30)                                                                    // 6\r\n        chamarAPI(\"RACUnicoProblema\",GraficoRACProblemasAvesPesadas, \"GraficoRACProblemasAvesPesadas\", [' where Tipo = \\'REAL\\' and [Negócio (Qualidade)] = \\'Aves Pesadas\\' and Ano = year((select * from v_maiorData)) and Mês = month((select * from v_maiorData)) '], setGraficoRACProblemasAvesPesadas, setresponseGraficoRACProblemasAvesPesadas,31)\r\n\r\n        chamarAPI(\"RACUnicoUnidade\",GraficoRACUnidadesAvesPesadasPR, \"GraficoRACUnidadesAvesPesadasPR\", [' where Tipo = \\'REAL\\' and [Negócio (Qualidade)] = \\'Aves Pesadas PR\\' and Ano = year((select * from v_maiorData)) and Mês = month((select * from v_maiorData)) '], setGraficoRACUnidadesAvesPesadasPR, setresponseGraficoRACUnidadesAvesPesadasPR,32)                                                                    // 6\r\n        chamarAPI(\"RACUnicoProblema\",GraficoRACProblemasAvesPesadasPR, \"GraficoRACProblemasAvesPesadasPR\", [' where Tipo = \\'REAL\\' and [Negócio (Qualidade)] = \\'Aves Pesadas PR\\' and Ano = year((select * from v_maiorData)) and Mês = month((select * from v_maiorData)) '], setGraficoRACProblemasAvesPesadasPR, setresponseGraficoRACProblemasAvesPesadasPR,33)\r\n\r\n        chamarAPI(\"RACUnicoUnidade\",GraficoRACUnidadesAvesLeves, \"GraficoRACUnidadesAvesLeves\", [' where Tipo = \\'REAL\\' and [Negócio (Qualidade)] = \\'Aves Leves\\' and Ano = year((select * from v_maiorData)) and Mês = month((select * from v_maiorData)) '], setGraficoRACUnidadesAvesLeves, setresponseGraficoRACUnidadesAvesLeves,34)                                                                    // 6\r\n        chamarAPI(\"RACUnicoProblema\",GraficoRACProblemasAvesLeves, \"GraficoRACProblemasAvesLeves\", [' where Tipo = \\'REAL\\' and [Negócio (Qualidade)] = \\'Aves Leves\\' and Ano = year((select * from v_maiorData)) and Mês = month((select * from v_maiorData)) '], setGraficoRACProblemasAvesLeves, setresponseGraficoRACProblemasAvesLeves,35)\r\n\r\n        chamarAPI(\"RACUnicoUnidade\",GraficoRACUnidadesSuinos, \"GraficoRACUnidadesSuinos\", [' where Tipo = \\'REAL\\' and [Negócio (Qualidade)] = \\'Suínos\\' and Ano = year((select * from v_maiorData)) and Mês = month((select * from v_maiorData)) '], setGraficoRACUnidadesSuinos, setresponseGraficoRACUnidadesSuinos,36)                                                                    // 6\r\n        chamarAPI(\"RACUnicoProblema\",GraficoRACProblemasSuinos, \"GraficoRACProblemasSuinos\", [' where Tipo = \\'REAL\\' and [Negócio (Qualidade)] = \\'Suínos\\' and Ano = year((select * from v_maiorData)) and Mês = month((select * from v_maiorData)) '], setGraficoRACProblemasSuinos, setresponseGraficoRACProblemasSuinos,37)\r\n\r\n        chamarAPI(\"RACUnicoUnidade\",GraficoRACUnidadesPreparados, \"GraficoRACUnidadesPreparados\", [' where Tipo = \\'REAL\\' and [Negócio (Qualidade)] in (\\'Preparados\\') and Ano = year((select * from v_maiorData)) and Mês = month((select * from v_maiorData)) '], setGraficoRACUnidadesPreparados, setresponseGraficoRACUnidadesPreparados,38)                                                                    // 6\r\n        chamarAPI(\"RACUnicoProblema\",GraficoRACProblemasPreparados, \"GraficoRACProblemasPreparados\", [' where Tipo = \\'REAL\\' and [Negócio (Qualidade)] in (\\'Preparados\\') and Ano = year((select * from v_maiorData)) and Mês = month((select * from v_maiorData)) '], setGraficoRACProblemasPreparados, setresponseGraficoRACProblemasPreparados,39)\r\n\r\n        chamarAPI(\"RACIndicadores\",GraficoRACME, \"GraficoRACME\", [\" where 1=1 \"], setGraficoRACME, setresponseGraficoRACME, 40)\r\n        chamarAPI(\"RACIndicadores\",GraficoRACME, \"GraficoRACMI\", [\" where 1=1 \"], setGraficoRACMI, setresponseGraficoRACMI, 41)\r\n\r\n        const bar_ctx = canvasRef.current.getContext('2d');\r\n        \r\n        const background = bar_ctx.createLinearGradient(0, 0, 0, 300);\r\n        const backgroundCinza = bar_ctx.createLinearGradient(0, 0, 0, 300);\r\n\r\n        background.addColorStop(0, \"#f59c00\");\r\n        background.addColorStop(1, \"#cc0000\");\r\n\r\n        backgroundCinza.addColorStop(0, \"#f2f2f2\");\r\n        backgroundCinza.addColorStop(1, \"#bfbfbf\");\r\n\r\n        SetBackgroundGradient(background);\r\n        SetBackgroundGradientCinza(backgroundCinza);\r\n\r\n\r\n\r\n    }, []);\r\n\r\n    function chamarAPI(apiNome, objeto, numGrafico, parametros, funcao, funcaoRetorno, numeroChamado){\r\n\r\n        switch(apiNome){\r\n            case 'CETotal':\r\n                \r\n                api.getSearaBaseCE(parametros).then((response) => {\r\n                    buscarDados(response, funcao, objeto, funcaoRetorno)\r\n                    numeroChamados[numeroChamado] = true;\r\n                    console.log(\"Rodou \"+apiNome)\r\n                    if(percorreNumeroChamados()){\r\n                        console.log(\"0 Rodou \"+apiNome)\r\n                        document.getElementById(\"btnAplicar\").click()\r\n                        //aplicar()\r\n                    }\r\n                    // setoptionRelativaresponseGraficoCETotal = f_optionRelativa (2000, 500);\r\n                    return response\r\n                }).catch(err => {\r\n                    // what now?\r\n                    console.log(err);       \r\n                });\r\n                break\r\n            case 'NNCMPTotalCE':\r\n                \r\n                api.getSearaBaseNNCMPTotalCE(parametros).then((response) => {\r\n                    buscarDados(response, funcao, objeto, funcaoRetorno)\r\n                    numeroChamados[numeroChamado] = true;\r\n                    console.log(\"Rodou \"+apiNome)\r\n                    if(percorreNumeroChamados()){\r\n                        console.log(\"0 Rodou \"+apiNome)\r\n                        document.getElementById(\"btnAplicar\").click()\r\n                        //aplicar()\r\n                    }\r\n                    return response\r\n                }).catch(err => {\r\n                    // what now?\r\n                    console.log(err);       \r\n                });\r\n                break\r\n            case 'RACTotalCE':\r\n                \r\n                api.getSearaBaseRACTotalCE(parametros).then((response) => {\r\n                    buscarDados(response, funcao, objeto, funcaoRetorno)\r\n                    numeroChamados[numeroChamado] = true;\r\n                    console.log(\"Rodou \"+apiNome)\r\n                    if(percorreNumeroChamados()){\r\n                        console.log(\"0 Rodou \"+apiNome)\r\n                        document.getElementById(\"btnAplicar\").click()\r\n                        //aplicar()\r\n                    }\r\n                    return response\r\n                }).catch(err => {\r\n                    // what now?\r\n                    console.log(err);       \r\n                });\r\n                break\r\n\r\n                    \r\n            case 'RAC':\r\n                \r\n                api.getSearaBaseRac(parametros).then((response) => {\r\n                    buscarDados(response, funcao, objeto, funcaoRetorno)\r\n                    numeroChamados[numeroChamado] = true;\r\n                    console.log(\"Rodou \"+apiNome)\r\n                    if(percorreNumeroChamados()){\r\n                        console.log(\"0Rodou \"+apiNome)\r\n                        document.getElementById(\"btnAplicar\").click()\r\n                        //aplicar()\r\n                    }\r\n                    return response\r\n                }).catch(err => {\r\n                    // what now?\r\n                    console.log(err);       \r\n                });\r\n                break\r\n            case 'RACIndicadores':\r\n                \r\n                    api.getSearaBaseRacIndicadores(parametros).then((response) => {\r\n                        buscarDados(response, funcao, objeto, funcaoRetorno)\r\n                        numeroChamados[numeroChamado] = true;\r\n                        console.log(\"Rodou \"+apiNome)\r\n                        if(percorreNumeroChamados()){\r\n                            console.log(\"0Rodou \"+apiNome)\r\n                            document.getElementById(\"btnAplicar\").click()\r\n                            //aplicar()\r\n                        }\r\n                        return response\r\n                    }).catch(err => {\r\n                        // what now?\r\n                        console.log(err);       \r\n                    });\r\n                    break\r\n            case 'NCCMP':\r\n                \r\n                api.getSearaBaseNCCMP(parametros).then((response) => {\r\n                    buscarDados(response, funcao, objeto, funcaoRetorno)\r\n                    numeroChamados[numeroChamado] = true;\r\n                    console.log(\"Rodou \"+apiNome)\r\n                    if(percorreNumeroChamados()){\r\n                        console.log(\"0Rodou \"+apiNome)\r\n                        document.getElementById(\"btnAplicar\").click()\r\n                        //aplicar()\r\n                    }\r\n                    return response\r\n                }).catch(err => {\r\n                    // what now?\r\n                    console.log(err);      \r\n                });\r\n                break\r\n\r\n            case 'NCCLOG':\r\n                \r\n                    api.getSearaBaseNCCLOG(parametros).then((response) => {\r\n                        buscarDados(response, funcao, objeto, funcaoRetorno)\r\n                        numeroChamados[numeroChamado] = true;\r\n                        console.log(\"Rodou \"+apiNome)\r\n                        if(percorreNumeroChamados()){\r\n                            console.log(\"0Rodou \"+apiNome)\r\n                            document.getElementById(\"btnAplicar\").click()\r\n                            //aplicar()\r\n                        }\r\n                        return response\r\n                    }).catch(err => {\r\n                        // what now?\r\n                        console.log(err);       \r\n                    });\r\n                    break  \r\n            case 'RACUnicoUnidade':\r\n                \r\n                    api.getSearaBaseRACUnicoUnidade(parametros).then((response) => {\r\n                            \r\n                            buscarDados(response, funcao, objeto, funcaoRetorno)\r\n                            numeroChamados[numeroChamado] = true;\r\n                            console.log(\"Rodou \"+apiNome)\r\n                            if(percorreNumeroChamados()){\r\n                                console.log(\"0Rodou \"+apiNome)\r\n                                document.getElementById(\"btnAplicar\").click()\r\n                                //aplicar()\r\n                            }\r\n                            return response\r\n                        }).catch(err => {\r\n                            // what now?\r\n                            console.log(err);       \r\n                        });\r\n                        break  \r\n\r\n            case 'RACUnicoProblema':\r\n                \r\n                    api.getSearaBaseRACUnicoProblema(parametros).then((response) => {\r\n                            \r\n                            buscarDados(response, funcao, objeto, funcaoRetorno)\r\n                            numeroChamados[numeroChamado] = true;\r\n                            console.log(\"Rodou \"+apiNome)\r\n                            if(percorreNumeroChamados()){\r\n                                console.log(\"0Rodou \"+apiNome)\r\n                                document.getElementById(\"btnAplicar\").click()\r\n                                //aplicar()\r\n                            }\r\n                            return response\r\n                        }).catch(err => {\r\n                            // what now?\r\n                            console.log(err);       \r\n                        });\r\n                        break \r\n\r\n            default:\r\n                break    \r\n            \r\n        }\r\n\r\n        return\r\n    }\r\n\r\n    function aplicar() {\r\n        setTimeout(function(){\r\n            GerarGraficoHistorico(GraficoCETotal, setresponseGraficoCETotal, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistoricoSemMeta(GraficoNNCMPTotalCE, setresponseGraficoNNCMPTotalCE, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistoricoSemMeta(GraficoRACTotalCE, setresponseGraficoRACTotalCE, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistorico(GraficoRAC, setresponseGraficoRAC, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistorico(GraficoNCCMP, setresponseGraficoNCCMP, backgroundGradient, backgroundGradientCinza)\r\n\r\n            GerarGraficoHistorico(GraficoCETotalAvesPesadas, setresponseGraficoCETotalAvesPesadas, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistoricoSemMeta(GraficoNNCMPTotalCEAvesPesadas, setresponseGraficoNNCMPTotalCEAvesPesadas, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistoricoSemMeta(GraficoRACTotalCEAvesPesadas, setresponseGraficoRACTotalCEAvesPesadas, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistorico(GraficoRACAvesPesadas, setresponseGraficoRACAvesPesadas, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistorico(GraficoNCCMPAvesPesadas, setresponseGraficoNCCMPAvesPesadas, backgroundGradient, backgroundGradientCinza)\r\n\r\n            GerarGraficoHistorico(GraficoCETotalAvesPesadasPR, setresponseGraficoCETotalAvesPesadasPR, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistoricoSemMeta(GraficoNNCMPTotalCEAvesPesadasPR, setresponseGraficoNNCMPTotalCEAvesPesadasPR, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistoricoSemMeta(GraficoRACTotalCEAvesPesadasPR, setresponseGraficoRACTotalCEAvesPesadasPR, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistorico(GraficoRACAvesPesadasPR, setresponseGraficoRACAvesPesadasPR, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistorico(GraficoNCCMPAvesPesadasPR, setresponseGraficoNCCMPAvesPesadasPR, backgroundGradient, backgroundGradientCinza)\r\n\r\n            GerarGraficoHistorico(GraficoCETotalAvesLeves, setresponseGraficoCETotalAvesLeves, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistoricoSemMeta(GraficoNNCMPTotalCEAvesLeves, setresponseGraficoNNCMPTotalCEAvesLeves, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistoricoSemMeta(GraficoRACTotalCEAvesLeves, setresponseGraficoRACTotalCEAvesLeves, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistorico(GraficoRACAvesLeves, setresponseGraficoRACAvesLeves, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistorico(GraficoNCCMPAvesLeves, setresponseGraficoNCCMPAvesLeves, backgroundGradient, backgroundGradientCinza)\r\n\r\n            GerarGraficoHistorico(GraficoCETotalSuinos, setresponseGraficoCETotalSuinos, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistorico(GraficoNNCMPTotalCESuinos, setresponseGraficoNNCMPTotalCESuinos, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistorico(GraficoRACTotalCESuinos, setresponseGraficoRACTotalCESuinos, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistorico(GraficoRACSuinos, setresponseGraficoRACSuinos, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistorico(GraficoNCCMPSuinos, setresponseGraficoNCCMPSuinos, backgroundGradient, backgroundGradientCinza)\r\n\r\n            GerarGraficoHistorico(GraficoCETotalPreparados, setresponseGraficoCETotalPreparados, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistoricoSemMeta(GraficoNNCMPTotalCEPreparados, setresponseGraficoNNCMPTotalCEPreparados, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistoricoSemMeta(GraficoRACTotalCEPreparados, setresponseGraficoRACTotalCEPreparados, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistorico(GraficoRACPreparados, setresponseGraficoRACPreparados, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistorico(GraficoNCCMPPreparados, setresponseGraficoNCCMPPreparados, backgroundGradient, backgroundGradientCinza)\r\n\r\n            GerarGraficoBarras(GraficoRACUnidadesAvesPesadas, setresponseGraficoRACUnidadesAvesPesadas, backgroundGradientCinza)\r\n            GerarGraficoBarras(GraficoRACProblemasAvesPesadas, setresponseGraficoRACProblemasAvesPesadas, backgroundGradientCinza)\r\n\r\n            GerarGraficoBarras(GraficoRACUnidadesAvesPesadasPR, setresponseGraficoRACUnidadesAvesPesadasPR, backgroundGradientCinza)\r\n            GerarGraficoBarras(GraficoRACProblemasAvesPesadasPR, setresponseGraficoRACProblemasAvesPesadasPR, backgroundGradientCinza)\r\n\r\n            GerarGraficoBarras(GraficoRACUnidadesAvesLeves, setresponseGraficoRACUnidadesAvesLeves, backgroundGradientCinza)\r\n            GerarGraficoBarras(GraficoRACProblemasAvesLeves, setresponseGraficoRACProblemasAvesLeves, backgroundGradientCinza)\r\n\r\n            GerarGraficoBarras(GraficoRACUnidadesSuinos, setresponseGraficoRACUnidadesSuinos, backgroundGradientCinza)\r\n            GerarGraficoBarras(GraficoRACProblemasSuinos, setresponseGraficoRACProblemasSuinos, backgroundGradientCinza)\r\n\r\n            GerarGraficoBarras(GraficoRACUnidadesPreparados, setresponseGraficoRACUnidadesPreparados, backgroundGradientCinza)\r\n            GerarGraficoBarras(GraficoRACProblemasPreparados, setresponseGraficoRACProblemasPreparados, backgroundGradientCinza)\r\n\r\n            GerarGraficoHistoricoSemMeta(GraficoRACME, setresponseGraficoRACME, backgroundGradient, backgroundGradientCinza)\r\n            GerarGraficoHistoricoSemMeta(GraficoRACME, setresponseGraficoRACME, backgroundGradient, backgroundGradientCinza)\r\n\r\n        }, 0)\r\n        \r\n    }\r\n\r\n \r\n    const GerarGraficoHistorico = (objeto, funcao, gradient, gradient2) => {\r\n            \r\n            setIsUpdatingData(true)\r\n            let json = objeto; \r\n            let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n            let groupBy = function groupBy(list, keyGetter) {\r\n                const map = new Map();\r\n                list.forEach((item) => {\r\n                    const key = keyGetter(item);\r\n                    const collection = map.get(key);\r\n                    if (!collection) {\r\n                        map.set(key, [item]);\r\n                    } else {\r\n                        collection.push(item);\r\n                    }\r\n                });\r\n                return map;\r\n            }\r\n\r\n            let xaxis = Array.from(groupBy(json, x => x[\"Periodo\"]), ([name, value]) => ({ name, value }));\r\n            let yaxis = [{name:'Evolutivo 2020'},{name:'Evolutivo 2021'},{name:'Evolutivo Meta'},{name:'Meta'},{name:'2019'},{name:'2020'},{name: '2021'},{name: 'forcast'},{name: 'Média Diária'}];\r\n\r\n            xaxis.forEach(x => {\r\n                if (x.name == \"2019\"){\r\n                    x['yaxis'] = [{name: \"2019\", value: x.value[0].Valor == \"\" ? null : x.value[0].Valor}]\r\n                }else if (x.name == \"2020\"){\r\n                    x['yaxis'] = [{name: \"2020\", value: x.value[0].Valor == \"\" ? null : x.value[0].Valor}]\r\n                }else if(x.name == \"Meta\"){\r\n                    x['yaxis'] = [{name: \"Meta\", value: x.value[0].Valor == \"\" ? null : x.value[0].Valor}]\r\n                }else if(x.name == \"2021\"){\r\n                    x['yaxis'] = [{name: \"2021\", value: x.value[0].Valor == \"\" ? null : x.value[0].Valor}]\r\n                }else{\r\n                    x['yaxis'] = [\r\n                                    {name: \"Evolutivo 2020\", value: x.value[0].a2020},\r\n                                    {name: \"Evolutivo Meta\", value: x.value[0].aMeta},\r\n                                    {name: \"Evolutivo 2021\", value: x.value[0].a2021},\r\n                                    {name: \"forcast\", value: x.value[0].forcast.replace(\",\",\".\")},\r\n                                    {name: \"Média Diária\", value: x.value[0].mediaDiaria.replace(\",\",\".\")},\r\n                                ]\r\n                }\r\n            })\r\n\r\n            let series = []\r\n            let maiorValorSerie = 0\r\n            let menorValorSerie = 100000\r\n\r\n            yaxis.forEach((y, index) => {\r\n                let dataset = xaxis.map(xx => {\r\n                    let yaxysvalue = xx.yaxis.filter(r => r.name === y.name);\r\n                    if (yaxysvalue.length)\r\n                        return yaxysvalue[0].value\r\n\r\n                    return null\r\n                })\r\n\r\n                let tipo = 'line'\r\n                let cor = '#bfbfbf'\r\n                let corLabel = '#bfbfbf'\r\n                let yAx = \"B\"\r\n                let varborderDash = [0,0]\r\n                let fontWeight = 'bold'\r\n                let lineSize = 2\r\n                let fontSize = \"12\"\r\n\r\n                switch (y.name){\r\n\r\n                    case \"2019\": \r\n                                    tipo = \"bar\"\r\n                                    cor = gradient2 ?? \"#bfbfbf\"\r\n                                    corLabel = \"#bfbfbf\"\r\n                                    yAx = \"A\"\r\n                                    break\r\n                    case \"2020\": \r\n                                    tipo = \"bar\"\r\n                                    cor = gradient2 ?? \"#bfbfbf\"\r\n                                    corLabel = \"#bfbfbf\"\r\n                                    yAx = \"A\"\r\n                                    break\r\n                    case \"Meta\": \r\n                                    tipo = \"bar\"\r\n                                    cor = gradient ?? \"rgb(204,0,0)\" //\"rgb(245,156,0)\"\r\n                                    corLabel = \"rgb(245,156,0)\"\r\n                                    yAx = \"A\"\r\n                                    break\r\n                    case \"2021\": \r\n                                    tipo = \"bar\"\r\n                                    cor = \"#cccccc\"\r\n                                    corLabel = \"#cccccc\"\r\n                                    yAx = \"A\"\r\n                                    break\r\n                    case \"Evolutivo 2020\": \r\n                                    tipo = \"line\"\r\n                                    cor = \"rgb(166, 166, 166)\"\r\n                                    corLabel = \"rgb(166, 166, 166)\"\r\n                                    varborderDash = [10,5]\r\n                                    yAx = \"B\"\r\n                                    break\r\n                    case \"Evolutivo Meta\": \r\n                                    tipo = \"line\"\r\n                                    cor = \"rgb(245,156,0)\"\r\n                                    corLabel = \"rgb(245,156,0)\"\r\n                                    yAx = \"B\"\r\n                                    break\r\n                    case \"Evolutivo 2021\": \r\n                                    tipo = \"line\"\r\n                                    cor = \"rgb(89,89,89)\"\r\n                                    corLabel = \"rgb(89,89,89)\"\r\n                                    yAx = \"B\"\r\n                                    break\r\n                    case \"forcast\": \r\n                                    tipo = \"line\"\r\n                                    cor = \"#000000\" //\"rgb(245,156,0)\"\r\n                                    corLabel = \"#000000\"\r\n                                    yAx = \"B\"\r\n                                  \r\n                                    break\r\n                    case \"Média Diária\": \r\n                                    tipo = \"bar\"\r\n                                    cor = \"#000000\" //\"rgb(204,0,0)\"\r\n                                    corLabel = \"#000000\"\r\n                                    yAx = \"B\"\r\n                                    fontSize = \"14\"\r\n                                  \r\n                                    break\r\n                                 \r\n                    default:\r\n                                    break\r\n\r\n\r\n                }\r\n\r\n                for(var i = 0; i < dataset.length; i++){\r\n                    if(dataset[i] == \"\") dataset[i] = null\r\n                    if(parseFloat(dataset[i]) > maiorValorSerie && yAx == \"B\") maiorValorSerie = parseFloat(dataset[i])\r\n                    if(parseFloat(dataset[i]) < menorValorSerie && yAx == \"B\") menorValorSerie = parseFloat(dataset[i])\r\n                }\r\n\r\n\r\n                let serie = {\r\n                    type: tipo,\r\n                    yAxisID: yAx,\r\n                    label: y.name,\r\n                    backgroundColor: cor,\r\n                    fill: false,\r\n                    borderColor: cor,\r\n                    borderWidth: lineSize,\r\n                    pointRadius: 5,\r\n                    pointBackgroundColor: \"transparent\",\r\n                    pointBorderColor: \"transparent\",\r\n                    borderDash: varborderDash, \r\n                    data: dataset,\r\n                    datalabels: {\r\n                    \r\n                        align: \"top\",\r\n                        anchor: \"end\",\r\n                        offset: 10,\r\n                        padding: -2,\r\n                        color: corLabel,\r\n                        //clip: true,\r\n                        font: {\r\n                            size: fontSize,\r\n                            weight: fontWeight\r\n                        },\r\n                        \r\n                    }\r\n                     \r\n                }\r\n                series.push(serie)\r\n            })\r\n\r\n            //debugger\r\n            maiorValorSerie = parseFloat(maiorValorSerie)\r\n            menorValorSerie = parseFloat(menorValorSerie)\r\n            let maxYB = maiorValorSerie*(menorValorSerie/maiorValorSerie + 1.2)\r\n\r\n            let tipo = 'line'\r\n            let cor = 'transparent'\r\n            let corLabel = 'transparent'\r\n            let yAx = \"B\"\r\n            let varborderDash = [0,0]\r\n\r\n            let serieEixo = {\r\n                type: tipo,\r\n                yAxisID: yAx,\r\n                label: '',\r\n                backgroundColor: cor,\r\n                fill: false,\r\n                borderColor: cor,\r\n                borderWidth: 1,\r\n                pointRadius: 5,\r\n                pointBackgroundColor: \"transparent\",\r\n                pointBorderColor: \"transparent\",\r\n                borderDash: varborderDash, \r\n                data: [null,null,null,null,null,null,null,null,null,null,null,null,null,null,maxYB ],\r\n                datalabels: {\r\n                \r\n                    align: \"top\",\r\n                    anchor: \"end\",\r\n                    offset: 10,\r\n                    padding: -2,\r\n                    color: corLabel,\r\n                    //clip: true,\r\n                    font: {\r\n                        size: \"12\",\r\n                    },\r\n                    \r\n                }\r\n                 \r\n            }\r\n\r\n            series.push(serieEixo)\r\n\r\n            let seriesAdd = []\r\n            \r\n                series.filter(s => s.label != null).forEach(element => {\r\n                    seriesAdd.push(element)\r\n                });\r\n\r\n            \r\n            //setoptionRelativaresponseGraficoCETotal = f_optionRelativa (2000, 500);\r\n    \r\n            const dashboardData = {\r\n                labels: xaxis.map(r => r.name),\r\n                datasets: seriesAdd,\r\n                indicators\r\n                \r\n            };\r\n\r\n  \r\n            \r\n\r\n            if(typeof(funcao)==\"function\"){\r\n                funcao(dashboardData);\r\n            }\r\n\r\n            setIsUpdatingData(false)\r\n    }\r\n\r\n    const GerarGraficoHistoricoSemMeta = (objeto, funcao, gradient, gradient2) => {\r\n            \r\n        setIsUpdatingData(true)\r\n        let json = objeto; \r\n        let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n        let groupBy = function groupBy(list, keyGetter) {\r\n            const map = new Map();\r\n            list.forEach((item) => {\r\n                const key = keyGetter(item);\r\n                const collection = map.get(key);\r\n                if (!collection) {\r\n                    map.set(key, [item]);\r\n                } else {\r\n                    collection.push(item);\r\n                }\r\n            });\r\n            return map;\r\n        }\r\n\r\n        let xaxis = Array.from(groupBy(json, x => x[\"Periodo\"]), ([name, value]) => ({ name, value }));\r\n        xaxis.splice(2,1) //tira a meta\r\n        let yaxis = [{name:'Evolutivo 2020'},{name:'Evolutivo 2021'},{name:'Evolutivo Meta'},{name:'2019'},{name:'2020'},{name: '2021'},{name: 'forcast'},{name: 'Média Diária'}];\r\n\r\n        xaxis.forEach(x => {\r\n            if (x.name == \"2019\"){\r\n                x['yaxis'] = [{name: \"2019\", value: x.value[0].Valor == \"\" ? null : x.value[0].Valor}]\r\n            }else if (x.name == \"2020\"){\r\n                x['yaxis'] = [{name: \"2020\", value: x.value[0].Valor == \"\" ? null : x.value[0].Valor}]\r\n            }else if(x.name == \"Meta\"){\r\n                x['yaxis'] = [{name: \"Meta\", value: x.value[0].Valor == \"\" ? null : x.value[0].Valor}]\r\n            }else if(x.name == \"2021\"){\r\n                x['yaxis'] = [{name: \"2021\", value: x.value[0].Valor == \"\" ? null : x.value[0].Valor}]\r\n            }else{\r\n                x['yaxis'] = [\r\n                                {name: \"Evolutivo 2020\", value: x.value[0].a2020},\r\n                                {name: \"Evolutivo Meta\", value: x.value[0].aMeta},\r\n                                {name: \"Evolutivo 2021\", value: x.value[0].a2021},\r\n                                {name: \"forcast\", value: x.value[0].forcast.replace(\",\",\".\")},\r\n                                {name: \"Média Diária\", value: x.value[0].mediaDiaria.replace(\",\",\".\")},\r\n                            ]\r\n            }\r\n        })\r\n\r\n        let series = []\r\n        let maiorValorSerie = 0\r\n        let menorValorSerie = 100000\r\n\r\n        yaxis.forEach((y, index) => {\r\n            let dataset = xaxis.map(xx => {\r\n                let yaxysvalue = xx.yaxis.filter(r => r.name === y.name);\r\n                if (yaxysvalue.length)\r\n                    return yaxysvalue[0].value\r\n\r\n                return null\r\n            })\r\n\r\n            let tipo = 'line'\r\n            let cor = '#bfbfbf'\r\n            let corLabel = '#bfbfbf'\r\n            let yAx = \"B\"\r\n            let varborderDash = [0,0]\r\n\r\n            switch (y.name){\r\n\r\n                case \"2019\": \r\n                                tipo = \"bar\"\r\n                                cor = gradient2 ?? \"#bfbfbf\"\r\n                                corLabel = \"#bfbfbf\"\r\n                                yAx = \"A\"\r\n                                break\r\n                case \"2020\": \r\n                                tipo = \"bar\"\r\n                                cor = gradient2 ?? \"#bfbfbf\"\r\n                                corLabel = \"#bfbfbf\"\r\n                                yAx = \"A\"\r\n                                break\r\n                case \"Meta\": \r\n                                tipo = \"bar\"\r\n                                cor = gradient ?? \"rgb(204,0,0)\" //\"rgb(245,156,0)\"\r\n                                corLabel = \"rgb(245,156,0)\"\r\n                                yAx = \"A\"\r\n                                break\r\n                case \"2021\": \r\n                                tipo = \"bar\"\r\n                                cor = \"#cccccc\"\r\n                                corLabel = \"#cccccc\"\r\n                                yAx = \"A\"\r\n                                break\r\n                case \"Evolutivo 2020\": \r\n                                tipo = \"line\"\r\n                                cor = \"rgb(166, 166, 166)\"\r\n                                corLabel = \"rgb(166, 166, 166)\"\r\n                                varborderDash = [10,5]\r\n                                yAx = \"B\"\r\n                                break\r\n                case \"Evolutivo Meta\": \r\n                                tipo = \"line\"\r\n                                cor = \"rgb(245,156,0)\"\r\n                                corLabel = \"rgb(245,156,0)\"\r\n                                yAx = \"B\"\r\n                                break\r\n                case \"Evolutivo 2021\": \r\n                                tipo = \"line\"\r\n                                cor = \"rgb(89,89,89)\"\r\n                                corLabel = \"rgb(89,89,89)\"\r\n                                yAx = \"B\"\r\n                                break\r\n                case \"forcast\": \r\n                                tipo = \"line\"\r\n                                cor = \"#000000\" //\"rgb(245,156,0)\"\r\n                                corLabel = \"#000000\"\r\n                                yAx = \"B\"\r\n                              \r\n                                break\r\n                case \"Média Diária\": \r\n                                tipo = \"bar\"\r\n                                cor = \"#000000\" //\"rgb(204,0,0)\"\r\n                                corLabel = \"#000000\"\r\n                                yAx = \"B\"\r\n                              \r\n                                break\r\n                             \r\n                default:\r\n                                break\r\n\r\n\r\n            }\r\n\r\n            for(var i = 0; i < dataset.length; i++){\r\n                if(dataset[i] == \"\") dataset[i] = null\r\n                if(parseFloat(dataset[i]) > maiorValorSerie && yAx == \"B\") maiorValorSerie = parseFloat(dataset[i])\r\n                if(parseFloat(dataset[i]) < menorValorSerie && yAx == \"B\") menorValorSerie = parseFloat(dataset[i])\r\n            }\r\n\r\n\r\n            let serie = {\r\n                type: tipo,\r\n                yAxisID: yAx,\r\n                label: y.name,\r\n                backgroundColor: cor,\r\n                fill: false,\r\n                borderColor: cor,\r\n                borderWidth: 2,\r\n                pointRadius: 5,\r\n                pointBackgroundColor: \"transparent\",\r\n                pointBorderColor: \"transparent\",\r\n                borderDash: varborderDash, \r\n                data: dataset,\r\n                datalabels: {\r\n                \r\n                    align: \"top\",\r\n                    anchor: \"end\",\r\n                    offset: 10,\r\n                    padding: -2,\r\n                    color: corLabel,\r\n                    //clip: true,\r\n                    font: {\r\n                        size: \"12\",\r\n                    },\r\n                    \r\n                }\r\n                 \r\n            }\r\n\r\n            if(y.name == \"Meta\" || y.name == \"Evolutivo Meta\" ){\r\n                console.log(\"Não entra neste relatório por ser meta\")\r\n            }else{\r\n                series.push(serie)\r\n            }\r\n        })\r\n\r\n        //debugger\r\n        maiorValorSerie = parseFloat(maiorValorSerie)\r\n        menorValorSerie = parseFloat(menorValorSerie)\r\n        let maxYB = maiorValorSerie*(menorValorSerie/maiorValorSerie + 1.2)\r\n\r\n        let tipo = 'line'\r\n        let cor = 'transparent'\r\n        let corLabel = 'transparent'\r\n        let yAx = \"B\"\r\n        let varborderDash = [0,0]\r\n\r\n        let serieEixo = {\r\n            type: tipo,\r\n            yAxisID: yAx,\r\n            label: '',\r\n            backgroundColor: cor,\r\n            fill: false,\r\n            borderColor: cor,\r\n            borderWidth: 1,\r\n            pointRadius: 5,\r\n            pointBackgroundColor: \"transparent\",\r\n            pointBorderColor: \"transparent\",\r\n            borderDash: varborderDash, \r\n            data: [null,null,null,null,null,null,null,null,null,null,null,null,null,null,maxYB ],\r\n            datalabels: {\r\n            \r\n                align: \"top\",\r\n                anchor: \"end\",\r\n                offset: 10,\r\n                padding: -2,\r\n                color: corLabel,\r\n                //clip: true,\r\n                font: {\r\n                    size: \"12\",\r\n                },\r\n                \r\n            }\r\n             \r\n        }\r\n\r\n        series.push(serieEixo)\r\n\r\n        let seriesAdd = []\r\n        \r\n            series.filter(s => s.label != null).forEach(element => {\r\n                seriesAdd.push(element)\r\n            });\r\n\r\n        \r\n        //setoptionRelativaresponseGraficoCETotal = f_optionRelativa (2000, 500);\r\n\r\n        const dashboardData = {\r\n            labels: xaxis.map(r => r.name),\r\n            datasets: seriesAdd,\r\n            indicators\r\n            \r\n        };\r\n\r\n\r\n        \r\n\r\n        if(typeof(funcao)==\"function\"){\r\n            funcao(dashboardData);\r\n        }\r\n\r\n        setIsUpdatingData(false)\r\n}\r\n\r\n    const GerarGraficoBarras = (objeto, funcao, gradient) => {\r\n        \r\n        if(!objeto) return\r\n        setIsUpdatingData(true)\r\n        let json = objeto; \r\n        let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n        let groupBy = function groupBy(list, keyGetter) {\r\n            const map = new Map();\r\n            list.forEach((item) => {\r\n                const key = keyGetter(item);\r\n                const collection = map.get(key);\r\n                if (!collection) {\r\n                    map.set(key, [item]);\r\n                } else {\r\n                    collection.push(item);\r\n                }\r\n            });\r\n            return map;\r\n        }\r\n\r\n        let xaxis = Array.from(json);//groupBy(json, x => x[\"Periodo\"]), ([name, value]) => ({ name, value }));\r\n        let yaxis = [{name: 'Valor'}];\r\n\r\n        xaxis.forEach(x => {          \r\n            x['yaxis'] = [{name: \"Valor\", value: x.value}]            \r\n        })\r\n\r\n        let series = []\r\n        yaxis.forEach((y, index) => {\r\n            let dataset = xaxis.map(xx => {\r\n                let yaxysvalue = xx.yaxis.filter(r => 1===1);\r\n                if (yaxysvalue.length)\r\n                    return yaxysvalue[0].value\r\n\r\n                return null\r\n            })\r\n\r\n            let tipo = 'bar'\r\n            let cor = gradient ?? '#bfbfbf'\r\n            let corLabel = '#000000'\r\n            let yAx = \"B\"\r\n            let varborderDash = [0,0]\r\n\r\n            let serie = {\r\n                type: tipo,\r\n                yAxisID: yAx,\r\n                label: y.name,\r\n                backgroundColor: cor,\r\n                fill: false,\r\n                borderColor: cor,\r\n                borderWidth: 2,\r\n                pointRadius: 5,\r\n                pointBackgroundColor: \"transparent\",\r\n                pointBorderColor: \"transparent\",\r\n                borderDash: varborderDash, \r\n                data: dataset,\r\n                datalabels: {\r\n                \r\n                    align: \"top\",\r\n                    anchor: \"end\",\r\n                    offset: 10,\r\n                    padding: -2,\r\n                    color: corLabel,\r\n                    //clip: true,\r\n                    font: {\r\n                        size: \"11\",\r\n                    },\r\n                    \r\n                }\r\n                 \r\n            }\r\n\r\n            \r\n            series.push(serie)\r\n        })\r\n\r\n        let seriesAdd = []\r\n        \r\n            series.filter(s => s.label != null).forEach(element => {\r\n                seriesAdd.push(element)\r\n            });\r\n       \r\n        const dashboardData = {\r\n            labels: xaxis.map(r => r.name),\r\n            datasets: seriesAdd,\r\n            indicators\r\n            \r\n        };\r\n\r\n        if(typeof(funcao)==\"function\"){\r\n            funcao(dashboardData);\r\n        }\r\n\r\n        setIsUpdatingData(false)\r\n    }\r\n\r\n    const DataTableRACME = () => {\r\n\r\n        if (!TableRacME) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRacME.length; i++) {\r\n            json.push(TableRacME[i])\r\n        }\r\n\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestante\" header=\"Manifestante\"></Column>\r\n                        <Column field=\"Nº RAC\" header=\"Nº RAC\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        //////////////////////////////////////////\r\n    }\r\n\r\n    const DataTableRACFinalME = () => {\r\n\r\n        if (!TableRacFinalME) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRacFinalME.length; i++) {\r\n            json.push(TableRacFinalME[i])\r\n        }\r\n\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <div >\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Mercado\" header=\"Mercado\"></Column>\r\n                        <Column field=\"Rac\" header=\"Rac\"></Column>\r\n                        <Column field=\"Cd Item\" header=\"Cd Item\"></Column>\r\n                        <Column field=\"Item\" header=\"Item\"></Column>\r\n                        <Column field=\"Marca\" header=\"Marca\"></Column>\r\n                        <Column field=\"Data de Fabricação\" header=\"Data de Fabricação\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestação\" header=\"Manifestação\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        //////////////////////////////////////////\r\n    }\r\n\r\n    const DataTableRACFinalMI = () => {\r\n\r\n        if (!TableRacFinalMI) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRacFinalMI.length; i++) {\r\n            json.push(TableRacFinalMI[i])\r\n        }\r\n\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <div >\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Mercado\" header=\"Mercado\"></Column>\r\n                        <Column field=\"Rac\" header=\"Rac\"></Column>\r\n                        <Column field=\"Cd Item\" header=\"Cd Item\"></Column>\r\n                        <Column field=\"Item\" header=\"Item\"></Column>\r\n                        <Column field=\"Marca\" header=\"Marca\"></Column>\r\n                        <Column field=\"Data de Fabricação\" header=\"Data de Fabricação\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestação\" header=\"Manifestação\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        //////////////////////////////////////////\r\n    }\r\n\r\n    const DataTableRACFinalRECL = () => {\r\n\r\n        if (!TableRacFinalRECL) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRacFinalRECL.length; i++) {\r\n            json.push(TableRacFinalRECL[i])\r\n        }\r\n\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <div >\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Mercado\" header=\"Mercado\"></Column>\r\n                        <Column field=\"Rac\" header=\"Rac\"></Column>\r\n                        <Column field=\"Cd Item\" header=\"Cd Item\"></Column>\r\n                        <Column field=\"Item\" header=\"Item\"></Column>\r\n                        <Column field=\"Marca\" header=\"Marca\"></Column>\r\n                        <Column field=\"Data de Fabricação\" header=\"Data de Fabricação\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestação\" header=\"Manifestação\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        //////////////////////////////////////////\r\n    }\r\n\r\n    const DataTableRACFinalPDV = () => {\r\n\r\n        if (!TableRacFinalPDV) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRacFinalPDV.length; i++) {\r\n            json.push(TableRacFinalPDV[i])\r\n        }\r\n\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <div >\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Mercado\" header=\"Mercado\"></Column>\r\n                        <Column field=\"Rac\" header=\"Rac\"></Column>\r\n                        <Column field=\"Cd Item\" header=\"Cd Item\"></Column>\r\n                        <Column field=\"Item\" header=\"Item\"></Column>\r\n                        <Column field=\"Marca\" header=\"Marca\"></Column>\r\n                        <Column field=\"Data de Fabricação\" header=\"Data de Fabricação\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestação\" header=\"Manifestação\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        //////////////////////////////////////////\r\n    }\r\n\r\n    const DataTableRACFinalTE = () => {\r\n\r\n        if (!TableRacFinalTE) return;\r\n\r\n        //debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRacFinalTE.length; i++) {\r\n            json.push(TableRacFinalTE[i])\r\n        }\r\n\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <div >\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Mercado\" header=\"Mercado\"></Column>\r\n                        <Column field=\"Rac\" header=\"Rac\"></Column>\r\n                        <Column field=\"Cd Item\" header=\"Cd Item\"></Column>\r\n                        <Column field=\"Item\" header=\"Item\"></Column>\r\n                        <Column field=\"Marca\" header=\"Marca\"></Column>\r\n                        <Column field=\"Data de Fabricação\" header=\"Data de Fabricação\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestação\" header=\"Manifestação\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        //////////////////////////////////////////\r\n    }\r\n\r\n    const DataTableRACFinalCRIT = () => {\r\n\r\n        if (!TableRacFinalCRIT) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRacFinalCRIT.length; i++) {\r\n            json.push(TableRacFinalCRIT[i])\r\n        }\r\n\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <div >\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Mercado\" header=\"Mercado\"></Column>\r\n                        <Column field=\"Rac\" header=\"Rac\"></Column>\r\n                        <Column field=\"Cd Item\" header=\"Cd Item\"></Column>\r\n                        <Column field=\"Item\" header=\"Item\"></Column>\r\n                        <Column field=\"Marca\" header=\"Marca\"></Column>\r\n                        <Column field=\"Data de Fabricação\" header=\"Data de Fabricação\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestação\" header=\"Manifestação\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        //////////////////////////////////////////\r\n    }\r\n\r\n    const DataTableRACFinalCRIT = () => {\r\n\r\n        if (!TableRacFinalCRIT) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRacFinalCRIT.length; i++) {\r\n            json.push(TableRacFinalCRIT[i])\r\n        }\r\n\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <div >\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Mercado\" header=\"Mercado\"></Column>\r\n                        <Column field=\"Rac\" header=\"Rac\"></Column>\r\n                        <Column field=\"Cd Item\" header=\"Cd Item\"></Column>\r\n                        <Column field=\"Item\" header=\"Item\"></Column>\r\n                        <Column field=\"Marca\" header=\"Marca\"></Column>\r\n                        <Column field=\"Data de Fabricação\" header=\"Data de Fabricação\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestação\" header=\"Manifestação\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        //////////////////////////////////////////\r\n    }\r\n\r\n    const DataTableRACAberturaME = () => {\r\n\r\n        if (!TableRACAberturaME) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRACAberturaME.length; i++) {\r\n            json.push(TableRACAberturaME[i])\r\n        }\r\n\r\n        return  (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestante\" header=\"Manifestante\"></Column>\r\n                        <Column field=\"Nº RAC\" header=\"Nº RAC\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        \r\n    }\r\n\r\n    const DataTableRACAberturaMEOrienteMedio = () => {\r\n\r\n        if (!TableRacAberturaMEOrienteMedio) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRacAberturaMEOrienteMedio.length; i++) {\r\n            json.push(TableRacAberturaMEOrienteMedio[i])\r\n        }\r\n\r\n        return  (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestante\" header=\"Manifestante\"></Column>\r\n                        <Column field=\"Nº RAC\" header=\"Nº RAC\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        \r\n    }\r\n\r\n\r\n\r\n    const DataTableRACAberturaMEEuropa = () => {\r\n\r\n        if (!TableRacAberturaMEEuropa) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRacAberturaMEEuropa.length; i++) {\r\n            json.push(TableRacAberturaMEEuropa[i])\r\n        }\r\n\r\n        return  (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestante\" header=\"Manifestante\"></Column>\r\n                        <Column field=\"Nº RAC\" header=\"Nº RAC\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        \r\n    }\r\n\r\n    const DataTableRACAberturaMEJapao = () => {\r\n\r\n        if (!TableRacAberturaMEJapao) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRacAberturaMEJapao.length; i++) {\r\n            json.push(TableRacAberturaMEJapao[i])\r\n        }\r\n\r\n        return  (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestante\" header=\"Manifestante\"></Column>\r\n                        <Column field=\"Nº RAC\" header=\"Nº RAC\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        \r\n    }\r\n\r\n    const DataTableRACAberturaMEAsia = () => {\r\n\r\n        if (!TableRacAberturaMEAsia) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRacAberturaMEAsia.length; i++) {\r\n            json.push(TableRacAberturaMEAsia[i])\r\n        }\r\n\r\n        return  (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestante\" header=\"Manifestante\"></Column>\r\n                        <Column field=\"Nº RAC\" header=\"Nº RAC\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        \r\n    }\r\n\r\n    const DataTableRACAberturaMEAmericasAfrica = () => {\r\n\r\n        if (!TableRacAberturaMEAmericasAfrica) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRacAberturaMEAmericasAfrica.length; i++) {\r\n            json.push(TableRacAberturaMEAmericasAfrica[i])\r\n        }\r\n\r\n        return  (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestante\" header=\"Manifestante\"></Column>\r\n                        <Column field=\"Nº RAC\" header=\"Nº RAC\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        \r\n    }\r\n\r\n    const DataTableRACAberturaMEContasGlobais = () => {\r\n\r\n        if (!TableRacAberturaMEContasGlobais) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRacAberturaMEContasGlobais.length; i++) {\r\n            json.push(TableRacAberturaMEContasGlobais[i])\r\n        }\r\n\r\n        return  (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestante\" header=\"Manifestante\"></Column>\r\n                        <Column field=\"Nº RAC\" header=\"Nº RAC\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        \r\n    }\r\n\r\n    const buscarTabelaRACUnicoProblema = () => {\r\n        let parm = \" \";\r\n        \r\n        api.getSearaBaseRacME(parm).then((response) => {\r\n            let json = JSON.parse(response.data)\r\n\r\n            return  (\r\n                <div>\r\n                    <div className=\"card\">\r\n                        <DataTable value={json} sortMode=\"multiple\">\r\n                            <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                            <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                            <Column field=\"Manifestante\" header=\"Manifestante\"></Column>\r\n                            <Column field=\"Nº RAC\" header=\"Nº RAC\"></Column>\r\n                        </DataTable>\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        })\r\n    }\r\n\r\n    var flagTable = false;\r\n\r\n    const buscarDados = (response, funcao, graficoRetorno, funcaoRetorno ) => {\r\n  \r\n        setIsUpdatingData(true)\r\n\r\n        let parm = \" \";\r\n\r\n        if(!flagTable){\r\n            api.getSearaBaseRacME(parm).then((response) => {\r\n\r\n                let json = JSON.parse(response.data)\r\n                setTableRacME(json)\r\n            }) \r\n            \r\n            api.getSearaBaseRacFinal([\"  AND Unidade = 'Brasília'  \"]).then((response) => {\r\n\r\n                let json = JSON.parse(response.data)\r\n                setTableRacFinalME(json)\r\n            })\r\n\r\n            api.getSearaBaseRacFinal([\"  AND Unidade = 'Itapiranga'  \"]).then((response) => {\r\n\r\n                let json = JSON.parse(response.data)\r\n                setTableRacFinalMI(json)\r\n            })\r\n\r\n            api.getSearaBaseRacFinal([\"  AND Unidade = 'Forquilinha'  \"]).then((response) => {\r\n\r\n                let json = JSON.parse(response.data)\r\n                setTableRacFinalRECL(json)\r\n            })\r\n\r\n            api.getSearaBaseRacFinal([\"  AND Unidade = 'Seara'  \"]).then((response) => {\r\n\r\n                let json = JSON.parse(response.data)\r\n                setTableRacFinalPDV(json)\r\n            })\r\n\r\n            api.getSearaBaseRacFinal([\"  AND Unidade = 'Lapa' \"]).then((response) => {\r\n\r\n                let json = JSON.parse(response.data)\r\n                setTableRacFinalTE(json)\r\n            })\r\n\r\n            api.getSearaBaseRacFinal([\" AND Unidade = 'Ipumirim' \"]).then((response) => {\r\n\r\n                let json = JSON.parse(response.data)\r\n                setTableRacFinalCRIT(json)\r\n            })\r\n\r\n            api.getSearaBaseRacAberturaME([\" AND 1=1 \"]).then((response) => {\r\n\r\n                let json = JSON.parse(response.data)\r\n                setTableRacAberturaME(json)\r\n            })\r\n\r\n            api.getSearaBaseRacAberturaME([\" AND 1=1 \"]).then((response) => {\r\n\r\n                let json = JSON.parse(response.data)\r\n                setTableRacAberturaMEOrienteMedio(json)\r\n            })\r\n\r\n            api.getSearaBaseRacAberturaME([\" AND 1=1 \"]).then((response) => {\r\n\r\n                let json = JSON.parse(response.data)\r\n                setTableRacAberturaMEEuropa(json)\r\n            })\r\n\r\n            api.getSearaBaseRacAberturaME([\" AND 1=1 \"]).then((response) => {\r\n\r\n                let json = JSON.parse(response.data)\r\n                setTableRacAberturaMEJapao(json)\r\n            })\r\n\r\n            api.getSearaBaseRacAberturaME([\" AND 1=1 \"]).then((response) => {\r\n\r\n                let json = JSON.parse(response.data)\r\n                setTableRacAberturaMEAsia(json)\r\n            })\r\n\r\n            api.getSearaBaseRacAberturaME([\" AND 1=1 \"]).then((response) => {\r\n\r\n                let json = JSON.parse(response.data)\r\n                setTableRacAberturaMEAmericasAfrica(json)\r\n            })\r\n\r\n            api.getSearaBaseRacAberturaME([\" AND 1=1 \"]).then((response) => {\r\n\r\n                let json = JSON.parse(response.data)\r\n                setTableRacAberturaMEContasGlobais(json)\r\n            })\r\n\r\n            flagTable = true;\r\n        }\r\n\r\n        let json = JSON.parse(response.data)\r\n\r\n        let datasets = [];\r\n        let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n        if(typeof(funcao)==\"function\"){\r\n            funcao(json);\r\n        }\r\n\r\n        setIsUpdatingData(false)\r\n\r\n        //GerarGraficoHistorico(graficoRetorno, funcaoRetorno)\r\n  \r\n    };\r\n\r\n    const showSuccess = (errorMessage, detailMessage) => {\r\n        toast.current.show({ severity: 'success', summary: errorMessage, detail: detailMessage });\r\n    }\r\n\r\n    const showError = (errorMessage, detailMessage) => {\r\n        toast.current.show({ severity: 'error', summary: errorMessage, detail: detailMessage, life: 6000 });\r\n    }\r\n\r\n    const UpdatingDatabase = () => {\r\n        return (\r\n            <div>\r\n                <h1 className={'h2'}>\r\n                    Atualizando a base\r\n                    <br />\r\n                    <small>Puxando dados da RAC</small>\r\n                    <br />\r\n                </h1>\r\n                <ProgressBar mode=\"indeterminate\" style={{ height: '16px' }}></ProgressBar>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // Se esta logado exibe tela do dashboard:\r\n    return (\r\n        // <div style=\"width: 1220px !important;\">\r\n        <div> \r\n            <canvas style={{ display: 'none' }} ref={canvasRef} />\r\n            <Row>\r\n                <Col lg={12} className=\"cssSeara2021\">\r\n                    {isUpdatingData ? (<UpdatingDatabase />) : (\r\n                        <div>\r\n                            <h1 className={'h2'}>\r\n                                Relatório KPI Seara\r\n                                    <br />\r\n                                <small>por GRX Soluções</small>\r\n                            </h1>\r\n                            <div className=\"btn-toolbar mb-2 mb-md-0\">\r\n                                {/* <div className=\"btn-group mr-2\">\r\n                                    <button className=\"btn btn-sm btn-outline-secondary\" onClick={buscarDados}>Atualizar</button>\r\n                                </div>   */}\r\n\r\n                                <Pdf targetRef={ref} filename=\"KPI.pdf\" options={options} x={1} scale={0.8}>\r\n                                    {({toPdf}) => (\r\n                                        <button className=\"btn btn-sm btn-secondary\" style={{ width: '100%' }} onClick={toPdf} id=\"btnPDF\">Gerar PDF</button>\r\n                                    )}\r\n                                </Pdf>\r\n\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n\r\n            <hr></hr>\r\n\r\n            {/* Botão aplicar */}\r\n            {isUpdatingData ? (<div> </div>) : (\r\n                <Row style={{ paddingRight: '15px', paddingLeft: '15px', display: 'none' }}>\r\n                    <button className=\"btn btn-sm btn-secondary\" style={{ width: '100%' }} onClick={aplicar} id=\"btnAplicar\">Aplicar</button>\r\n                </Row>\r\n            )}\r\n\r\n            \r\n\r\n            {/* Graficos */}\r\n            <div className=\"pad10\" ref={ref}  >\r\n                <Row>\r\n                    <Col className=\"mt-1 col-12 cssSeara2021\">\r\n                        <h1>Relatório de Atendimento ao Consumidor (RAC)</h1>\r\n                    </Col>\r\n                    \r\n                </Row>\r\n\r\n                <reg id=\"region RAC - Totais\">\r\n\r\n                <Row>\r\n                    <Col className=\" col-12 cssSeara2021_titulo\">\r\n                        Totais\r\n                        <hr></hr>\r\n                    </Col>    \r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"col-lg-6 col-md-6 col-sm-12 align-self-center\">\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Habilitador\" subTitle=\"\" className=\"cssSeara2021_tituloGrafico  align-self-center\">\r\n                                <Chart type=\"bar\" data={responseGraficoCETotal} options={lightOptions} className=\"divMaior\"/>\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                        <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"RAC\" subTitle=\"\" className=\"cssSeara2021_tituloGrafico \">\r\n                                    <Chart type=\"bar\" data={responseGraficoRACTotalCE} options={lightOptions} className=\"divMenor\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"NNC MP\" subTitle=\"\" className=\"cssSeara2021_tituloGrafico \">\r\n                                    <Chart type=\"bar\" data={responseGraficoNNCMPTotalCE} options={lightOptions} className=\"divMenor\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                    </Col>\r\n                    \r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"mt-1 col-12 cssSeara2021_subTitulo\">\r\n                        Reclamações\r\n                        <hr></hr>\r\n                    </Col>    \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                <Chart type=\"bar\" data={responseGraficoRAC} options={lightOptions} className=\"divMedia\"/>\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                <Chart type=\"bar\" data={responseGraficoNCCMP} options={lightOptions} className=\"divMedia\" />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    \r\n                </Row>\r\n\r\n                </reg>\r\n                \r\n                <reg id=\"region RAC - Aves Pesadas\">\r\n\r\n                <Row>\r\n                    <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                        Aves Pesadas\r\n                        <hr></hr>\r\n                    </Col>    \r\n                </Row>\r\n                <Row>\r\n                <Col className=\"col-lg-6 col-md-6 col-sm-12 align-self-center\">\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Habilitador\" subTitle=\"\" className=\"cssSeara2021_tituloGrafico  align-self-center\">\r\n                                <Chart type=\"bar\" data={responseGraficoCETotalAvesPesadas} options={lightOptions} className=\"divMaior\"/>\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                        <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"RAC\" subTitle=\"\" className=\"cssSeara2021_tituloGrafico  align-self-center\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRACTotalCEAvesPesadas} options={lightOptions} className=\"divMenor\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico divMenor\">\r\n                                    <Chart type=\"bar\" data={responseGraficoNNCMPTotalCEAvesPesadas} options={lightOptions} className=\"divMenor\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                    </Col>\r\n                    \r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"mt-1 col-12 cssSeara2021_subTitulo\">\r\n                        Reclamações\r\n                        <hr></hr>\r\n                    </Col>    \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                <Chart type=\"bar\" data={responseGraficoRACAvesPesadas} options={lightOptions} className=\"divMedia\"/>\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                <Chart type=\"bar\" data={responseGraficoNCCMPAvesPesadas} options={lightOptions} className=\"divMedia\"/>\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    \r\n                </Row>\r\n\r\n                </reg>\r\n                \r\n                <reg id=\"region RAC - Aves Pesadas PR\">\r\n\r\n                <Row>\r\n                    <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                        Aves Pesadas PR\r\n                        <hr></hr>\r\n                    </Col>    \r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"col-lg-6 col-md-6 col-sm-12 align-self-center\">\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Habilitador\" subTitle=\"\" className=\"cssSeara2021_tituloGrafico  align-self-center\">\r\n                                <Chart type=\"bar\" data={responseGraficoCETotalAvesPesadasPR} options={lightOptions} className=\"divMaior\"/>\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                        <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoNNCMPTotalCEAvesPesadasPR} options={lightOptions} className=\"divMenor\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoNNCMPTotalCEAvesPesadasPR} options={lightOptions} className=\"divMenor\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                    </Col>\r\n                    \r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"mt-1 col-12 cssSeara2021_subTitulo\">\r\n                        Reclamações\r\n                        <hr></hr>\r\n                    </Col>    \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                <Chart type=\"bar\" data={responseGraficoRACAvesPesadasPR} options={lightOptions} className=\"divMedia\"/>\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                <Chart type=\"bar\" data={responseGraficoNCCMPAvesPesadasPR} options={lightOptions} className=\"divMedia\"/>\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    \r\n                </Row>\r\n\r\n                </reg>\r\n\r\n                <reg id=\"region RAC - Aves Leves\">\r\n\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            Aves Leves\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12 align-self-center\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"Habilitador\" subTitle=\"\" className=\"cssSeara2021_tituloGrafico  align-self-center\">\r\n                                    <Chart type=\"bar\" data={responseGraficoCETotalAvesLeves} options={lightOptions} className=\"divMaior\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoNNCMPTotalCEAvesLeves} options={lightOptions} className=\"divMenor\"/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                            <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoNNCMPTotalCEAvesLeves} options={lightOptions} className=\"divMenor\"/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_subTitulo\">\r\n                            Reclamações\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRACAvesLeves} options={lightOptions} className=\"divMedia\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoNCCMPAvesLeves} options={lightOptions} className=\"divMedia\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n                </reg>\r\n\r\n                <reg id=\"region RAC - Suínos\">\r\n\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            Suínos\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12 align-self-center\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"Habilitador\" subTitle=\"\" className=\"cssSeara2021_tituloGrafico  align-self-center\">\r\n                                    <Chart type=\"bar\" data={responseGraficoCETotalSuinos} options={lightOptions} className=\"divMaior\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoNNCMPTotalCESuinos} options={lightOptions} className=\"divMenor\"/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                            <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoNNCMPTotalCESuinos} options={lightOptions} className=\"divMenor\"/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_subTitulo\">\r\n                            Reclamações\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRACSuinos} options={lightOptions} className=\"divMedia\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoNCCMPSuinos} options={lightOptions} className=\"divMedia\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n                </reg>\r\n\r\n                <reg id=\"region RAC - Preparados\">\r\n\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            Preparados\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12 align-self-center\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"Habilitador\" subTitle=\"\" className=\"cssSeara2021_tituloGrafico  align-self-center\">\r\n                                    <Chart type=\"bar\" data={responseGraficoCETotalPreparados} options={lightOptions} className=\"divMaior\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoNNCMPTotalCEPreparados} options={lightOptions} className=\"divMenor\"/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                            <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoNNCMPTotalCEPreparados} options={lightOptions} className=\"divMenor\"/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_subTitulo\">\r\n                            Reclamações\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"RAC\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRACPreparados} options={lightOptions} className=\"divMedia\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col>\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"NNC MP\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                    <Chart type=\"bar\" data={responseGraficoNCCMPPreparados} options={lightOptions} className=\"divMedia\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n                </reg>\r\n\r\n                <reg id=\"region RAC - Reclamações - Aves Pesadas\">\r\n\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            Reclamações - Aves Pesadas\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12 align-self-center\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"\" subTitle=\"\" className=\"cssSeara2021_tituloGrafico  align-self-center\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRACAvesPesadas} options={lightOptions} className=\"divMaior2\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoRACUnidadesAvesPesadas} options={optionsComparativo} className=\"divMenor2\"/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                            <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoRACProblemasAvesPesadas} options={optionsComparativo} className=\"divMenor2\"/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n                \r\n                </reg>\r\n\r\n                <reg id=\"region RAC - Reclamações - Aves Pesadas PR\">\r\n\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            Reclamações - Aves Pesadas PR\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12 align-self-center\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"\" subTitle=\"\" className=\"cssSeara2021_tituloGrafico  align-self-center\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRACAvesPesadasPR} options={lightOptions} className=\"divMaior2\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoRACUnidadesAvesPesadasPR} options={optionsComparativo} className=\"divMenor2\"/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                            <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoRACProblemasAvesPesadasPR} options={optionsComparativo} className=\"divMenor2\"/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n                </reg>\r\n\r\n                <reg id=\"region RAC - Reclamações - Aves Leves\">\r\n\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            Reclamações - Aves Leves\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12 align-self-center\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"\" subTitle=\"\" className=\"cssSeara2021_tituloGrafico  align-self-center\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRACAvesLeves} options={lightOptions} className=\"divMaior2\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoRACUnidadesAvesLeves} options={optionsComparativo} className=\"divMenor2\"/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                            <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoRACProblemasAvesLeves} options={optionsComparativo} className=\"divMenor2\"/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n                    </reg>\r\n\r\n                <reg id=\"region RAC - Reclamações - Suínos\">\r\n\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            Reclamações - Suínos\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12 align-self-center\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"\" subTitle=\"\" className=\"cssSeara2021_tituloGrafico  align-self-center\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRACSuinos} options={lightOptions} className=\"divMaior2\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoRACUnidadesSuinos} options={optionsComparativo} className=\"divMenor2\"/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                            <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoRACProblemasSuinos} options={optionsComparativo} className=\"divMenor2\"/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n\r\n                </reg>\r\n\r\n                <reg id=\"region RAC - Reclamações - Preparados\">\r\n\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            Reclamações - Preparados\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12 align-self-center\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"\" subTitle=\"\" className=\"cssSeara2021_tituloGrafico  align-self-center\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRACPreparados} options={lightOptions} className=\"divMaior2\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoRACUnidadesPreparados} options={optionsComparativo} className=\"divMenor2\"/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                            <Col className=\"col-lg-12 col-md-12 col-sm-12\">\r\n                                {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                    <Card title=\"\" subTitle=\"\" className=\"mt-1 cssSeara2021_tituloGrafico\">\r\n                                        <Chart type=\"bar\" data={responseGraficoRACProblemasPreparados} options={optionsComparativo} className=\"divMenor2\"/>\r\n                                    </Card>\r\n                                )}\r\n                            </Col>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n\r\n                </reg> \r\n\r\n                <reg id=\"region RAC - Abertura ME e MI\">\r\n\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            Mercado Interno\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12 align-self-center\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"\" subTitle=\"\" className=\"cssSeara2021_tituloGrafico  align-self-center\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRACMI} options={lightOptions} className=\"divMaior2\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            \r\n                        </Col>\r\n                        \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            Mercado Externo\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12 align-self-center\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                <Card title=\"\" subTitle=\"\" className=\"cssSeara2021_tituloGrafico  align-self-center\">\r\n                                    <Chart type=\"bar\" data={responseGraficoRACME} options={lightOptions} className=\"divMaior2\"/>\r\n                                </Card>\r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                \r\n                                DataTableRACAberturaME() \r\n                            \r\n                            )}\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col className=\"col-lg-2 col-md-4 col-sm-1\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                \r\n                                DataTableRACAberturaMEOrienteMedio() \r\n                            \r\n                            )}  \r\n                        </Col>\r\n                        <Col className=\"col-lg-2 col-md-4 col-sm-1\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                \r\n                                DataTableRACAberturaMEEuropa() \r\n                            \r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-2 col-md-4 col-sm-1\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                \r\n                                DataTableRACAberturaMEJapao() \r\n                            \r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-2 col-md-4 col-sm-1\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                \r\n                                DataTableRACAberturaMEAsia() \r\n                            \r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-2 col-md-4 col-sm-1\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                \r\n                                DataTableRACAberturaMEAmericasAfrica() \r\n                            \r\n                            )}\r\n                        </Col>\r\n                        <Col className=\"col-lg-2 col-md-4 col-sm-1\">\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                \r\n                                DataTableRACAberturaMEContasGlobais() \r\n                            \r\n                            )}\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n\r\n                </reg>\r\n\r\n\r\n\r\n                                {/* Testes finais */}\r\n\r\n                                {/* <Row>\r\n\r\n                                    <Col className=\"mt-5\">                     \r\n\r\n                                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                            \r\n                                            DataTableRACME() \r\n                                        \r\n                                        )}\r\n\r\n                                    </Col>  \r\n                                </Row> */}\r\n                <reg id=\"region RAC - Total\">\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            RACs Abertura ME\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                     <Row>\r\n                        <Col className=\"mb-5\">                     \r\n\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                \r\n                                DataTableRACFinalME() \r\n                            \r\n                            )}\r\n\r\n                        </Col>  \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            RACs Abertura MI\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                   <Row>\r\n\r\n                        <Col className=\"mb-5\">                     \r\n\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                \r\n                                DataTableRACFinalMI() \r\n                            \r\n                            )}\r\n\r\n                        </Col>  \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            RACs Abertura MI Especiais\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                     <Row>\r\n\r\n                        <Col className=\"mb-5\">                     \r\n\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                \r\n                                DataTableRACFinalRECL() \r\n                            \r\n                            )}\r\n\r\n                        </Col>  \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            RACs PDV Abertura\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n\r\n                        <Col className=\"mb-5\">                     \r\n\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                \r\n                                DataTableRACFinalPDV() \r\n                            \r\n                            )}\r\n\r\n                        </Col>  \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            RACs terceiros Abertura\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n\r\n                        <Col className=\"mb-5\">                     \r\n\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                \r\n                                DataTableRACFinalTE() \r\n                            \r\n                            )}\r\n\r\n                        </Col>  \r\n                    </Row>\r\n                    <Row>\r\n                        <Col className=\"mt-1 col-12 cssSeara2021_titulo\">\r\n                            RACs Crítica Abertura\r\n                            <hr></hr>\r\n                        </Col>    \r\n                    </Row>\r\n                    <Row>\r\n\r\n                        <Col className=\"mb-5\">                     \r\n\r\n                            {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                                \r\n                                DataTableRACFinalCRIT() \r\n                            \r\n                            )}\r\n\r\n                        </Col>  \r\n                    </Row> \r\n                </reg>\r\n                                        \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\rac.js",["90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121"],"import React, { useState, useEffect, useRef } from 'react';\r\n\r\nimport { Chart } from 'primereact/chart';\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport { Button } from 'primereact/button';\r\nimport { Card } from 'primereact/card';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Password } from 'primereact/password';\r\nimport api from '../api/api'\r\nimport axios from 'axios';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport { DataTable } from 'primereact/datatable';\r\nimport { Column } from 'primereact/column';\r\nimport { ColumnGroup } from 'primereact/columngroup';\r\n\r\nimport { Ripple } from 'primereact/ripple';\r\nimport { Dropdown } from 'primereact/dropdown';\r\n\r\nimport classNames from 'classnames';\r\n\r\n\r\nimport 'react-pro-sidebar/dist/css/styles.css';\r\nimport '../index.css';\r\nimport '../css/sidebar-desktop.css';\r\nimport '../css/login.css';\r\nimport '../css/charts.css';\r\nimport 'primereact/resources/themes/saga-blue/theme.css'\r\nimport 'primereact/resources/primereact.min.css'\r\nimport 'primeicons/primeicons.css'\r\n\r\nimport { ProgressBar } from 'primereact/progressbar';\r\nimport { months, colorsBars, lightOptions } from '../domain/constants';\r\nimport {\r\n    SetDateInJsonArrayToQueryOverObjects,\r\n    SetParamsToQuery,\r\n    AddLineMockData,\r\n    AddDataByFilters,\r\n    GetIndicators\r\n} from '../domain/kpiservice';\r\n\r\n\r\nimport { LoadingSkeletonSquare, LoadingSkeletonCard } from '../components/skeletons';\r\n\r\nimport Pdf from \"react-to-pdf\";\r\nconst ref = React.createRef();\r\nconst options = {\r\n    orientation: 'retrait',\r\n    unit: 'px',\r\n    format: [970,4000]\r\n};\r\n\r\nvar cors = require('cors'); // Already done “npm i cors --save-dev”\r\n\r\nfunction Home() {\r\n\r\n    \r\n    const [isUpdatingData, setIsUpdatingData] = React.useState(false)\r\n    const toast = React.useRef(null);\r\n\r\n    //chamadas\r\n    const [TableRacME, setTableRacME] = React.useState()  \r\n\r\n    const [GraficoRAC_Total, setGraficoRAC_Total] = React.useState()   \r\n    const [GraficoRAC_Aves, setGraficoRAC_Aves] = React.useState() \r\n    const [GraficoRAC_Suinos, setGraficoRAC_Suinos] = React.useState() \r\n    const [GraficoRAC_Preparados, setGraficoRAC_Preparados] = React.useState() \r\n    const [GraficoRAC_Outros, setGraficoRAC_Outros] = React.useState() \r\n    const [GraficoNNCMP_Total, setGraficoNNCMP_Total] = React.useState() \r\n    const [GraficoNNCLog_Total, setGraficoNNCLog_Total] = React.useState() \r\n    const [GraficoCE_Total, setGraficoCE_Total] = React.useState() \r\n    \r\n    let [responseGraficoRAC_Total, setresponseGraficoRAC_Total] = React.useState({})\r\n    let [responseGraficoRAC_Aves, setresponseGraficoRAC_Aves] = React.useState({})\r\n    let [responseGraficoRAC_Suinos, setresponseGraficoRAC_Suinos] = React.useState({})\r\n    let [responseGraficoRAC_Preparados, setresponseGraficoRAC_Preparados] = React.useState({})\r\n    let [responseGraficoRAC_Outros, setresponseGraficoRAC_Outros] = React.useState({})\r\n    let [responseGraficoNNCMP_Total, setresponseGraficoNNCMP_Total] = React.useState({})\r\n    let [responseGraficoNNCLog_Total, setresponseGraficoNNCLog_Total] = React.useState({})\r\n    let [responseGraficoCE_Total, setresponseGraficoCE_Total] = React.useState({})\r\n\r\n    //Handlers\r\n    React.useEffect(() => {\r\n        //debugger\r\n        fetchData(GraficoRAC_Total, \"GraficoRAC_Total\");\r\n        fetchData(GraficoRAC_Aves, \"GraficoRAC_Aves\");\r\n        fetchData(GraficoRAC_Suinos, \"GraficoRAC_Suinos\");\r\n        fetchData(GraficoRAC_Preparados, \"GraficoRAC_Preparados\");\r\n        fetchData(GraficoRAC_Outros, \"GraficoRAC_Outros\");\r\n        fetchData(GraficoNNCMP_Total, \"GraficoNNCMP_Total\");\r\n        fetchData(GraficoNNCLog_Total, \"GraficoNNCLog_Total\");\r\n        fetchData(GraficoCE_Total, \"GraficoCE_Total\");\r\n    }, []);\r\n\r\n    const GerarGrafico = (objeto, numGrafico) => {\r\n        ////debugger\r\n        //if (selectedIndicator1 !== \"\" && selectedIndicator2 !== \"\" && selectedIndicator3 !== \"\") {\r\n            ////debugger\r\n            setIsUpdatingData(true)\r\n            let json = objeto; //GraficoRAC_Total , 2, 3.....\r\n            let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n            let groupBy = function groupBy(list, keyGetter) {\r\n                const map = new Map();\r\n                list.forEach((item) => {\r\n                    const key = keyGetter(item);\r\n                    const collection = map.get(key);\r\n                    if (!collection) {\r\n                        map.set(key, [item]);\r\n                    } else {\r\n                        collection.push(item);\r\n                    }\r\n                });\r\n                return map;\r\n            }\r\n\r\n            // let xaxis = Array.from(groupBy(json, x => x[selectedIndicator1]), ([name, value]) => ({ name, value }));\r\n            // let yaxis = Array.from(groupBy(json, x => x[selectedIndicator2]), ([name, value]) => ({ name }));\r\n\r\n            let xaxis = Array.from(groupBy(json, x => x[\"Periodo\"]), ([name, value]) => ({ name, value }));\r\n            let yaxis = [{name:'Evolutivo 2020'},{name:'Evolutivo 2021'},{name:'Evolutivo Meta'},{name:'Meta'},{name:'2019'},{name:'2020'},{name: '2021'}];\r\n\r\n            // xaxis.sort(function (a, b) {\r\n            //     return parseFloat(a.name) - parseFloat(b.name);\r\n            // });\r\n\r\n            xaxis.forEach(x => {\r\n                // x['yaxis'] = Array.from(groupBy(x.value, x => x[selectedIndicator2]), ([name, value]) => ({ name, quantidade: somaX(x, name, selectedIndicator2, \"Quant\") }));\r\n                if (x.name == \"2019\"){\r\n                    x['yaxis'] = [{name: \"2019\", value: x.value[0].Valor}]\r\n                }else if (x.name == \"2020\"){\r\n                    x['yaxis'] = [{name: \"2020\", value: x.value[0].Valor}]\r\n                }else if(x.name == \"Meta\"){\r\n                    x['yaxis'] = [{name: \"Meta\", value: x.value[0].Valor}]\r\n                }else if(x.name == \"2021\"){\r\n                    x['yaxis'] = [{name: \"2021\", value: x.value[0].Valor}]\r\n                }else{\r\n                    x['yaxis'] = [\r\n                                    {name: \"Evolutivo 2020\", value: x.value[0].a2020},\r\n                                    {name: \"Evolutivo Meta\", value: x.value[0].aMeta},\r\n                                    {name: \"Evolutivo 2021\", value: x.value[0].a2021}\r\n                                ]\r\n                }\r\n            })\r\n\r\n            let series = []\r\n            yaxis.forEach((y, index) => {\r\n                let dataset = xaxis.map(xx => {\r\n                    let yaxysvalue = xx.yaxis.filter(r => r.name === y.name);\r\n                    if (yaxysvalue.length)\r\n                        return yaxysvalue[0].value\r\n\r\n                    return null\r\n                })\r\n\r\n                //let cor = colorsBars[Math.floor(Math.random() * colorsBars.length)]\r\n\r\n                let tipo = 'line'\r\n                let cor = '#bfbfbf'\r\n                let corLabel = '#bfbfbf'\r\n                let yAx = \"B\"\r\n                let varborderDash = [0,0]\r\n\r\n                switch (y.name){\r\n\r\n                    case \"2019\": \r\n                                    tipo = \"bar\"\r\n                                    cor = \"#bfbfbf\"\r\n                                    corLabel = \"#bfbfbf\"\r\n                                    yAx = \"A\"\r\n                                    break\r\n                    case \"2020\": \r\n                                    tipo = \"bar\"\r\n                                    cor = \"#bfbfbf\"\r\n                                    corLabel = \"#bfbfbf\"\r\n                                    yAx = \"A\"\r\n                                    break\r\n                    case \"Meta\": \r\n                                    tipo = \"bar\"\r\n                                    cor = \"rgb(245,156,0)\"\r\n                                    corLabel = \"rgb(245,156,0)\"\r\n                                    yAx = \"A\"\r\n                                    break\r\n                    case \"2021\": \r\n                                    tipo = \"bar\"\r\n                                    cor = \"#cccccc\"\r\n                                    corLabel = \"#cccccc\"\r\n                                    yAx = \"A\"\r\n                                    break\r\n                    case \"Evolutivo 2020\": \r\n                                    tipo = \"line\"\r\n                                    cor = \"rgb(166, 166, 166)\"\r\n                                    corLabel = \"rgb(166, 166, 166)\"\r\n                                    varborderDash = [10,5]\r\n                                    yAx = \"B\"\r\n                                    break\r\n                    case \"Evolutivo Meta\": \r\n                                    tipo = \"line\"\r\n                                    cor = \"rgb(245,156,0)\"\r\n                                    corLabel = \"rgb(245,156,0)\"\r\n                                    yAx = \"B\"\r\n                                    break\r\n                    case \"Evolutivo 2021\": \r\n                                    tipo = \"line\"\r\n                                    cor = \"rgb(89,89,89)\"\r\n                                    corLabel = \"rgb(89,89,89)\"\r\n                                    yAx = \"B\"\r\n                                    break\r\n                                 \r\n                    default:\r\n                                    break\r\n\r\n\r\n                }\r\n\r\n                let serie = {\r\n                    type: tipo,\r\n                    yAxisID: yAx,\r\n                    label: y.name,\r\n                    backgroundColor: cor,\r\n                    fill: false,\r\n                    borderColor: cor,\r\n                    borderWidth: 2,\r\n                    pointRadius: 5,\r\n                    pointBackgroundColor: \"transparent\",\r\n                    pointBorderColor: \"transparent\",\r\n                    borderDash: varborderDash, \r\n                    data: dataset,\r\n                    datalabels: {\r\n                    \r\n                        align: \"top\",\r\n                        anchor: \"end\",\r\n                        offset: 10,\r\n                        padding: -2,\r\n                        color: corLabel,\r\n                        //clip: true,\r\n                        font: {\r\n                            size: \"10\",\r\n                        },\r\n                        \r\n                    }\r\n                     \r\n                }\r\n                series.push(serie)\r\n            })\r\n\r\n            let seriesAdd = []\r\n            \r\n                series.filter(s => s.label != null).forEach(element => {\r\n                    seriesAdd.push(element)\r\n                });\r\n           \r\n\r\n            const dashboardData = {\r\n                labels: xaxis.map(r => r.name),\r\n                datasets: seriesAdd,\r\n                indicators\r\n                \r\n            };\r\n            //debugger\r\n            switch (numGrafico){\r\n                case \"GraficoRAC_Total\":\r\n                    setresponseGraficoRAC_Total(dashboardData)\r\n                    break\r\n                case \"GraficoRAC_Aves\":\r\n                    setresponseGraficoRAC_Aves(dashboardData)\r\n                    break\r\n                case \"GraficoRAC_Suinos\":\r\n                    setresponseGraficoRAC_Suinos(dashboardData)\r\n                    break\r\n                case \"GraficoRAC_Preparados\":\r\n                    setresponseGraficoRAC_Preparados(dashboardData)\r\n                    break\r\n                case \"GraficoRAC_Outros\":\r\n                    setresponseGraficoRAC_Outros(dashboardData)\r\n                    break\r\n                case \"GraficoNNCMP_Total\":\r\n                    setresponseGraficoNNCMP_Total(dashboardData)\r\n                    break\r\n                case \"GraficoNNCLog_Total\":\r\n                    setresponseGraficoNNCLog_Total(dashboardData)\r\n                    break\r\n                case \"GraficoCE_Total\":\r\n                    setresponseGraficoCE_Total(dashboardData)\r\n                    break\r\n                default:\r\n                    break\r\n\r\n            }\r\n\r\n            setIsUpdatingData(false)\r\n    }\r\n\r\n    const DataTableColGroupDemo = () => {\r\n\r\n        if (!GraficoRAC_Total) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < GraficoRAC_Total.length; i++) {\r\n            json.push(GraficoRAC_Total[i])\r\n        }\r\n\r\n        const sales = json\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <DataTable value={sales} sortMode=\"multiple\">\r\n                        <Column field=\"Periodo\" header=\"Período\" sortable></Column>\r\n                        <Column field=\"Valor\" header=\"Nº RAC Histórico\" sortable ></Column>\r\n                        <Column field=\"a2020\" header=\"Nº RAC 2020 Mensal\" sortable></Column>\r\n                        <Column field=\"aMeta\" header=\"Nº RAC Meta Mensal\" sortable></Column>\r\n                        <Column field=\"a2021\" header=\"Nº RAC 2021 Mensal\" sortable></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        //////////////////////////////////////////\r\n    }\r\n\r\n    const DataTableRACME = () => {\r\n\r\n        if (!TableRacME) return;\r\n\r\n        ////debugger\r\n\r\n        let json = []\r\n\r\n        for (let i = 0; i < TableRacME.length; i++) {\r\n            json.push(TableRacME[i])\r\n        }\r\n\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <DataTable value={json} sortMode=\"multiple\">\r\n                        <Column field=\"Unidade\" header=\"Unidade\"></Column>\r\n                        <Column field=\"Tipo do Problema\" header=\"Tipo do Problema\"></Column>\r\n                        <Column field=\"Manifestante\" header=\"Manifestante\"></Column>\r\n                        <Column field=\"Nº RAC\" header=\"Nº RAC\"></Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        //////////////////////////////////////////\r\n    }\r\n\r\n    function aplicar() {\r\n        //debugger\r\n        GerarGrafico(GraficoRAC_Total, \"GraficoRAC_Total\")\r\n        GerarGrafico(GraficoRAC_Aves, \"GraficoRAC_Aves\")\r\n        GerarGrafico(GraficoRAC_Suinos, \"GraficoRAC_Suinos\")\r\n        GerarGrafico(GraficoRAC_Preparados, \"GraficoRAC_Preparados\")\r\n        GerarGrafico(GraficoRAC_Outros, \"GraficoRAC_Outros\")\r\n        GerarGrafico(GraficoNNCMP_Total, \"GraficoNNCMP_Total\")\r\n        GerarGrafico(GraficoNNCLog_Total, \"GraficoNNCLog_Total\")\r\n        GerarGrafico(GraficoCE_Total, \"GraficoCE_Total\")\r\n    }\r\n\r\n    const fetchData = (objeto, numGrafico) => {\r\n\r\n        setIsUpdatingData(true)\r\n\r\n        let parm = \" \";\r\n\r\n        api.getSearaBaseRacME(parm).then((response) => {\r\n\r\n            let json = JSON.parse(response.data)\r\n            setTableRacME(json)\r\n        })\r\n\r\n        if(numGrafico == \"GraficoRAC_Total\"){\r\n            //debugger\r\n            let parametros = ['where 1=1']\r\n            api.getSearaBaseRacCE(parametros).then((response) => {\r\n                // Do whatever you want to transform the data\r\n                //debugger\r\n\r\n                let json = JSON.parse(response.data)\r\n                let datasets = [];\r\n                let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                //AddItensToJsonArray(json, 100000, \"bar\")\r\n                //debugger\r\n                setGraficoRAC_Total(json)\r\n\r\n                console.time(\"ProcessResponseBarChart\")\r\n                let { dateField, field, ano } = SetParamsToQuery();\r\n\r\n                SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                let problemas = GetIndicators(json, field);\r\n                AddLineMockData(datasets);\r\n                AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                const dashboardData = {\r\n                    labels: months,\r\n                    datasets: datasets,\r\n                    indicators\r\n                };\r\n\r\n                setresponseGraficoRAC_Total(dashboardData)\r\n\r\n                setIsUpdatingData(false)\r\n\r\n                //GerarGrafico(GraficoRAC_Total, \"GraficoRAC_Total\")\r\n\r\n            }).catch(err => {\r\n                // what now?\r\n                console.log(err);\r\n\r\n            });\r\n        }else if (numGrafico == \"GraficoRAC_Aves\"){\r\n            //debugger\r\n            let parametros = ['WHERE Negócio=\\'AVES\\'']\r\n            api.getSearaBaseRac(parametros).then((response) => {\r\n                // Do whatever you want to transform the data\r\n                //debugger\r\n\r\n                let json = JSON.parse(response.data)\r\n                let datasets = [];\r\n                let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                //AddItensToJsonArray(json, 100000, \"bar\")\r\n                //debugger\r\n                setGraficoRAC_Aves(json)\r\n              \r\n                console.time(\"ProcessResponseBarChart\")\r\n                let { dateField, field, ano } = SetParamsToQuery();\r\n\r\n                SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                let problemas = GetIndicators(json, field);\r\n                AddLineMockData(datasets);\r\n                AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                const dashboardData = {\r\n                    labels: months,\r\n                    datasets: datasets,\r\n                    indicators\r\n                };\r\n\r\n                setresponseGraficoRAC_Aves(dashboardData)\r\n\r\n                setIsUpdatingData(false)\r\n\r\n                //GerarGrafico(GraficoRAC_Aves, \"GraficoRAC_Aves\")\r\n\r\n            }).catch(err => {\r\n                // what now?\r\n                console.log(err);\r\n\r\n            });\r\n\r\n        }else if (numGrafico == \"GraficoRAC_Suinos\"){\r\n            //debugger\r\n            let parametros = ['WHERE Negócio=\\'SUÍ\\'']\r\n            api.getSearaBaseRac(parametros).then((response) => {\r\n                // Do whatever you want to transform the data\r\n                //debugger\r\n\r\n                let json = JSON.parse(response.data)\r\n                let datasets = [];\r\n                let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                //AddItensToJsonArray(json, 100000, \"bar\")\r\n                //debugger\r\n                setGraficoRAC_Suinos(json)\r\n              \r\n                console.time(\"ProcessResponseBarChart\")\r\n                let { dateField, field, ano } = SetParamsToQuery();\r\n\r\n                SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                let problemas = GetIndicators(json, field);\r\n                AddLineMockData(datasets);\r\n                AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                const dashboardData = {\r\n                    labels: months,\r\n                    datasets: datasets,\r\n                    indicators\r\n                };\r\n\r\n                setresponseGraficoRAC_Suinos(dashboardData)\r\n\r\n                setIsUpdatingData(false)\r\n\r\n                //GerarGrafico(GraficoRAC_Aves, \"GraficoRAC_Aves\")\r\n\r\n            }).catch(err => {\r\n                // what now?\r\n                console.log(err);\r\n\r\n            });\r\n\r\n        }else if (numGrafico == \"GraficoRAC_Preparados\"){\r\n            //debugger\r\n            let parametros = ['WHERE Negócio=\\'Preparados\\'']\r\n            api.getSearaBaseRac(parametros).then((response) => {\r\n                // Do whatever you want to transform the data\r\n                //debugger\r\n\r\n                let json = JSON.parse(response.data)\r\n                let datasets = [];\r\n                let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                //AddItensToJsonArray(json, 100000, \"bar\")\r\n                //debugger\r\n                setGraficoRAC_Preparados(json)\r\n              \r\n                console.time(\"ProcessResponseBarChart\")\r\n                let { dateField, field, ano } = SetParamsToQuery();\r\n\r\n                SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                let problemas = GetIndicators(json, field);\r\n                AddLineMockData(datasets);\r\n                AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                const dashboardData = {\r\n                    labels: months,\r\n                    datasets: datasets,\r\n                    indicators\r\n                };\r\n\r\n                setresponseGraficoRAC_Preparados(dashboardData)\r\n\r\n                setIsUpdatingData(false)\r\n\r\n                //GerarGrafico(GraficoRAC_Aves, \"GraficoRAC_Aves\")\r\n\r\n            }).catch(err => {\r\n                // what now?\r\n                console.log(err);\r\n\r\n            });\r\n\r\n        }else if (numGrafico == \"GraficoRAC_Outros\"){\r\n            //debugger\r\n            let parametros = ['WHERE Negócio=\\'OUTROS\\'']\r\n            api.getSearaBaseRac(parametros).then((response) => {\r\n                // Do whatever you want to transform the data\r\n                //debugger\r\n\r\n                let json = JSON.parse(response.data)\r\n                let datasets = [];\r\n                let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                //AddItensToJsonArray(json, 100000, \"bar\")\r\n                //debugger\r\n                setGraficoRAC_Outros(json)\r\n              \r\n                console.time(\"ProcessResponseBarChart\")\r\n                let { dateField, field, ano } = SetParamsToQuery();\r\n\r\n                SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                let problemas = GetIndicators(json, field);\r\n                AddLineMockData(datasets);\r\n                AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                const dashboardData = {\r\n                    labels: months,\r\n                    datasets: datasets,\r\n                    indicators\r\n                };\r\n\r\n                setresponseGraficoRAC_Outros(dashboardData)\r\n\r\n                setIsUpdatingData(false)\r\n\r\n                //GerarGrafico(GraficoRAC_Aves, \"GraficoRAC_Aves\")\r\n\r\n            }).catch(err => {\r\n                // what now?\r\n                console.log(err);\r\n\r\n            });\r\n\r\n        }else if (numGrafico == \"GraficoNNCMP_Total\"){\r\n            //debugger\r\n            let parametros = ['WHERE 1=1 ']\r\n            api.getSearaBaseNCCMPCE(parametros).then((response) => {\r\n                // Do whatever you want to transform the data\r\n                //debugger\r\n\r\n                let json = JSON.parse(response.data)\r\n                let datasets = [];\r\n                let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                //AddItensToJsonArray(json, 100000, \"bar\")\r\n                //debugger\r\n                setGraficoNNCMP_Total(json)\r\n              \r\n                console.time(\"ProcessResponseBarChart\")\r\n                let { dateField, field, ano } = SetParamsToQuery();\r\n\r\n                SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                let problemas = GetIndicators(json, field);\r\n                AddLineMockData(datasets);\r\n                AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                const dashboardData = {\r\n                    labels: months,\r\n                    datasets: datasets,\r\n                    indicators\r\n                };\r\n\r\n                setresponseGraficoNNCMP_Total(dashboardData)\r\n\r\n                setIsUpdatingData(false)\r\n\r\n                //GerarGrafico(GraficoRAC_Aves, \"GraficoRAC_Aves\")\r\n\r\n            }).catch(err => {\r\n                // what now?\r\n                console.log(err);\r\n\r\n            });\r\n\r\n        }else if (numGrafico == \"GraficoNNCLog_Total\"){\r\n            \r\n            let parametros = ['WHERE 1=1 ']\r\n            api.getSearaBaseNCCMPCE(parametros).then((response) => {\r\n                // Do whatever you want to transform the data\r\n                //debugger\r\n\r\n                let json = JSON.parse(response.data)\r\n                let datasets = [];\r\n                let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                //AddItensToJsonArray(json, 100000, \"bar\")\r\n                //debugger\r\n                setGraficoNNCLog_Total(json)\r\n              \r\n                console.time(\"ProcessResponseBarChart\")\r\n                let { dateField, field, ano } = SetParamsToQuery();\r\n\r\n                SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                let problemas = GetIndicators(json, field);\r\n                AddLineMockData(datasets);\r\n                AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                const dashboardData = {\r\n                    labels: months,\r\n                    datasets: datasets,\r\n                    indicators\r\n                };\r\n\r\n                setresponseGraficoNNCLog_Total(dashboardData)\r\n\r\n                setIsUpdatingData(false)\r\n\r\n                //GerarGrafico(GraficoRAC_Aves, \"GraficoRAC_Aves\")\r\n\r\n            }).catch(err => {\r\n                // what now?\r\n                console.log(err);\r\n\r\n            });\r\n\r\n        }else if (numGrafico == \"GraficoCE_Total\"){\r\n            //debugger\r\n            let parametros = ['WHERE    Negócio =\\'AVES LEVELS\\' ']\r\n            api.getSearaBaseCE(parametros).then((response) => {\r\n                // Do whatever you want to transform the data\r\n                //debugger\r\n\r\n                let json = JSON.parse(response.data)\r\n                let datasets = [];\r\n                let indicators = Object.keys(json[0]).map(key => key);\r\n\r\n                //AddItensToJsonArray(json, 100000, \"bar\")\r\n                //debugger\r\n                setGraficoCE_Total(json)\r\n              \r\n                console.time(\"ProcessResponseBarChart\")\r\n                let { dateField, field, ano } = SetParamsToQuery();\r\n\r\n                SetDateInJsonArrayToQueryOverObjects(json, dateField);\r\n                let problemas = GetIndicators(json, field);\r\n                AddLineMockData(datasets);\r\n                AddDataByFilters(problemas, json, ano, field, datasets, \"bar\");\r\n                console.timeEnd(\"ProcessResponseBarChart\")\r\n\r\n                const dashboardData = {\r\n                    labels: months,\r\n                    datasets: datasets,\r\n                    indicators\r\n                };\r\n\r\n                setresponseGraficoCE_Total(dashboardData)\r\n\r\n                setIsUpdatingData(false)\r\n\r\n                //GerarGrafico(GraficoRAC_Aves, \"GraficoRAC_Aves\")\r\n\r\n            }).catch(err => {\r\n                // what now?\r\n                console.log(err);\r\n\r\n            });\r\n\r\n        }\r\n\r\n        \r\n    };\r\n\r\n    const showSuccess = (errorMessage, detailMessage) => {\r\n        toast.current.show({ severity: 'success', summary: errorMessage, detail: detailMessage });\r\n    }\r\n\r\n    const showError = (errorMessage, detailMessage) => {\r\n        toast.current.show({ severity: 'error', summary: errorMessage, detail: detailMessage, life: 6000 });\r\n    }\r\n\r\n    const UpdatingDatabase = () => {\r\n        return (\r\n            <div>\r\n                <h1 className={'h2'}>\r\n                    Atualizando a base\r\n                    <br />\r\n                    <small>Puxando dados da RAC</small>\r\n                    <br />\r\n                </h1>\r\n                <ProgressBar mode=\"indeterminate\" style={{ height: '16px' }}></ProgressBar>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    // Se esta logado exibe tela do dashboard:\r\n    return (\r\n        // <div style=\"width: 1220px !important;\">\r\n        <div> \r\n            <Row>\r\n                <Col lg={12}>\r\n                    {isUpdatingData ? (<UpdatingDatabase />) : (\r\n                        <div>\r\n                            <h1 className={'h2'}>\r\n                                KPI - RCA\r\n                                    <br />\r\n                                <small>Descrição do KPI</small>\r\n                            </h1>\r\n                            <div className=\"btn-toolbar mb-2 mb-md-0\">\r\n                                <div className=\"btn-group mr-2\">\r\n                                    <button className=\"btn btn-sm btn-outline-secondary\" onClick={fetchData}>Atualizar</button>\r\n                                </div>  \r\n\r\n                                <Pdf targetRef={ref} filename=\"rac.pdf\" options={options} x={1} scale={0.8}>\r\n                                    {({toPdf}) => (\r\n                                        <button onClick={toPdf}>Gerar PDF</button>\r\n                                    )}\r\n                                </Pdf>\r\n\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n\r\n            <hr></hr>\r\n\r\n            {/* Botão aplicar */}\r\n            {isUpdatingData ? (<div> </div>) : (\r\n                <Row style={{ paddingRight: '15px', paddingLeft: '15px' }}>\r\n                    <button className=\"btn btn-sm btn-secondary\" style={{ width: '100%' }} onClick={aplicar}>Aplicar</button>\r\n                </Row>\r\n            )}\r\n\r\n            \r\n\r\n            {/* Graficos */}\r\n            <div className=\"pad10\" ref={ref}  >\r\n                <Row>\r\n                    <Col className=\"mt-5 col-12 \">\r\n                        <h1>Relatório de Atendimento ao Consumidor (RAC)</h1>\r\n                    </Col>\r\n                    \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Total Habilitador\" subTitle=\"\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoCE_Total} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        \r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Total RAC\" subTitle=\"RA\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoRAC_Total} options={lightOptions}/>\r\n                            </Card>\r\n                        )}\r\n  \r\n                    </Col>\r\n                    \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                                \r\n                    </Col>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Total NNC Matéria-Prima\" subTitle=\"\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoNNCMP_Total} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n                \r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Aves\" subTitle=\"RAC\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoRAC_Aves} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Suínos\" subTitle=\"RAC\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoRAC_Suinos} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Preparados\" subTitle=\"RAC\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoRAC_Preparados} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Outros\" subTitle=\"RAC\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoRAC_Outros} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                </Row>\r\n                \r\n                {/* mercado externo */}\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"Corpos estranhos\" subTitle=\"Corpo Estranho\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoCE_Total} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col className=\"mt-5\">\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            \r\n                                DataTableRACME()\r\n                            \r\n                        )}\r\n                    </Col>\r\n\r\n                </Row>  \r\n\r\n                {/* mercado interno */}\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"NNC Matérial Prima\" subTitle=\"Total\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoNNCMP_Total} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        \r\n                    </Col>\r\n\r\n                </Row>   \r\n\r\n                {/* atendimento comercial */}\r\n                <Row>\r\n                    <Col>\r\n                        {isUpdatingData ? (<LoadingSkeletonCard />) : (\r\n                            <Card title=\"NNC Log\" subTitle=\"Total\" className=\"mt-5\">\r\n                                <Chart type=\"bar\" data={responseGraficoNNCLog_Total} options={lightOptions} />\r\n                            </Card>\r\n                        )}\r\n                    </Col>\r\n                    <Col>\r\n                        \r\n                        \r\n                    </Col>\r\n\r\n                </Row>  \r\n\r\n                        \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\dashViewNNCLog.js",[],"C:\\Users\\gcnun\\PainelKPI\\react-primereact-charts-demo\\src\\views\\dashViewNNCMP.js",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":6,"column":8,"nodeType":"128","messageId":"129","endLine":6,"endColumn":17},{"ruleId":"126","severity":1,"message":"130","line":40,"column":12,"nodeType":"128","messageId":"129","endLine":40,"endColumn":27},{"ruleId":"126","severity":1,"message":"131","line":3,"column":5,"nodeType":"128","messageId":"129","endLine":3,"endColumn":41},{"ruleId":"126","severity":1,"message":"132","line":4,"column":5,"nodeType":"128","messageId":"129","endLine":4,"endColumn":21},{"ruleId":"126","severity":1,"message":"133","line":5,"column":5,"nodeType":"128","messageId":"129","endLine":5,"endColumn":20},{"ruleId":"126","severity":1,"message":"134","line":6,"column":5,"nodeType":"128","messageId":"129","endLine":6,"endColumn":21},{"ruleId":"126","severity":1,"message":"135","line":7,"column":5,"nodeType":"128","messageId":"129","endLine":7,"endColumn":18},{"ruleId":"126","severity":1,"message":"136","line":8,"column":5,"nodeType":"128","messageId":"129","endLine":8,"endColumn":24},{"ruleId":"126","severity":1,"message":"137","line":10,"column":10,"nodeType":"128","messageId":"129","endLine":10,"endColumn":16},{"ruleId":"138","severity":1,"message":"139","line":21,"column":1,"nodeType":"140","endLine":249,"endColumn":2},{"ruleId":"141","severity":1,"message":"142","line":25,"column":32,"nodeType":"143","endLine":25,"endColumn":79},{"ruleId":"141","severity":1,"message":"142","line":30,"column":21,"nodeType":"143","endLine":30,"endColumn":107},{"ruleId":null,"fatal":true,"severity":2,"message":"144","line":1447,"column":11},{"ruleId":"126","severity":1,"message":"145","line":1,"column":17,"nodeType":"128","messageId":"129","endLine":1,"endColumn":25},{"ruleId":"126","severity":1,"message":"146","line":1,"column":27,"nodeType":"128","messageId":"129","endLine":1,"endColumn":36},{"ruleId":"126","severity":1,"message":"147","line":1,"column":38,"nodeType":"128","messageId":"129","endLine":1,"endColumn":44},{"ruleId":"126","severity":1,"message":"148","line":4,"column":8,"nodeType":"128","messageId":"129","endLine":4,"endColumn":23},{"ruleId":"126","severity":1,"message":"149","line":5,"column":10,"nodeType":"128","messageId":"129","endLine":5,"endColumn":16},{"ruleId":"126","severity":1,"message":"150","line":7,"column":10,"nodeType":"128","messageId":"129","endLine":7,"endColumn":19},{"ruleId":"126","severity":1,"message":"151","line":8,"column":10,"nodeType":"128","messageId":"129","endLine":8,"endColumn":18},{"ruleId":"126","severity":1,"message":"152","line":10,"column":8,"nodeType":"128","messageId":"129","endLine":10,"endColumn":13},{"ruleId":"126","severity":1,"message":"127","line":11,"column":8,"nodeType":"128","messageId":"129","endLine":11,"endColumn":17},{"ruleId":"126","severity":1,"message":"153","line":17,"column":10,"nodeType":"128","messageId":"129","endLine":17,"endColumn":21},{"ruleId":"126","severity":1,"message":"154","line":19,"column":10,"nodeType":"128","messageId":"129","endLine":19,"endColumn":16},{"ruleId":"126","severity":1,"message":"155","line":20,"column":10,"nodeType":"128","messageId":"129","endLine":20,"endColumn":18},{"ruleId":"126","severity":1,"message":"156","line":22,"column":8,"nodeType":"128","messageId":"129","endLine":22,"endColumn":18},{"ruleId":"126","severity":1,"message":"157","line":35,"column":18,"nodeType":"128","messageId":"129","endLine":35,"endColumn":28},{"ruleId":"126","severity":1,"message":"158","line":45,"column":10,"nodeType":"128","messageId":"129","endLine":45,"endColumn":31},{"ruleId":"126","severity":1,"message":"159","line":55,"column":5,"nodeType":"128","messageId":"129","endLine":55,"endColumn":9},{"ruleId":"160","severity":1,"message":"161","line":95,"column":8,"nodeType":"162","endLine":95,"endColumn":10,"suggestions":"163"},{"ruleId":"164","severity":1,"message":"165","line":131,"column":28,"nodeType":"166","messageId":"167","endLine":131,"endColumn":30},{"ruleId":"164","severity":1,"message":"165","line":133,"column":34,"nodeType":"166","messageId":"167","endLine":133,"endColumn":36},{"ruleId":"164","severity":1,"message":"165","line":135,"column":33,"nodeType":"166","messageId":"167","endLine":135,"endColumn":35},{"ruleId":"164","severity":1,"message":"165","line":137,"column":33,"nodeType":"166","messageId":"167","endLine":137,"endColumn":35},{"ruleId":"126","severity":1,"message":"168","line":296,"column":11,"nodeType":"128","messageId":"129","endLine":296,"endColumn":32},{"ruleId":"164","severity":1,"message":"165","line":381,"column":23,"nodeType":"166","messageId":"167","endLine":381,"endColumn":25},{"ruleId":"164","severity":1,"message":"165","line":422,"column":30,"nodeType":"166","messageId":"167","endLine":422,"endColumn":32},{"ruleId":"164","severity":1,"message":"165","line":464,"column":30,"nodeType":"166","messageId":"167","endLine":464,"endColumn":32},{"ruleId":"164","severity":1,"message":"165","line":506,"column":30,"nodeType":"166","messageId":"167","endLine":506,"endColumn":32},{"ruleId":"164","severity":1,"message":"165","line":548,"column":30,"nodeType":"166","messageId":"167","endLine":548,"endColumn":32},{"ruleId":"164","severity":1,"message":"165","line":590,"column":30,"nodeType":"166","messageId":"167","endLine":590,"endColumn":32},{"ruleId":"164","severity":1,"message":"165","line":632,"column":30,"nodeType":"166","messageId":"167","endLine":632,"endColumn":32},{"ruleId":"164","severity":1,"message":"165","line":674,"column":30,"nodeType":"166","messageId":"167","endLine":674,"endColumn":32},{"ruleId":"126","severity":1,"message":"169","line":721,"column":11,"nodeType":"128","messageId":"129","endLine":721,"endColumn":22},{"ruleId":"126","severity":1,"message":"170","line":725,"column":11,"nodeType":"128","messageId":"129","endLine":725,"endColumn":20},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'isAuthenticated' is assigned a value but never used.","'SetDateInJsonArrayToQueryOverObjects' is defined but never used.","'SetParamsToQuery' is defined but never used.","'AddLineMockData' is defined but never used.","'AddDataByFilters' is defined but never used.","'GetIndicators' is defined but never used.","'AddItensToJsonArray' is defined but never used.","'months' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","Parsing error: Identifier 'DataTableRACFinalCRIT' has already been declared\n\n\u001b[0m \u001b[90m 1445 | \u001b[39m    }\u001b[0m\n\u001b[0m \u001b[90m 1446 | \u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1447 | \u001b[39m    \u001b[36mconst\u001b[39m \u001b[33mDataTableRACFinalCRIT\u001b[39m \u001b[33m=\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\n\u001b[0m \u001b[90m      | \u001b[39m          \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 1448 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 1449 | \u001b[39m        \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39m\u001b[33mTableRacFinalCRIT\u001b[39m) \u001b[36mreturn\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 1450 | \u001b[39m\u001b[0m","'useState' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'ChartDataLabels' is defined but never used.","'Button' is defined but never used.","'InputText' is defined but never used.","'Password' is defined but never used.","'axios' is defined but never used.","'ColumnGroup' is defined but never used.","'Ripple' is defined but never used.","'Dropdown' is defined but never used.","'classNames' is defined but never used.","'colorsBars' is defined but never used.","'LoadingSkeletonSquare' is defined but never used.","'cors' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'GraficoCE_Total', 'GraficoNNCLog_Total', 'GraficoNNCMP_Total', 'GraficoRAC_Aves', 'GraficoRAC_Outros', 'GraficoRAC_Preparados', 'GraficoRAC_Suinos', and 'GraficoRAC_Total'. Either include them or remove the dependency array.","ArrayExpression",["173"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'DataTableColGroupDemo' is assigned a value but never used.","'showSuccess' is assigned a value but never used.","'showError' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"174","fix":"175"},"Update the dependencies array to be: [GraficoCE_Total, GraficoNNCLog_Total, GraficoNNCMP_Total, GraficoRAC_Aves, GraficoRAC_Outros, GraficoRAC_Preparados, GraficoRAC_Suinos, GraficoRAC_Total]",{"range":"176","text":"177"},[3850,3852],"[GraficoCE_Total, GraficoNNCLog_Total, GraficoNNCMP_Total, GraficoRAC_Aves, GraficoRAC_Outros, GraficoRAC_Preparados, GraficoRAC_Suinos, GraficoRAC_Total]"]